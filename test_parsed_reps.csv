question,gold_query,gold_parsed_rep,pred_query,pred_parsed_rep
How many singers do we have?,SELECT count(*) FROM singer,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(singer_id) FROM singer,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the total number of singers?,SELECT count(*) FROM singer,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(singer_id) FROM singer,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What is the average, minimum, and maximum age of all singers from France?","SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=12, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=12, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=12, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='france', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(age) FROM singer WHERE country = 'France',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=12, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='france', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What is the average, minimum, and maximum age for all French singers?","SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=12, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=12, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=12, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='france', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(age) FROM singer WHERE country = 'France',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=12, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='france', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are  the different countries with singers above age 20?,SELECT DISTINCT country FROM singer WHERE age  >  20,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=20.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > 20,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=20.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show all countries and the number of singers in each country.,"SELECT country ,  count(*) FROM singer GROUP BY country","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T2.country, COUNT(T2.country) FROM singer AS T1 INNER JOIN singer AS T2 ON T1.country = T2.country GROUP BY T2.country","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}"
How many singers are from each country?,"SELECT country ,  count(*) FROM singer GROUP BY country","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(singer_id) FROM singer GROUP BY country,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the maximum capacity and the average of all stadiums ?,"select max(capacity), average from stadium","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MAX(capacity) FROM stadium,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the average and maximum capacities for all stadiums ?,"select avg(capacity) ,  max(capacity) from stadium","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(capacity) FROM stadium,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the name and capacity for the stadium with the highest average attendance?,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.name, T2.capacity FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id ORDER BY T2.average DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
How many concerts are there in year 2014 or 2015?,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2015.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(concert_id) FROM concert WHERE year = 2014 INTERSECT SELECT COUNT(concert_id) FROM concert WHERE year = 2015,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2015.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Show the stadium name and the number of concerts in each stadium.,"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=17, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.name, COUNT(T2.concert_id) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}"
"For each stadium, how many concerts play there?","SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=17, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(T3.concert_id) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id INNER JOIN singer_in_concert AS T3 ON T2.concert_id = T3.concert_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER'), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=19, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the stadium name and capacity with most number of concerts in year 2014 or after.,"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.name, T2.capacity FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year > '2014' GROUP BY T2.name, T2.capacity ORDER BY COUNT(T2.name) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False), ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the name and capacity of the stadium with the most concerts after 2013 ?,"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2013.0, val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.name, T2.capacity FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year > '2013' GROUP BY T1.year ORDER BY COUNT(T1.concert_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2013.0, val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=18, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which year has most number of concerts?,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=18, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT year FROM concert GROUP BY year ORDER BY COUNT(concert_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=18, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the year that had the most concerts?,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=18, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT COUNT(concert_id) FROM concert,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the stadium names without any concert.,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.concert_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of the stadiums without any concerts?,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T3.name FROM singer_in_concert AS T1 INNER JOIN concert AS T2 ON T1.concert_id = T2.concert_id INNER JOIN stadium AS T3 ON T2.stadium_id = T3.stadium_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show countries where a singer above age 40 and a singer below 30 are from.,SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=40.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=30.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.country FROM singer AS T1 INNER JOIN singer AS T2 ON T1.country = T2.country WHERE T1.age > 40 INTERSECT SELECT T2.country FROM singer AS T1 INNER JOIN singer AS T2 ON T1.country = T2.country WHERE T1.age < 30,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=40.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=30.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Show names for all stadiums except for stadiums having a concert in year 2014.,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.name FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year!= 2014,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of all stadiums that did not have a concert in 2014?,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.name FROM stadium AS T1 INNER JOIN concert AS T2 ON T2.stadium_id = T1.stadium_id WHERE T2.year!= 2014,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the names , themes , and number of singers for every concert ?","select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T2.concert_name, T2.theme, COUNT(T1.singer_id) FROM singer_in_concert AS T1 INNER JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_name, T2.theme","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=20, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=15, isDistinct=False), ColUnit(agg_id=None, col_id=16, isDistinct=False)], 'order_by': None, 'limit': None}"
List singer names and number of concerts for each singer.,"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T2.name, COUNT(T1.concert_id) FROM singer_in_concert AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names of the singers and number of concerts for each person?,"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.name, COUNT(T2.concert_id) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}"
List all singer names in concerts in year 2014.,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T3.name FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id INNER JOIN singer AS T3 ON T2.singer_id = T3.singer_id WHERE T1.year = '2014',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER'), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=19, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2015.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.name FROM stadium AS T1 INNER JOIN concert AS T2 ON T2.stadium_id = T1.stadium_id WHERE T2.year = '2014' INTERSECT SELECT T1.name FROM stadium AS T1 INNER JOIN concert AS T2 ON T2.stadium_id = T1.stadium_id WHERE T2.year = '2015',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2015.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2015.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}","SELECT T1.name, T1.location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year = '2014' INTERSECT SELECT T1.name, T1.location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year = '2015'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2014.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=2015.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Find the number of concerts happened in the stadium with the highest capacity .,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'desc')], 'limit': 1}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.concert_id) FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.capacity = ( SELECT MAX(capacity) FROM stadium ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the number of concerts that occurred in the stadium with the largest capacity ?,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'desc')], 'limit': 1}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(concert_id) FROM concert WHERE stadium_id = ( SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1 ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'desc')], 'limit': 1}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the weight of the youngest dog.,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T1.weight FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid WHERE T1.pettype = 'Dog' ORDER BY T1.pet_age LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
List the maximum weight and type for each type of pet.,"SELECT max(weight) ,  petType FROM pets GROUP BY petType","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.pettype, MAX(T1.weight) FROM pets AS T1 GROUP BY T1.pettype","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': None, 'limit': None}"
Find number of pets owned by students who are older than 20.,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=20.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T2.petid) FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=20.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many pets are owned by students that have an age greater than 20?,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=20.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(T2.petid) FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=20.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many dog pets are raised by female students?,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='f', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(pettype) FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid INNER JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.sex = 'F' AND T1.pettype = 'dog',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='f', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many different types of pet are there?,SELECT count(DISTINCT pettype) FROM pets,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=11, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT pettype) FROM pets,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=11, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the first name of students who have cat or dog pet.,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.fname FROM pets AS T1 INNER JOIN student AS T2 ON T1.petid = T2.stuid WHERE T1.pettype = 'cat' OR T1.pettype = 'dog',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the first names of every student who has a cat or dog as a pet?,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.fname FROM pets AS T1 INNER JOIN student AS T2 ON T1.petid = T2.stuid WHERE T1.pettype = 'cat' OR T1.pettype = 'dog',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the first name of students who have both cat and dog pets .,select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pet,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What are the students' first names who have both cats and dogs as pets?,SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.fname FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T1.petid = T3.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T2.fname FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T1.petid = T3.petid WHERE T3.pet,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Find the major and age of students who do not have a cat pet.,"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.major, T2.age FROM pets AS T1 INNER JOIN student AS T2 ON T2.stuid = T1.petid WHERE T1.pettype = 'cat' EXCEPT SELECT T2.major, T2.age FROM pets AS T1 INNER JOIN student AS T2 ON T2.stuid = T1.petid","{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
"What major is every student who does not own a cat as a pet, and also how old are they?","SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.major FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.petid NOT IN ( SELECT petid FROM pets WHERE pettype = 'cat' ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the id of students who do not have a cat pet.,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.stuid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.petid NOT IN ( SELECT petid FROM pets WHERE pettype = 'cat' ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the ids of the students who do not own cats as pets?,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.stuid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype != 'cat',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the first name and age of students who have a dog but do not have a cat as a pet.,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None), 'and', CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.fname, T1.age FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'dog'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the first name of every student who has a dog but does not have a cat?,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None), 'and', CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'dog' EXCEPT SELECT T1.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='dog', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Find the type and weight of the youngest pet.,"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'asc')], 'limit': 1}","SELECT pettype, weight FROM pets ORDER BY pet_age LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
"What type of pet is the youngest animal, and how much does it weigh?","SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T1.pettype FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid WHERE T2.stuid = ( SELECT stuid FROM student WHERE age = ( SELECT MAX(age) FROM student ) ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the id and weight of every pet who is older than 1?,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.petid, T1.weight FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid WHERE T1.pet_age > 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the average and maximum age for each type of pet.,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=12, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=12, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT AVG(T1.pet_age),  T2.pettype FROM pets AS T1 INNER JOIN pets AS T2 ON T1.pet_age = T2.pet_age GROUP BY T2.pettype","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=12, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the average and maximum age for each pet type?,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=12, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=12, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.pettype, AVG(T1.pet_age) FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid GROUP BY T1.pettype","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=12, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': None, 'limit': None}"
Find the average weight for each pet type.,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT AVG(T1.weight) FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid GROUP BY T1.pettype,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the average weight for each type of pet?,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T2.pettype, AVG(T2.weight) FROM has_pet AS T1 INNER JOIN pets AS T2 ON T1.petid = T2.petid GROUP BY T2.pettype","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': None, 'limit': None}"
Find the first name and age of students who have a pet.,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.fname, T2.age FROM student AS T2 INNER JOIN has_pet AS T1 ON T2.stuid = T1.stuid","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the different first names and ages of the students who do have pets?,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT DISTINCT T2.fname, T2.age FROM pets AS T1 INNER JOIN student AS T2 ON T2.stuid = T1.petid","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the id of the pet owned by student whose last name is ‘Smith’.,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='smith', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.petid FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid INNER JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.lname = 'Smith',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='smith', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the id of the pet owned by the student whose last name is 'Smith'?,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='smith', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.petid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='smith', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the number of pets for each student who has any pet and student id.,"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(T2.petid) FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"For students who have pets , how many pets does each student have ? list their ids instead of names .","select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT COUNT(T2.petid),  T1.stuid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the first name and gender of student who have more than one pet.,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T2.fname, T2.sex FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid GROUP BY T2.fname, T2.sex, T2.stuid HAVING COUNT(T1.petid) > 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False), ColUnit(agg_id=None, col_id=4, isDistinct=False), ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the first name and gender of the all the students who have more than one pet?,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.fname, T1.sex FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.fname, T1.sex HAVING COUNT(T2.stuid) > 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False), ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}"
Find the last name of the student who has a cat that is age 3.,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=3.0, val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.lname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' AND T3.pet_age = 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the last name of the student who has a cat that is 3 years old?,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=3.0, val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.lname FROM pets AS T1 INNER JOIN student AS T2 ON T1.petid = T2.stuid WHERE T1.pettype = 'cat' AND T1.pet_age = 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='cat', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the average age of students who do not have any pet .,select avg(age) from student where stuid not in (select stuid from has_pet),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(age) FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_pet ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the average age for all students who do not own any pets ?,select avg(age) from student where stuid not in (select stuid from has_pet),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T1.age) FROM student AS T1 LEFT JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.stuid IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many employees are there?,SELECT count(*) FROM employee,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.employee_id) FROM employee AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of employees,SELECT count(*) FROM employee,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(employee_id) FROM employee,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Sort employee names by their age in ascending order.,SELECT name FROM employee ORDER BY age,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT T1.name FROM employee AS T1 ORDER BY T1.age ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
List the names of employees and sort in ascending order of age.,SELECT name FROM employee ORDER BY age,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the number of employees from each city?,"SELECT count(*) ,  city FROM employee GROUP BY city","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(T1.employee_id) FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id GROUP BY T1.city,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}"
Which cities do more than one employee under age 30 come from?,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=30.0, val2=None)], 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.city FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.age < 30 GROUP BY T2.city HAVING COUNT(T1.employee_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=30.0, val2=None)], 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}"
Find the number of shops in each location.,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(T1.location) FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id WHERE T2.is_full_time = 1 GROUP BY T1.location,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}"
How many shops are there in each location?,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT COUNT(T1.shop_id), T1.location FROM shop AS T1 GROUP BY T1.location","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}"
Find the manager name and district of the shop whose number of products is the largest.,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.manager_name, T1.district FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.manager_name, T1.district, T1.number_products ORDER BY T1.number_products DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False), ColUnit(agg_id=None, col_id=7, isDistinct=False), ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What are the manager name and district of the shop that sells the largest number of products?,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.manager_name, T1.district FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id ORDER BY T1.number_products DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
find the minimum and maximum number of products of all stores.,"SELECT min(Number_products) ,  max(Number_products) FROM shop","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MIN(number_products) FROM shop,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the minimum and maximum number of products across all the shops?,"SELECT min(Number_products) ,  max(Number_products) FROM shop","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MIN(number_products) FROM shop,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Sort all the shops by number products in descending order, and return the name, location and district of each shop.","SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': None}","SELECT T1.name, T1.location, T1.district FROM shop AS T1 ORDER BY T1.number_products DESC","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
Find the names of stores whose number products is more than the average number of products.,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM shop AS T1 INNER JOIN employee AS T2 ON T1.manager_name = T2.name WHERE T1.number_products > ( SELECT AVG(number_products) FROM shop ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which shops' number products is above the average? Give me the shop names.,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM shop AS T1 INNER JOIN employee AS T2 ON T1.shop_id = T2.employee_id WHERE T1.number_products > ( SELECT AVG(number_products) FROM shop ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
find the name of employee who was awarded the most times in the evaluation.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T2.employee_id = T1.employee_id GROUP BY T1.employee_id ORDER BY COUNT(T2.employee_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which employee received the most awards in evaluations? Give me the employee name.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id GROUP BY T1.name ORDER BY COUNT(T2.year_awarded) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=15, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Find the name of the employee who got the highest one time bonus.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id WHERE T2.bonus = 1 ORDER BY T2.bonus DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which employee received the biggest bonus? Give me the employee name.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id ORDER BY T1.bonus DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Find the names of employees who never won any award in the evaluation.,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of the employees who never received any evaluation?,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the name of the shop that is hiring the largest number of employees?,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name ORDER BY COUNT(T1.employee_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=11, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which shop has the most employees? Give me the shop name.,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name ORDER BY COUNT(T1.employee_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=11, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Find the name of the shops that do not hire any employee.,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.shop_id = T2.shop_id WHERE T2.shop_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=10, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which shops run with no employees? Find the shop names,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.shop_id = T2.shop_id WHERE T1.employee_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the number of employees hired in each shop; show the shop name as well.,"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T2.name, COUNT(T1.employee_id) FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}"
What is total bonus given in all evaluations?,SELECT sum(bonus) FROM evaluation,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=16, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(bonus) FROM evaluation,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=16, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the total amount of bonus given in all the evaluations.,SELECT sum(bonus) FROM evaluation,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=16, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(bonus) FROM evaluation,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=16, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is all the information about hiring?,SELECT * FROM hiring,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM employee AS T1 INNER JOIN hiring AS T2 ON T1.employee_id = T2.employee_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=11, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many different store locations are there?,SELECT count(DISTINCT LOCATION) FROM shop,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.location) FROM shop AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many documents do we have?,SELECT count(*) FROM Documents,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(document_id) FROM documents,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of documents.,SELECT count(*) FROM Documents,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(document_id) FROM documents,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"List document IDs, document names, and document descriptions for all documents.","SELECT document_id ,  document_name ,  document_description FROM Documents","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT document_id, document_name, document_description FROM documents","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the ids, names, and descriptions for all documents?","SELECT document_id ,  document_name ,  document_description FROM Documents","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT document_id, document_name, document_description FROM documents","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the names and template ids for documents that contain the letter w in their description.,"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE ""%w%""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='like', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='%w%', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.document_name, T1.template_id FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_description LIKE '%w%'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='like', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='%w%', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What is the document id, template id and description for document named ""Robbin CV""?","SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  ""Robbin CV""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='robbin cv', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.document_id, T2.template_id, T2.template_details FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = 'Robbin CV'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='robbin cv', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many different templates do all document use?,SELECT count(DISTINCT template_id) FROM Documents,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.template_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of different templates used for documents.,SELECT count(DISTINCT template_id) FROM Documents,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T2.template_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many documents are using the template with type code 'PPT'?,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='ppt', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.document_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id INNER JOIN ref_template_types AS T3 ON T2.template_type_code = T3.template_type_code WHERE T3.template_type_code = 'PPT',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1='ppt', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show all template ids and number of documents using each template.,"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.template_id, COUNT(T2.document_id) FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}"
"What are all different template ids used for documents, and how many times were each of them used?","SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.template_id, COUNT(T2.document_id) FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the id and type code for the template used by the most documents?,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.template_id, T2.template_type_code FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id GROUP BY T2.template_id, T2.template_type_code ORDER BY COUNT(T1.document_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False), ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Return the id and type code of the template that is used for the greatest number of documents.,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code ORDER BY COUNT(T1.template_type_code) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Show ids for all templates that are used by more than one document.,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.template_id FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id HAVING COUNT(T1.template_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the template ids of any templates used in more than a single document?,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.template_id FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id GROUP BY T2.template_id HAVING COUNT(T2.template_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}"
Show ids for all templates not used by any document.,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT DISTINCT T2.template_id FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the ids for templates that are not used in any documents?,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.template_id FROM templates AS T1 LEFT JOIN documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many templates do we have?,SELECT count(*) FROM Templates,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(template_id) FROM templates,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of templates.,SELECT count(*) FROM Templates,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(template_id) FROM templates,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Show template ids, version numbers, and template type codes for all templates.","SELECT template_id ,  version_number ,  template_type_code FROM Templates","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.template_id, T1.version_number, T1.template_type_code FROM templates AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the ids, version numbers, and type codes for each template?","SELECT template_id ,  version_number ,  template_type_code FROM Templates","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.template_id, T1.version_number, T1.template_type_code FROM templates AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show all distinct template type codes for all templates.,SELECT DISTINCT template_type_code FROM Templates,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T2.template_type_code FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the different template type codes?,SELECT DISTINCT template_type_code FROM Templates,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the ids of templates with template type code PP or PPT?,"SELECT template_id FROM Templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='pp', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='ppt', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.template_id FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code = 'PP',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1='pp', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the ids of templates that have the code PP or PPT.,"SELECT template_id FROM Templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='pp', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='ppt', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.template_id FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code = 'PP',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1='pp', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many templates have template type code CV?,"SELECT count(*) FROM Templates WHERE template_type_code  =  ""CV""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='cv', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(template_id) FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code = 'CV',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1='cv', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of templates of the type CV.,"SELECT count(*) FROM Templates WHERE template_type_code  =  ""CV""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='cv', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(template_id) FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code = 'CV',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1='cv', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the version number and template type code for the template with version number later than 5?,"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=5.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT DISTINCT T1.version_number, T1.template_type_code FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.version_number > 5","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=5.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the version numbers and template type codes of templates with a version number greater than 5.,"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=5.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.version_number, T1.template_type_code FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.version_number > 5","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=5.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show all template type codes and number of templates for each.,"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.template_type_code, COUNT(T2.template_id) FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}"
"What are the different template type codes, and how many templates correspond to each?","SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.template_type_code, COUNT(T2.template_id) FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}"
Which template type code has most number of templates?,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T2.template_type_code = T1.template_type_code GROUP BY T1.template_type_code ORDER BY COUNT(T2.template_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Return the type code of the template type that the most templates belong to.,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code ORDER BY COUNT(T2.template_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Show all template type codes with less than three templates.,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T2.template_type_code = T1.template_type_code GROUP BY T1.template_type_code HAVING COUNT(T2.template_id) < 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the codes of template types that have fewer than 3 templates?,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code HAVING COUNT(T1.template_type_code) < 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}"
What the smallest version number and its template type code?,"SELECT min(Version_Number) ,  template_type_code FROM Templates","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT MIN(version_number), template_type_code FROM templates","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Return the lowest version number, along with its corresponding template type code.","SELECT min(Version_Number) ,  template_type_code FROM Templates","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.version_number, T1.template_type_code FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code ORDER BY T1.version_number LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
"What is the template type code of the template used by document with the name ""Data base""?","SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  ""Data base""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='data base', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.template_type_code FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = 'Data base',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='data base', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the template type code of the template that is used by a document named Data base.,"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  ""Data base""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='data base', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.template_type_code FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = 'Data base',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='data base', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show all document names using templates with template type code BK.,"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""BK""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='bk', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T3.document_name FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code INNER JOIN documents AS T3 ON T2.template_id = T3.template_id WHERE T1.template_type_code = 'BK',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1='bk', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of documents that use templates with the code BK?,"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""BK""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='bk', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.document_name FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='bk', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show all template type codes and the number of documents using each type.,"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T2.template_type_code, COUNT(T2.template_type_code) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id INNER JOIN ref_template_types AS T3 ON T2.template_type_code = T3.template_type_code GROUP BY T2.template_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}"
"What are the different template type codes, and how many documents use each type?","SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.template_type_code, COUNT(T2.document_id) FROM ref_template_types AS T1 INNER JOIN documents AS T2 ON T2.template_id = T1.template_type_code GROUP BY T1.template_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}"
Which template type code is used by most number of documents?,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.template_type_code FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id GROUP BY T2.template_type_code ORDER BY COUNT(T1.document_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Return the code of the template type that is most commonly used in documents.,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code ORDER BY COUNT(T2.template_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Show all template type codes that are not used by any document.,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.template_type_code FROM ref_template_types AS T1 LEFT JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the codes of template types that are not used for any document?,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.template_type_code FROM ref_template_types AS T1 LEFT JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show all template type codes and descriptions.,"SELECT template_type_code ,  template_type_description FROM Ref_template_types","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.template_type_code, T1.template_type_description FROM ref_template_types AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the type codes and descriptions for all template types?,"SELECT template_type_code ,  template_type_description FROM Ref_template_types","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.template_type_code, T1.template_type_description FROM ref_template_types AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What is the template type code for template type description ""Book"".","SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='book', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Book',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='book', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Return the type code of the template type with the description ""Book"".","SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='book', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T2.template_type_code = T1.template_type_code WHERE T1.template_type_description = 'Book',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='book', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the template ids with template type description ""Presentation"".","SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  ""Presentation""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='presentation', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.template_id FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='presentation', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the ids corresponding to templates with the description 'Presentation'.,"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  ""Presentation""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='presentation', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.template_id FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_description = 'Presentation',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='presentation', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many paragraphs in total?,SELECT count(*) FROM Paragraphs,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(paragraph_id) FROM paragraphs,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of paragraphs.,SELECT count(*) FROM Paragraphs,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(paragraph_id) FROM paragraphs,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many paragraphs for the document with name 'Summer Show'?,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='summer show', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(paragraph_id) FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Summer Show',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='summer show', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of paragraphs in the document named 'Summer Show'.,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='summer show', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(paragraph_id) FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Summer Show',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='summer show', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show paragraph details for paragraph with text 'Korea ' .,select other_details from paragraphs where paragraph_text like 'korea',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='like', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='korea', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Korea ',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='korea ', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the details for the paragraph that includes the text 'Korea ' ?,select other_details from paragraphs where paragraph_text like 'korea',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='like', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='korea', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Korea ',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='korea ', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show all paragraph ids and texts for the document with name 'Welcome to NY'.,"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='welcome to ny', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.paragraph_id, T2.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Welcome to NY'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='welcome to ny', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?,"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='welcome to ny', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.paragraph_id, T2.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Welcome to NY'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='welcome to ny', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Show all paragraph texts for the document ""Customer reviews"".","SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Customer reviews""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='customer reviews', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Customer reviews',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='customer reviews', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the paragraph texts for the document with the name 'Customer reviews'?,"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Customer reviews""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='customer reviews', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Customer reviews',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='customer reviews', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show all document ids and the number of paragraphs in each document. Order by document id.,"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), 'asc')], 'limit': None}","SELECT T2.document_id, COUNT(T1.paragraph_id) FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id ORDER BY T2.document_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
"Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.","SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), 'asc')], 'limit': None}","SELECT DISTINCT T1.document_id, COUNT(T1.paragraph_id) FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': None, 'limit': None}"
"Show all document ids, names and the number of paragraphs in each document.","SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT document_id, document_name, COUNT(paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY document_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}"
List all document ids with at least two paragraphs.,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.document_id FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id HAVING COUNT(T2.paragraph_id) >= 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the ids of documents that have 2 or more paragraphs?,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id HAVING COUNT(T1.paragraph_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the document id and name with greatest number of paragraphs?,"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.document_id, T2.document_name FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id, T2.document_name ORDER BY COUNT(T1.paragraph_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False), ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Return the id and name of the document with the most paragraphs.,"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T3.document_id, T3.document_name FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id INNER JOIN documents AS T3 ON T3.document_id = T2.document_id WHERE T1.paragraph_id = ( SELECT MAX(T1.paragraph_id) FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the document id with least number of paragraphs?,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T1.document_id FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY COUNT(T2.paragraph_id) LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=14, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
Return the id of the document with the fewest paragraphs.,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id ORDER BY COUNT(T1.paragraph_id) LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
What is the document id with 1 to 2 paragraphs?,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='between', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=2.0)], 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id HAVING COUNT(T1.paragraph_id) BETWEEN 1 AND 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='between', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None), val1=1.0, val2=2.0)], 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}"
Give the ids of documents that have between one and two paragraphs.,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='between', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=2.0)], 'group_by': [ColUnit(agg_id=None, col_id=14, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id HAVING COUNT(T1.paragraph_id) BETWEEN 1 AND 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='between', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None), val1=1.0, val2=2.0)], 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}"
Show the document id with paragraph text 'Brazil' and 'Ireland'.,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='brazil', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='ireland', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Brazil' INTERSECT SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Ireland',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='brazil', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='ireland', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='brazil', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='ireland', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Brazil' INTERSECT SELECT T1.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Ireland',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='brazil', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None), val1='ireland', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
How many teachers are there?,SELECT count(*) FROM teacher,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(teacher_id) FROM teacher,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the total count of teachers?,SELECT count(*) FROM teacher,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(teacher_id) FROM teacher,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the names of teachers in ascending order of age.,SELECT Name FROM teacher ORDER BY Age ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of the teachers ordered by ascending age?,SELECT Name FROM teacher ORDER BY Age ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT name FROM teacher ORDER BY age ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
What are the age and hometown of teachers?,"SELECT Age ,  Hometown FROM teacher","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.age, T1.hometown FROM teacher AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the age and hometown of every teacher?,"SELECT Age ,  Hometown FROM teacher","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.age, T2.hometown FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the name of teachers whose hometown is not `` Little Lever Urban District '' .,"select name from teacher where hometown != ""little lever urban district""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1='little lever urban district', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.hometown!= 'Little Lever Urban District',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1='little lever urban district', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?,"select name from teacher where hometown != ""little lever urban district""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1='little lever urban district', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.hometown != 'Little Lever Urban District',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1='little lever urban district', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the name of teachers aged either 32 or 33?,SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=32.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=33.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.age = 32 INTERSECT SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.age = 33,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=32.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=33.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What are the names of the teachers who are aged either 32 or 33?,SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=32.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=33.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.age = 32 INTERSECT SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.age = 33,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=32.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=33.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What is the hometown of the youngest teacher?,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T1.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.age = 'Youngest',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1='youngest', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Where is the youngest teacher from?,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T1.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.hometown ORDER BY T1.age LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
Show different hometown of teachers and the number of teachers from each hometown.,"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.hometown FROM teacher AS T1 GROUP BY T1.hometown,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}"
"For each hometown, how many teachers are there?","SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(teacher_id) FROM teacher GROUP BY hometown,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}"
List the most common hometown of teachers.,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T2.teacher_id = T1.teacher_id GROUP BY T1.hometown ORDER BY COUNT(T1.hometown) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Show the hometowns shared by at least two teachers.,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.hometown HAVING COUNT(T1.teacher_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the towns from which at least two teachers come from?,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.hometown HAVING COUNT(T1.hometown) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the name of each teacher and what course they teach?,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER'), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER'), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the name of the teacher for the math course.,"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  ""Math""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER'), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1='math', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T3.course ='math',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1='math', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of the people who teach math courses?,"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  ""Math""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER'), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1='math', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN course AS T3 ON T3.course_id = T1.course_id WHERE T3.course ='math',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1='math', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show names of teachers and the number of courses they teach.,"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.name, COUNT(T2.course_id) FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names of the teachers and how many courses do they teach?,"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.name, COUNT(T2.course_id) FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}"
Show names of teachers that teach at least two courses.,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id HAVING COUNT(T1.teacher_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names of the teachers who teach at least two courses?,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id HAVING COUNT(T2.teacher_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}"
List the names of teachers who have not been arranged to teach courses.,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of the teachers whose courses have not been arranged?,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.course_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many visitors below age 30 are there?,SELECT count(*) FROM visitor WHERE age  <  30,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=30.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.id) FROM visitor AS T1 WHERE T1.age < 30,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=30.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=4.0, val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T2.name FROM visitor AS T2 WHERE T2.level_of_membership > 4 ORDER BY T2.level_of_membership DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=4.0, val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.","SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=4.0, val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), 'desc')], 'limit': None}","SELECT T2.name, T2.level_of_membership FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_id = T2.id WHERE T2.level_of_membership > 4 ORDER BY T2.age DESC","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=4.0, val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
Find the id and name of the museum that has the most staff members?,"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.museum_id, T1.name FROM museum AS T1 GROUP BY T1.museum_id ORDER BY COUNT(T1.museum_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Find the average number of staff working for the museums that were open before 2009.,SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=2009.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(num_of_staff) FROM museum WHERE open_year LIKE '2008%',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='like', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='2008%', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the opening year and staff number of the museum named Plaza Museum?,"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='plaza museum', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.open_year, T2.num_of_staff FROM visit AS T1 INNER JOIN museum AS T2 ON T1.museum_id = T2.museum_id WHERE T1.visitor_id = 'id' AND T2.name = 'Plaza Museum'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='id', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='plaza museum', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.,SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=2010.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.museum_id = T2.museum_id GROUP BY T1.name HAVING COUNT(T1.name) > ( SELECT MIN(num_of_staff) FROM museum WHERE open_year > '2010' ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=1, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=2010.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
"find the id, name and age for visitors who visited some museums more than once.","SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.id, T1.name, T1.age FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id, T1.name, T1.age HAVING COUNT(T2.visitor_id) > 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False), ColUnit(agg_id=None, col_id=5, isDistinct=False), ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}"
"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?","SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.id, T1.name, T1.level_of_membership FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id ORDER BY T2.total_spent DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What are the id and name of the museum visited most times?,"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.museum_id, T1.name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.museum_id = T2.museum_id GROUP BY T1.museum_id ORDER BY COUNT(T2.museum_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the name of the museum that had no visitor yet?,SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.museum_id = T2.museum_id WHERE T2.num_of_ticket = 0,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=0.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the name and age of the visitor who bought the most tickets at once.,"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.name, T2.age FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_id = T2.id ORDER BY T1.num_of_ticket DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What are the average and maximum number of tickets bought in all visits?,"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T1.num_of_ticket) FROM visit AS T1 GROUP BY T1.num_of_ticket,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the total ticket expense of the visitors whose membership level is 1?,SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(T2.total_spent) FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.level_of_membership = 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the number of visitors who did not visit any museum opened after 2010.,SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=8, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=2010.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(id) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year > 2010 ) ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=2010.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many museums were opened after 2013 or before 2008?,SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=2013.0, val2=None), 'or', CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=2008.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(museum_id) FROM museum WHERE open_year > 2013 INTERSECT SELECT COUNT(museum_id) FROM museum WHERE open_year < 2008,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=2013.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=2008.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Find the total number of players.,SELECT count(*) FROM players,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(player_id) FROM players,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many players are there?,SELECT count(*) FROM players,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(player_id) FROM players,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the total number of matches.,SELECT count(*) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(*) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of matches.,SELECT count(*) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(match_num) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the first name and birth date of all players from the country with code USA.,"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1='usa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.first_name, T1.birth_date FROM players AS T1 INNER JOIN players AS T2 ON T1.country_code = T2.country_code WHERE T2.country_code = 'USA'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1='usa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the first names and birth dates of players from the USA?,"SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1='usa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.first_name, T1.birth_date FROM players AS T1 INNER JOIN players AS T2 ON T1.country_code = T2.country_code WHERE T1.first_name = T2.first_name AND T1.birth_date = T2.birth_date AND T1.country_code = 'USA'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1='usa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the average age of losers and winners of all matches.,"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=27, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(loser_age) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the average ages of losers and winners across matches?,"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=27, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(loser_age) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the average rank of winners in all matches.,SELECT avg(winner_rank) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=34, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T2.ranking) FROM matches AS T1 INNER JOIN rankings AS T2 ON T2.player_id = T1.winner_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=39, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the average rank for winners in all matches?,SELECT avg(winner_rank) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=34, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(ranking) FROM rankings AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=39, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the highest rank of losers in all matches.,SELECT min(loser_rank) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=15, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MAX(T2.ranking) FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.loser_id = T2.player_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=39, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the best rank of losers across all matches?,SELECT min(loser_rank) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=15, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MIN(ranking) FROM rankings,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=39, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
find the number of distinct country codes of all players.,SELECT count(DISTINCT country_code) FROM players,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.country_code) FROM players AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many distinct countries do players come from?,SELECT count(DISTINCT country_code) FROM players,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.country_code) FROM players AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the number of distinct name of losers.,SELECT count(DISTINCT loser_name) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T1.loser_name FROM matches AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many different loser names are there?,SELECT count(DISTINCT loser_name) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.loser_name) FROM matches AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=14, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the names of all winners who played in both 2013 and 2016.,SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2013.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2016.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}","SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2013.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2016.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
List the number of all matches who played in years of 2013 or 2016.,SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2013.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2016.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.match_num) FROM matches AS T1 INNER JOIN players AS T2 ON T2.player_id = T1.loser_id WHERE T1.year = 2013 INTERSECT SELECT COUNT(DISTINCT T1.match_num) FROM matches AS T1 INNER JOIN players AS T2 ON T2.player_id = T1.loser_id WHERE T1.year = 2016,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2013.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2016.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
How many matches were played in 2013 or 2016?,SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2013.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2016.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT match_num) FROM matches WHERE YEAR = 2013 INTERSECT SELECT COUNT(DISTINCT match_num) FROM matches WHERE YEAR = 2016,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2013.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=2016.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='wta championships', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='australian open', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}","SELECT T1.country_code, T1.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='wta championships', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='australian open', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What are the first names and country codes for players who won both the WTA Championships and the Australian Open?,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='wta championships', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='australian open', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}","SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='wta championships', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='australian open', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Find the first name and country code of the oldest player.,"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'asc')], 'limit': 1}","SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=39, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the first name and country code of the oldest player?,"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'asc')], 'limit': 1}","SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = ( SELECT MAX(loser_age) FROM matches )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the first and last name of all players in the order of birth date.,"SELECT first_name ,  last_name FROM players ORDER BY birth_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'asc')], 'limit': None}","SELECT first_name, last_name FROM players ORDER BY birth_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
"What are the full names of all players, sorted by birth date?","SELECT first_name ,  last_name FROM players ORDER BY birth_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'asc')], 'limit': None}","SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN players AS T2 ON T1.birth_date = T2.birth_date ORDER BY T1.birth_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
"What are the full names of all left handed players, in order of birth date?","SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='l', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'asc')], 'limit': None}","SELECT first_name, last_name FROM players WHERE hand = 'left' ORDER BY birth_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='left', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
Find the first name and country code of the player who did the most number of tours.,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.first_name, T2.country_code FROM rankings AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id ORDER BY T1.tours DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the first name and country code of the player with the most tours?,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Find the year that has the most number of matches.,SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=37, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT COUNT(year) FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=37, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=37, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which year had the most matches?,SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=37, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=37, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=37, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Find the name and rank points of the winner who won the most times.,"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=33, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.first_name, T1.last_name, T3.ranking_points FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(T2.winner_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=41, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False), ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=31, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
"What is the name of the winner who has won the most matches, and how many rank points does this player have?","SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=33, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T2.winner_id ORDER BY COUNT(T2.match_num) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=31, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.,SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='australian open', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.winner_name FROM rankings AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open' ORDER BY T1.ranking_points DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='australian open', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=41, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
find the names of loser and winner who played in the match with greatest number of minutes.,"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.loser_name, T1.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.loser_id = T2.player_id INNER JOIN players AS T3 ON T1.winner_id = T3.player_id WHERE T1.minutes = ( SELECT MAX(minutes) FROM matches )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of the winner and loser who played in the longest match?,"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T2.winner_id = T1.player_id WHERE T2.minutes = ( SELECT MAX(minutes) FROM matches )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the first names of all players, and their average rankings?","SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=39, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.first_name FROM rankings AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
"What are the first names of all players, and their total ranking points?","SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=41, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=41, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
find the number of players for each country.,"SELECT count(*) ,  country_code FROM players GROUP BY country_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT COUNT(T1.country_code),  T1.country_code FROM players AS T1 GROUP BY T1.country_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}"
How many players are from each country?,"SELECT count(*) ,  country_code FROM players GROUP BY country_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.country_code) FROM players AS T1 GROUP BY T1.country_code,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}"
find the code of the country where has the greatest number of players.,SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.country_code FROM players AS T1 GROUP BY T1.country_code ORDER BY COUNT(T1.country_code) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What are the codes of countries with more than 50 players?,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=50.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.country_code HAVING COUNT(T2.player_id) > 50,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=40, isDistinct=False), operand2=None), val1=50.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}"
Find the total number of tours for each ranking date.,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=42, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=38, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=38, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(T1.tours) FROM rankings AS T1 INNER JOIN rankings AS T2 ON T1.ranking_date = T2.ranking_date GROUP BY T1.ranking_date,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=38, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=38, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=38, isDistinct=False)], 'order_by': None, 'limit': None}"
How many total tours were there for each ranking date?,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=42, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=38, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=38, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.ranking_date, COUNT(T1.tours) FROM rankings AS T1 GROUP BY T1.ranking_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=38, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=38, isDistinct=False)], 'order_by': None, 'limit': None}"
Find the number of matches happened in each year.,"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=37, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT YEAR) FROM matches,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=37, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many matches were played in each year?,"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=37, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT year FROM matches GROUP BY year,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=37, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names and ranks of the three youngest winners across all matches?,"SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None), 'asc')], 'limit': 3}","SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_age LIMIT 3","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None), 'asc')], 'limit': 3}"
How many different winners both participated in the WTA Championships and were left handed?,SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=33, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='wta championships', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=29, isDistinct=False), operand2=None), val1='l', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T1.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T2.hand = 'L' AND T1.tourney_name = 'WTA Championships',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='l', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='wta championships', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the number of left handed winners who participated in the WTA Championships.,SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=33, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='wta championships', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=29, isDistinct=False), operand2=None), val1='l', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.hand) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'Left' AND T2.tourney_name = 'WTA Championships',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='left', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), val1='wta championships', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.","SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What is the first name, country code, and birth date of the player with the most winner rank points across all matches?","SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=40, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=41, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Find the number of players for each hand type.,"SELECT count(*) ,  hand FROM players GROUP BY hand","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(player_id) FROM players WHERE hand = 'Right' INTERSECT SELECT COUNT(player_id) FROM players WHERE hand = 'Left',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='right', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='left', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
How many players are there for each hand type?,"SELECT count(*) ,  hand FROM players GROUP BY hand","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(hand) FROM players GROUP BY hand,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}"
How many ships ended up being 'Captured'?,SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1='captured', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.id) FROM ship AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.disposition_of_ship = 'Captured',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=13, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1='captured', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the name and tonnage ordered by in descending alphaetical order for the names.,"SELECT name ,  tonnage FROM ship ORDER BY name DESC","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': None}","SELECT T1.name, T1.tonnage FROM ship AS T1 ORDER BY T1.name DESC","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
"List the name, date and result of each battle.","SELECT name ,  date FROM battle","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.name, T2.date, T2.result FROM death AS T1 INNER JOIN battle AS T2 ON T2.id = T1.caused_by_ship_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=13, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is maximum and minimum death toll caused each time?,"SELECT max(killed) ,  min(killed) FROM death","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=16, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=16, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MAX(killed) FROM death INTERSECT SELECT MIN(killed) FROM death,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=16, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=16, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What is the average number of injuries caused each time?,SELECT avg(injured) FROM death,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=17, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(injured) FROM death,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=17, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the death and injury situations caused by the ship with tonnage 't'?,"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.killed FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the different ids and names of the battles that lost any 'Brig' type shipes?,"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='brig', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.id, T1.name FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='brig', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the ids and names of the battles that led to more than 10 people killed in total.,"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=13, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=16, isDistinct=False), operand2=None), val1=10.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.id, T1.name FROM battle AS T1 INNER JOIN death AS T2 ON T2.caused_by_ship_id = T1.id GROUP BY T1.id HAVING SUM(T2.killed) > 10","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=16, isDistinct=False), operand2=None), val1=10.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the ship id and name that caused most total injuries?,"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.id, T2.name FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id, T2.name ORDER BY SUM(T1.injured) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False), ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=17, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?,SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='kaloyan', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='baldwin i', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T2.name FROM death AS T1 INNER JOIN battle AS T2 ON T1.caused_by_ship_id = T2.id WHERE T1.caused_by_ship_id = 107 AND T1.killed = 104 AND T2.latin_commander = 'Baldwin I',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=107.0, val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None), val1=104.0, val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='baldwin i', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many different results are there for the battles?,SELECT count(DISTINCT RESULT) FROM battle,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T2.result) FROM ship AS T1 INNER JOIN battle AS T2 ON T1.lost_in_battle = T2.id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many battles did not lose any ship with tonnage '225'?,SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=225.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.id) FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.tonnage!= '225',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=225.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta',"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='lettice', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='hms atalanta', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}","SELECT T1.name, T1.date FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name, T1.date FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='lettice', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='hms atalanta', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
what are all the addresses including line 1 and line 2?,"SELECT line_1 ,  line_2 FROM addresses","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.line_1, T1.line_2 FROM addresses AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the first and second line for all addresses?,"SELECT line_1 ,  line_2 FROM addresses","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT line_1, line_2 FROM addresses","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many courses in total are listed?,SELECT count(*) FROM Courses,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(course_id) FROM courses,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many courses are there?,SELECT count(*) FROM Courses,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(course_id) FROM courses,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which department offers the most number of degrees? List department name and id.,"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=13, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=18, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.department_name, T1.department_id FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T1.department_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=18, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=13, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the name and id of the department with the most number of degrees ?,"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=13, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=18, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.department_name, T2.department_id FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY COUNT(T1.degree_program_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=13, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=13, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=17, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
How many departments offer any degree?,SELECT count(DISTINCT department_id) FROM Degree_Programs,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T2.department_id) FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=13, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many different departments offer degrees?,SELECT count(DISTINCT department_id) FROM Degree_Programs,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.department_id) FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=18, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many different degrees are offered?,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(degree_summary_name) FROM degree_programs,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many degrees does the engineering department offer?,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=18, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='engineer', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(degree_program_id) FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Engineering',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=13, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=17, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='engineering', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many degrees does the engineering department have?,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=18, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='engineer', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.degree_summary_name) FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Engineering',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=13, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='engineering', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names and descriptions of all the sections?,"SELECT section_name ,  section_description FROM Sections","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.section_name, T1.section_description FROM sections AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names and descriptions for all the sections?,"SELECT section_name ,  section_description FROM Sections","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.section_name, T2.section_description FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=4, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=23, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names and id of courses having at most 2 sections?,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=4, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=23, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='lte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.course_name FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(T2.course_id) <= 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=4, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=23, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='lte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names and ids of every course with less than 2 sections?,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=4, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=23, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='lte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.course_name, T1.course_id FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id) < 2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=4, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=23, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=22, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}"
List the section_name in reversed lexicographical order.,SELECT section_name FROM Sections ORDER BY section_name DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T1.section_name FROM sections AS T1 ORDER BY T1.section_name DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
What are the names of the sections in reverse alphabetical order?,SELECT section_name FROM Sections ORDER BY section_name DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T2.section_name FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=4, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=23, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the semester which most student registered in? Show both the name and the id.,"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=27, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.semester_name, T1.semester_id FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(T1.semester_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=27, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=27, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
"For each semester, what is the name and id of the one with the most students registered?","SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=27, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.semester_name, T2.semester_id FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=27, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=27, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=46, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
"Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.","SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=31, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.first_name, T1.middle_name, T1.last_name, T2.degree_program_id FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T3.degree_program_id = T2.degree_program_id GROUP BY T1.first_name, T1.middle_name, T1.last_name, T2.degree_program_id HAVING COUNT(T2.degree_program_id) = 2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER'), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=44, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=34, isDistinct=False), ColUnit(agg_id=None, col_id=35, isDistinct=False), ColUnit(agg_id=None, col_id=36, isDistinct=False), ColUnit(agg_id=None, col_id=44, isDistinct=False)], 'order_by': None, 'limit': None}"
"What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?","SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=31, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = 2 GROUP BY T1.first_name, T1.middle_name, T1.last_name, T1.student_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=34, isDistinct=False), ColUnit(agg_id=None, col_id=35, isDistinct=False), ColUnit(agg_id=None, col_id=36, isDistinct=False), ColUnit(agg_id=None, col_id=31, isDistinct=False)], 'order_by': None, 'limit': None}"
"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.","SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER'), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='bachelor', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.first_name, T2.middle_name, T2.last_name FROM degree_programs AS T1 INNER JOIN students AS T2 ON T1.degree_program_id = T2.student_id WHERE T1.degree_summary_name = 'Bachelor'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='bachelor', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the first, middle, and last names for everybody enrolled in a Bachelors program?","SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER'), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='bachelor', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER'), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='bachelors', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the kind of program which most number of students are enrolled in?,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=19, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(T1.student_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=19, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=46, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the degree summary name that has the most number of students enrolled?,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=19, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(T2.degree_summary_name) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=19, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Find the program which most number of students are enrolled in. List both the id and the summary.,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=17, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.degree_program_id, T1.degree_summary_name FROM degree_programs AS T1 INNER JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(T1.degree_program_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=17, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=17, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the program id and the summary of the degree that has the most students enrolled?,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=17, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.degree_program_id, T1.degree_summary_name FROM degree_programs AS T1 INNER JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=17, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=46, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
"Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.","SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=31, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_id) AS num_enrollments FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=46, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=31, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=46, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
"What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?","SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=31, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_id) FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=46, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=31, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=46, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which semesters do not have any student enrolled? List the semester name.,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.semester_name FROM semesters AS T1 LEFT JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.semester_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the name of the semester with no students enrolled?,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.semester_name FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.student_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=27, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=46, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are all the course names of the courses which ever have students enrolled in?,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=8, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=49, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.course_name FROM student_enrolment_courses AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=8, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=49, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of all courses that have some students enrolled?,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=8, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=49, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.course_name FROM courses AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=8, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=49, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What's the name of the course with most number of enrollments?,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=8, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=49, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.course_name FROM student_enrolment_courses AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_name ORDER BY COUNT(T2.course_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=8, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=49, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the name of the course with the most students enrolled?,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=8, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=49, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.course_name FROM courses AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(T1.course_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=8, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=49, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Show the date and id of the transcript with at least 2 course results.,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=10, join_type=None), TableUnit(table_type='table_unit', table=9, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=55, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=51, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=55, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=55, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T2.transcript_date, T2.transcript_id FROM student_enrolment_courses AS T1 INNER JOIN transcripts AS T2 ON T1.student_enrolment_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(T1.student_enrolment_id) >= 2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=8, join_type=None), TableUnit(table_type='table_unit', table=9, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=50, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=51, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=51, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=50, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=51, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the date and id of the transcript with at least 2 courses listed?,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=10, join_type=None), TableUnit(table_type='table_unit', table=9, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=55, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=51, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=55, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=55, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT DISTINCT T1.transcript_date, T1.transcript_id FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING COUNT(T1.transcript_id) = 2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None), TableUnit(table_type='table_unit', table=10, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=51, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=55, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=51, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=51, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=51, isDistinct=False), ColUnit(agg_id=None, col_id=52, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the mobile phone number of the student named Timmothy Ward ?,select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), val1='timmothy', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), val1='ward', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.cell_mobile_number FROM students AS T1 INNER JOIN students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = 'Timmothy' AND T2.middle_name = 'Ward',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), val1='timmothy', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), val1='ward', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What is the first, middle, and last name of the first student to register?","SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), 'asc')], 'limit': 1}","SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
"Who is the earliest graduate of the school? List the first name, middle name and last name.","SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=41, isDistinct=False), operand2=None), 'asc')], 'limit': 1}","SELECT T3.first_name, T3.middle_name, T3.last_name FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id INNER JOIN students AS T3 ON T2.student_id = T3.student_id WHERE T1.semester_name = 'Graduation' ORDER BY T3.date_first_registered LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER'), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=27, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=46, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=31, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None), val1='graduation', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
Whose permanent address is different from his or her current address? List his or her first name.,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=33, isDistinct=False), val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T1.current_address_id!= T1.permanent_address_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=33, isDistinct=False), val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which address holds the most number of students currently? List the address id and all lines.,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=32, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.address_id FROM addresses AS T1 INNER JOIN students AS T2 ON T2.current_address_id = T1.address_id GROUP BY T1.address_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=31, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
"What is the id, line 1, and line 2 of the address with the most students?","SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=32, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.address_id, T1.line_1, T1.line_2 FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(T1.address_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=32, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the average transcript date?,SELECT avg(transcript_date) FROM Transcripts,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=52, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T1.transcript_date) FROM transcripts AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=52, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
When is the first transcript released? List the date and details.,"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=53, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T1.transcript_date FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id ORDER BY T1.transcript_date LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None), TableUnit(table_type='table_unit', table=10, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=51, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=55, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
"What is the earliest date of a transcript release, and what details can you tell me?","SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=53, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), 'asc')], 'limit': 1}","SELECT MIN(T1.transcript_date), T1.other_details FROM transcripts AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=52, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=53, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many transcripts are released?,SELECT count(*) FROM Transcripts,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(transcript_id) FROM transcripts,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=51, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many transcripts are listed?,SELECT count(*) FROM Transcripts,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(transcript_id) FROM transcripts,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=51, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the last transcript release date?,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT MAX(transcript_date) FROM transcripts,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=52, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.,"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=10, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=54, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=54, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT COUNT(DISTINCT T1.student_course_id),  T1.student_course_id FROM transcript_contents AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_course_id = T2.student_course_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=10, join_type=None), TableUnit(table_type='table_unit', table=8, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=54, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=48, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=54, isDistinct=True), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=54, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?,"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=10, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=54, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=54, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT MAX(T1.course_id) FROM ( SELECT T1.course_id, COUNT(T2.transcript_id) AS num FROM courses AS T1 INNER JOIN transcript_contents AS T2 ON T1.course_id = T2.student_course_id GROUP BY T1.course_id ) AS T","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [('sql', {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=10, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=54, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=55, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}, None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Show the date of the transcript which shows the least number of results, also list the id.","SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=10, join_type=None), TableUnit(table_type='table_unit', table=9, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=55, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=51, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=55, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=55, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T2.transcript_date FROM student_enrolment_courses AS T1 INNER JOIN transcripts AS T2 ON T1.student_course_id = T2.transcript_id GROUP BY T2.transcript_date ORDER BY COUNT(T1.student_course_id) LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=8, join_type=None), TableUnit(table_type='table_unit', table=9, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=51, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=52, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=48, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
What is the date and id of the transcript with the least number of results?,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=10, join_type=None), TableUnit(table_type='table_unit', table=9, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=55, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=51, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=55, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=55, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'asc')], 'limit': 1}","SELECT T1.transcript_id, T1.transcript_date FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(T2.student_course_id) ASC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=9, join_type=None), TableUnit(table_type='table_unit', table=10, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=51, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=55, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=51, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=52, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=51, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=54, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
What are the different addresses that have students living there?,SELECT count(DISTINCT current_address_id) FROM Students,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=32, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T2.line_1 FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List all the student details in reversed lexicographical order.,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None), 'desc')], 'limit': None}","SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 ORDER BY T1.first_name DESC, T1.middle_name DESC, T1.last_name DESC","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), 'desc'), (ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), 'desc'), (ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
What other details can you tell me about students in reverse alphabetical order?,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT other_student_details FROM students ORDER BY last_name DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
Describe the section h.,SELECT section_description FROM Sections WHERE section_name  =  'h',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='h', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.section_name FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'h',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=4, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=23, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='h', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the description for the section named h?,SELECT section_description FROM Sections WHERE section_name  =  'h',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='h', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.section_description FROM sections AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T1.section_name = 'h',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='h', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .,select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1='haiti', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=9700166582.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.first_name FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.country = 'Haiti' OR T2.cell_mobile_number = '09700166582',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=33, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1='haiti', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=9700166582.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?,select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1='haiti', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=9700166582.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1='haiti', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1=9700166582.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the title of all cartoons in alphabetical order.,SELECT Title FROM Cartoon ORDER BY title,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT title FROM cartoon,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the titles of the cartoons sorted alphabetically?,SELECT Title FROM Cartoon ORDER BY title,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT title FROM cartoon,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"List all cartoon directed by ""Ben Jones"".","SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT title FROM cartoon AS T1 INNER JOIN tv_series AS T2 ON T1.channel = T2.channel WHERE T1.directed_by = 'Ben Jones',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
list all cartoon titles and their directors ordered by their air date,"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), 'asc')], 'limit': None}","SELECT T1.title, T1.directed_by FROM cartoon AS T1 INNER JOIN tv_series AS T2 ON T2.channel = T1.channel ORDER BY T1.original_air_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
What is the name and directors of all the cartoons that are ordered by air date?,"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), 'asc')], 'limit': None}","SELECT T1.title, T1.directed_by FROM cartoon AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which country has the most of TV Channels? List the country and number of TV Channels it has.,"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT country, COUNT(id) FROM tv_channel GROUP BY country ORDER BY COUNT(id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the country with the most number of TV Channels and how many does it have?,"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT COUNT(T2.id), T2.country FROM tv_channel AS T1 INNER JOIN tv_channel AS T2 ON T1.id = T2.id GROUP BY T2.country ORDER BY COUNT(T2.id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
List the number of different series names and contents in the TV Channel table.,"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=1, isDistinct=True), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT series_name) FROM tv_channel,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=1, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many different series and contents are listed in the TV Channel table?,"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=1, isDistinct=True), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT series_name) FROM tv_channel UNION SELECT COUNT(DISTINCT content) FROM tv_channel,"{'union': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=1, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What is the content of the series Sky Radio?,"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='sky radio', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.content FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T2.channel = 'Sky Radio',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1='sky radio', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many TV Channel using language English?,"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = ""English"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(language) FROM tv_channel WHERE language = 'English',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many TV Channels use the English language?,"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = ""English"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(language) FROM tv_channel WHERE language = 'English',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the language used least number of TV Channel. List language and number of TV Channel.,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'asc')], 'limit': 1}","SELECT T1.language, COUNT(T1.id) FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T2.channel = T1.id GROUP BY T1.language ORDER BY COUNT(T1.id) LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
List each language and the number of TV Channels using it.,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.language, COUNT(T2.id) FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel GROUP BY T1.language","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}"
"For each language, list the number of TV Channels that use it.","SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(T1.language) FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel GROUP BY T1.language,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}"
"What is the TV Channel that shows the cartoon ""The Rise of the Blue Beetle!""? List the TV Channel's series name.","SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='the rise of the blue beetle!', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.series_name FROM cartoon AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.title = 'The Rise of the Blue Beetle!',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='the rise of the blue beetle!', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"List the title of all  Cartoons showed on TV Channel with series name ""Sky Radio"".","SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='sky radio', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.title FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='sky radio', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What is the title of all the cartools that are on the TV Channel with the series name ""Sky Radio""?","SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='sky radio', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.title FROM cartoon AS T1 INNER JOIN tv_channel AS T2 ON T2.id = T1.channel WHERE T2.series_name = 'Sky Radio',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='sky radio', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the Episode of all TV series sorted by rating.,SELECT Episode FROM TV_series ORDER BY rating,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT T2.episode FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.language = 'English' GROUP BY T2.episode ORDER BY COUNT(T2.episode) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=10, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What are all of the episodes ordered by ratings?,SELECT Episode FROM TV_series ORDER BY rating,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT DISTINCT T1.episode FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T2.id = T1.channel,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List top 3 highest Rating  TV series. List the TV series's Episode and Rating.,"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'desc')], 'limit': 3}","SELECT T2.episode, T2.rating FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.content = 'Drama' ORDER BY T2.rating DESC LIMIT 3","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='drama', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'desc')], 'limit': 3}"
What are 3 most highly rated episodes in the TV series table and what were those ratings?,"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'desc')], 'limit': 3}","SELECT T2.episode, T2.rating FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel ORDER BY T2.rating DESC LIMIT 3","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), 'desc')], 'limit': 3}"
What is minimum and maximum share of TV series?,"SELECT max(SHARE) , min(SHARE) FROM TV_series;","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MIN(share) FROM tv_series,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the maximum and minimum share for the TV series?,"SELECT max(SHARE) , min(SHARE) FROM TV_series;","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MAX(share) FROM tv_series,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=13, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What is the air date of TV series with Episode ""A Love of a Lifetime""?","SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='a love of a lifetime', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.episode FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T2.episode = 'A Love of a Lifetime',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='a love of a lifetime', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"When did the episode ""A Love of a Lifetime"" air?","SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='a love of a lifetime', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.air_date FROM cartoon AS T1 INNER JOIN tv_series AS T2 ON T1.channel = T2.channel WHERE T1.title = 'A Love of a Lifetime',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='a love of a lifetime', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What is the name of the series that has the episode ""A Love of a Lifetime""?","SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='a love of a lifetime', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.series_name FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T2.channel = T1.id WHERE T2.episode = 'A Love of a Lifetime',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='a love of a lifetime', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"List the Episode of all  TV series showed on TV Channel with series name ""Sky Radio"".","SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='sky radio', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.episode FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='sky radio', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What is the episode for the TV series named ""Sky Radio""?","SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='sky radio', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.episode FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=17, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='sky radio', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the number of cartoons directed by each of the listed directors.,"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=20, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT COUNT(title) FROM cartoon AS T1 INNER JOIN cartoon AS T2 ON T1.directed_by = T2.directed_by WHERE T1.directed_by IN ('Darrell Van Citters', 'Brian Sheesley')","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1=['darrell van citters', 'brian sheesley'], val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the production code and channel of the most recently aired cartoon .,"select production_code ,  channel from cartoon order by original_air_date desc limit 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.production_code, T2.channel FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel ORDER BY T2.original_air_date DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the produdction code and channel of the most recent cartoon ?,"select production_code ,  channel from cartoon order by original_air_date desc limit 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.production_code, T2.channel FROM tv_series AS T1 INNER JOIN cartoon AS T2 ON T1.channel = T2.channel ORDER BY T1.id DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=17, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
which countries' tv channels are playing some cartoon written by Todd Casey?,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=21, isDistinct=False), operand2=None), val1='todd casey', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.written_by = 'Todd Casey',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=21, isDistinct=False), operand2=None), val1='todd casey', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
which countries' tv channels are not playing any cartoon written by Todd Casey?,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=21, isDistinct=False), operand2=None), val1='todd casey', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T2.channel = T1.id WHERE T2.written_by = 'Todd Casey',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=21, isDistinct=False), operand2=None), val1='todd casey', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?,"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='michael chang', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}","SELECT T1.series_name, T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Ben Jones' INTERSECT SELECT T1.series_name, T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Michael Chang'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='michael chang', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?,"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='michael chang', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}","SELECT T1.series_name, T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Ben Jones' INTERSECT SELECT T1.series_name, T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Michael Chang'","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='michael chang', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What is the pixel aspect ratio and country of origin for all TV channels that do not use English?,"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.pixel_aspect_ratio_par, T1.country FROM tv_channel AS T1 WHERE T1.language!= 'English'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
find id of the tv channels that from the countries where have more than two tv channels.,SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.id FROM tv_channel AS T1 INNER JOIN tv_channel AS T2 ON T1.country = T2.country WHERE T1.id!= T2.id GROUP BY T2.id HAVING COUNT(T2.id) > 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)], 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the ids of all tv channels that have more than 2 TV channels?,SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT id FROM tv_channel GROUP BY id HAVING COUNT(id) > 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}"
find the id of tv channels that do not play any cartoon directed by Ben Jones.,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT DISTINCT T1.id FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by!= 'Ben Jones',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.id FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by!= 'Ben Jones',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
find the package option of the tv channel that do not have any cartoon directed by Ben Jones.,SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.package_option FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T2.channel = T1.id WHERE T2.directed_by!= 'Ben Jones',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?,SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.package_option FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by!= 'Ben Jones',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=24, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1='ben jones', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many poker players are there?,SELECT count(*) FROM poker_player,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(poker_player_id) FROM poker_player,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of poker players.,SELECT count(*) FROM poker_player,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(poker_player_id) FROM poker_player,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the earnings of poker players in descending order.,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T1.earnings FROM poker_player AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the earnings of poker players, ordered descending by value?",SELECT Earnings FROM poker_player ORDER BY Earnings DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T1.earnings FROM poker_player AS T1 ORDER BY T1.earnings DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
List the final tables made and the best finishes of poker players.,"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.final_table_made, T1.best_finish FROM poker_player AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the final tables made and best finishes for all poker players?,"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.final_table_made, T1.best_finish FROM poker_player AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the average earnings of poker players?,SELECT avg(Earnings) FROM poker_player,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T2.earnings) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the average earnings across all poker players.,SELECT avg(Earnings) FROM poker_player,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T1.earnings) FROM poker_player AS T1 GROUP BY T1.earnings,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the money rank of the poker player with the highest earnings?,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.money_rank FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Return the money rank of the player with the greatest earnings.,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT MAX(money_rank) FROM poker_player,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the maximum number of final tables made among poker players with earnings less than 200000?,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=200000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=200000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the maximum final tables made across all poker players who have earnings below 200000.,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=200000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=200000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of poker players?,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the names of all the poker players.,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of poker players whose earnings is higher than 300000?,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=300000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.earnings > 300000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=300000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Give the names of poker players who have earnings above 300000.,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=300000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.earnings > 300000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=300000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the names of poker players ordered by the final tables made in ascending order.,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT T1.name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id ORDER BY T2.final_table_made ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
"What are the names of poker players, ordered ascending by the number of final tables they have made?",SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.final_table_made ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
What is the birth date of the poker player with the lowest earnings?,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T2.birth_date FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
Return the birth date of the poker player with the lowest earnings.,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T2.birth_date FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
What is the money rank of the tallest poker player?,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.money_rank FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T2.height DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Return the money rank of the poker player with the greatest height.,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.money_rank FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T2.height DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the average earnings of poker players with height higher than 200?,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=200.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(T1.earnings) / COUNT(T1.earnings) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.height > 200,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='div', operand1=ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=5, isDistinct=False), operand2=None), operand2=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None))]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=200.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Give average earnings of poker players who are taller than 200.,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=200.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T2.earnings) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id WHERE T1.height > 200,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1=200.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of poker players in descending order of earnings?,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
Return the names of poker players sorted by their earnings descending.,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
What are different nationalities of people and the corresponding number of people from each nation?,"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT DISTINCT T1.nationality, COUNT(T1.people_id) FROM people AS T1 GROUP BY T1.nationality","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}"
How many people are there of each nationality?,"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.nationality) FROM people AS T1 GROUP BY T1.nationality,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the most common nationality of people?,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.nationality FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id GROUP BY T1.nationality ORDER BY COUNT(T1.nationality) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What are the nationalities that are shared by at least two people?,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.nationality FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id GROUP BY T1.nationality HAVING COUNT(T1.people_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}"
Return the nationalities for which there are two or more people.,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.nationality FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id GROUP BY T1.nationality HAVING COUNT(T1.people_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=1, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}"
List the names and birth dates of people in ascending alphabetical order of name.,"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'asc')], 'limit': None}","SELECT T1.name, T1.birth_date FROM people AS T1 ORDER BY T1.name ASC","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
"What are the names and birth dates of people, ordered by their names in alphabetical order?","SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'asc')], 'limit': None}","SELECT T2.name, T2.birth_date FROM people AS T2 ORDER BY T2.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
What are the names of people who are not from Russia?,"SELECT Name FROM people WHERE Nationality != ""Russia""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1='russia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.nationality!= 'Russia',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1='russia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the names of people that are not poker players.,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM poker_player ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of people who do not play poker?,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM poker_player ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many distinct nationalities are there?,SELECT count(DISTINCT Nationality) FROM people,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.nationality) FROM people AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of all the countries that became independent after 1950?,SELECT Name FROM country WHERE IndepYear  >  1950,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=1950.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T2.name FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.indepyear > 1950,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=1950.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Give the names of the nations that were founded after 1950.,SELECT Name FROM country WHERE IndepYear  >  1950,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=1950.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.indepyear > 1950,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=1950.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many countries have a republic as their form of government?,"SELECT count(*) FROM country WHERE GovernmentForm  =  ""Republic""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(*) FROM country WHERE governmentform = 'Republic',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many countries have governments that are republics?,"SELECT count(*) FROM country WHERE GovernmentForm  =  ""Republic""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(code) FROM country WHERE governmentform = 'Republic',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the total surface area of the countries in the Caribbean region?,"SELECT sum(SurfaceArea) FROM country WHERE Region  =  ""Caribbean""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='caribbean', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='caribbean', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How much surface area do the countires in the Carribean cover together?,"SELECT sum(SurfaceArea) FROM country WHERE Region  =  ""Caribbean""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='caribbean', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(surfacearea) FROM country WHERE region = 'Carribean',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='carribean', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What region is Kabul in?,"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  ""Kabul""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kabul', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.region FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.name = 'Kabul',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kabul', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which language is the most popular in Aruba?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba"" ORDER BY Percentage DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='aruba', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Aruba' GROUP BY T2.language ORDER BY T2.percentage DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='aruba', val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What language is predominantly spoken in Aruba?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba"" ORDER BY Percentage DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='aruba', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Aruba' ORDER BY T2.percentage DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='aruba', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Give me Brazil’s population and life expectancies.,"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  ""Brazil""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='brazil', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.population, T1.lifeexpectancy FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Brazil'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='brazil', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the region and population of Angola?,"SELECT Population ,  Region FROM country WHERE Name  =  ""Angola""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='angola', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.region, T2.population FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.name = 'Angola'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='angola', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the average expected life expectancy for countries in the region of Central Africa?,"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  ""Central Africa""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='central africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='central africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How long is the people’s average life expectancy in Central Africa?,"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  ""Central Africa""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='central africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='central africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the name of country that has the shortest life expectancy in Asia?,"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.continent = 'Asia' AND T1.percentage = ( SELECT MIN(percentage) FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Give the name of the country in Asia with the lowest life expectancy.,"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' AND T1.lifeexpectancy = ( SELECT MIN(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the total population and maximum GNP in Asia?,"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  ""Asia""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT SUM(T1.population),  MAX(T2.gnp) FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.continent = 'Asia'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the average life expectancy in African countries that are republics?,"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  ""Africa"" AND GovernmentForm  =  ""Republic""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' INTERSECT SELECT lifeexpectancy FROM country WHERE governmentform = 'Republic',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Give the average life expectancy for countries in Africa which are republics?,"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  ""Africa"" AND GovernmentForm  =  ""Republic""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(T1.lifeexpectancy) / COUNT(T1.code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' AND T1.continent = 'Africa',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='div', operand1=ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=14, isDistinct=False), operand2=None), operand2=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None))]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the total surface area of the continents Asia and Europe?,"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  ""Asia"" OR Continent  =  ""Europe""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Give the total surface area covered by countries in Asia or Europe.,"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  ""Asia"" OR Continent  =  ""Europe""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many people live in Gelderland district?,"SELECT sum(Population) FROM city WHERE District  =  ""Gelderland""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='gelderland', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(id) FROM city WHERE district = 'Gelderland',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='gelderland', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the total population of Gelderland district?,"SELECT sum(Population) FROM city WHERE District  =  ""Gelderland""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='gelderland', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(T2.population) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Netherlands' AND T2.district = 'Gelderland',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='netherlands', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='gelderland', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the average GNP and total population in all nations whose government is US territory?,"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  ""US Territory""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=15, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='us territory', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT SUM(gnp), SUM(population) FROM country WHERE governmentform = 'US Territory'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=15, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='us territory', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many unique languages are spoken in the world?,SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(language) FROM countrylanguage,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the number of distinct languages used around the world?,SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many type of governments are in Africa?,"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  ""Africa""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.governmentform) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many different forms of governments are there in Africa?,"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  ""Africa""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(governmentform) FROM country WHERE continent = 'Africa',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=18, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the total number of languages used in Aruba?,"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='aruba', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(T1.percentage) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='aruba', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many languages are spoken in Aruba?,"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='aruba', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='aruba', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many official languages does Afghanistan have?,"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Afghanistan"" AND IsOfficial  =  ""T""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='afghanistan', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Afghanistan' AND T1.isofficial = 'T',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='afghanistan', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many official languages are spoken in Afghanistan?,"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Afghanistan"" AND IsOfficial  =  ""T""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='afghanistan', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Afghanistan' AND T2.isofficial = 'T',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1='afghanistan', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is name of the country that speaks the largest number of languages?,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Give the name of the nation that uses the greatest amount of languages.,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name ORDER BY COUNT(T2.language) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which continent has the most diverse languages?,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.continent FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.continent ORDER BY COUNT(T1.continent) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which continent speaks the most languages?,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.continent FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code GROUP BY T2.continent ORDER BY COUNT(T1.language) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the number of nations that use English and Dutch?,"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"")","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [('sql', {'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='dutch', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}, None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T1.language = 'English' AND T2.language = 'Dutch',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='dutch', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of nations speak both English and French?,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French""","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='french', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.language FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T1.language = 'English' AND T2.language = 'French',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='french', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Give the names of nations that speak both English and French.,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French""","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='french', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' INTERSECT SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'French',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='french', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What are the names of nations where both English and French are official languages?,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French"" AND T2.IsOfficial  =  ""T""","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='french', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' INTERSECT SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'French',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='french', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Give the names of countries with English and French as official languages.,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French"" AND T2.IsOfficial  =  ""T""","{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='french', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' INTERSECT SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'French',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='french', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What is the number of distinct continents where Chinese is spoken?,"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Chinese""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='chinese', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.continent) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Chinese',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='chinese', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many continents speak Chinese?,"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Chinese""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='chinese', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T2.continent) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'Chinese',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='chinese', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the regions that use English or Dutch?,"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" OR T2.Language  =  ""Dutch""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='dutch', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' OR T2.language = 'Dutch',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='dutch', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which regions speak Dutch or English?,"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" OR T2.Language  =  ""Dutch""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='dutch', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T2.region FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'Dutch' INTERSECT SELECT DISTINCT T2.region FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='dutch', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What are the countries where either English or Dutch is the official language ?,"select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  ""english"" and isofficial  =  ""t"" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  ""dutch"" and isofficial  =  ""t""","{'union': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='dutch', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' OR T2.language = 'Dutch',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='dutch', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which countries have either English or Dutch as an official language?,"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND IsOfficial  =  ""T"" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"" AND IsOfficial  =  ""T""","{'union': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='dutch', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' OR T1.language = 'Dutch',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='dutch', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which language is the most popular on the Asian continent?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T3.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode INNER JOIN countrylanguage AS T3 ON T3.countrycode = T1.code WHERE T1.continent = 'Asia' GROUP BY T3.language ORDER BY SUM(T3.percentage) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER'), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=25, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the language that is used by the largest number of Asian nations?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' GROUP BY T2.language ORDER BY COUNT(T2.countrycode) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=22, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which languages are spoken by only one country in republic governments?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  ""Republic"" GROUP BY T2.Language HAVING COUNT(*)  =  1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.language FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T1.percentage = 100 AND T1.language = T2.language GROUP BY T2.language HAVING COUNT(T2.countrycode) = 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), val1=100.0, val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=23, isDistinct=False), val2=None)], 'having': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=22, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': None, 'limit': None}"
What languages are only used by a single country with a republic government?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  ""Republic"" GROUP BY T2.Language HAVING COUNT(*)  =  1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T2.code = T1.countrycode WHERE T2.governmentform = 'Republic' GROUP BY T1.language HAVING COUNT(T1.countrycode) = 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=22, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': None, 'limit': None}"
Find the city with the largest population that uses English.,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  ""English"" ORDER BY T1.Population DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T3.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code INNER JOIN city AS T3 ON T2.code = T3.countrycode WHERE T1.language = 'English' AND T1.isofficial = 'T' ORDER BY T3.population DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the most populace city that speaks English?,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  ""English"" ORDER BY T1.Population DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.name FROM countrylanguage AS T1 INNER JOIN city AS T2 ON T1.countrycode = T2.countrycode WHERE T1.language = 'English' ORDER BY T2.population DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is average life expectancy in the countries where English is not the official language?,"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"")","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T2.lifeexpectancy) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.isofficial = 'F' AND T1.language = 'English',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='f', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Give the mean life expectancy of countries in which English is not the official language.,"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"")","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(T2.lifeexpectancy) / COUNT(T2.code) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language!= 'English',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='div', operand1=ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=14, isDistinct=False), operand2=None), operand2=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None))]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many people live in countries that do not speak English?,"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"")","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T2.population) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language!= 'English',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the official language spoken in the country whose head of state is Beatrix?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  ""Beatrix"" AND T2.IsOfficial  =  ""T""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='beatrix', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.headofstate = 'Beatrix',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='beatrix', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the official language used in the country the name of whose head of state is Beatrix.,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  ""Beatrix"" AND T2.IsOfficial  =  ""T""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='beatrix', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.headofstate = 'Beatrix',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1='beatrix', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the total number of unique official languages spoken in the countries that are founded before 1930?,"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  ""T""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=1930.0, val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.indepyear < 1930 AND T2.isofficial = 'T',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=1930.0, val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"For the countries founded before 1930, what is the total number of distinct official languages?","SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  ""T""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=True), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=1930.0, val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(T1.percentage) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.indepyear < 1930,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=1930.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the countries that have greater surface area than any country in Europe?,"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  ""Europe"")","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.surfacearea FROM country AS T1 INNER JOIN country AS T2 ON T1.continent = T2.continent WHERE T1.surfacearea < ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which countries have greater area than that of any country in Europe?,"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  ""Europe"")","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.surfacearea FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.continent = 'Europe' AND T1.surfacearea < T2.surfacearea,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None), 'and', CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=11, isDistinct=False), val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the African countries that have a  population less than any country in Asia?,"SELECT Name FROM country WHERE Continent  =  ""Africa""  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  ""Asia"")","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None), 'and', CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T1.population < ( SELECT MAX(T3.population) FROM country AS T3 INNER JOIN city AS T4 ON T3.code = T4.countrycode WHERE T3.continent = 'Asia' ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None), 'and', CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which African countries have a smaller population than that of any country in Asia?,"SELECT Name FROM country WHERE Continent  =  ""Africa""  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  ""Asia"")","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None), 'and', CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM country AS T1 INNER JOIN country AS T2 ON T1.continent = T2.continent WHERE T1.population < ( SELECT MAX(T3.population) FROM country AS T3 INNER JOIN countrylanguage AS T4 ON T3.code = T4.countrycode WHERE T4.language = 'English' ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which Asian countries have a population that is larger than any country in Africa?,"SELECT Name FROM country WHERE Continent  =  ""Asia""  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  ""Africa"")","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM country AS T1 INNER JOIN country AS T2 ON T1.continent = T2.continent WHERE T1.surfacearea > 3.59e+006,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1=3590000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the Asian countries which have a population larger than that of any country in Africa?,"SELECT Name FROM country WHERE Continent  =  ""Asia""  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  ""Africa"")","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM country AS T1 INNER JOIN country AS T2 ON T1.surfacearea > T2.surfacearea WHERE T1.continent = 'Asia' AND T2.continent = 'Africa',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=11, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='africa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the country codes for countries that do not speak English.,"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""","{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language!= 'English',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the country codes of countries where people use languages other than English?,"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != ""English""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language!= 'English',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the codes of the countries that do not speak English and whose government forms are not Republic?,"SELECT Code FROM country WHERE GovernmentForm != ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""","{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language!= 'English' AND T1.governmentform!= 'Republic',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), val1='republic', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which cities are in European countries where English is not the official language?,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None), 'and', CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code INNER JOIN countrylanguage AS T3 ON T2.code = T3.countrycode WHERE T2.continent = 'Europe' AND T3.language = 'English' AND T3.isofficial = 'N',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER'), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='n', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of cities in Europe for which English is not the official language?,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None), 'and', CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' AND T2.continent = 'Europe' EXCEPT SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.isofficial = 'TRUE' AND T2.continent = 'Europe',"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='english', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='true', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Which unique cities are in Asian countries where Chinese is the official language ?,"select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  ""asia""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='chinese', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code INNER JOIN city AS T3 ON T2.code = T3.countrycode WHERE T1.language = 'Chinese' AND T2.continent = 'Asia',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='chinese', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the name, independence year, and surface area of the country with the smallest population?","SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), 'asc')], 'limit': 1}","SELECT T2.name, T2.indepyear, T2.surfacearea FROM country AS T2 INNER JOIN countrylanguage AS T1 ON T1.countrycode = T2.code WHERE T2.population = ( SELECT MIN(surfacearea) FROM country WHERE population = ( SELECT MIN(surfacearea) FROM country ) )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Give the name, population, and head of state for the country that has the largest area.","SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.name, T1.population, T3.headofstate FROM country AS T3 INNER JOIN country AS T1 ON T1.code = T3.code WHERE T1.surfacearea = ( SELECT MAX(surfacearea) FROM country )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.,"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.name, COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name HAVING COUNT(T2.language) >= 3","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}"
Find the number of cities in each district whose population is greater than the average population of cities?,"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(T2.name) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.percentage > 50,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), val1=50.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None), val1=72.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=18, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT DISTINCT T1.governmentform, SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.lifeexpectancy > 72","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=18, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=72.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?,"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None), val1=72.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT AVG(T1.lifeexpectancy),  SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=14, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names and areas of countries with the top 5 largest area?,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), 'desc')], 'limit': 5}","SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), 'desc')], 'limit': 5}"
Return the names and surface areas of the 5 largest countries.,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), 'desc')], 'limit': 5}","SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), 'desc')], 'limit': 5}"
What are names of countries with the top 3 largest population?,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), 'desc')], 'limit': 3}",SELECT name FROM country ORDER BY population DESC LIMIT 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), 'desc')], 'limit': 3}"
Return the names of the 3 most populated countries.,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), 'desc')], 'limit': 3}",SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T2.population DESC LIMIT 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': 3}"
What are the names of the nations with the 3 lowest populations?,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), 'asc')], 'limit': 3}",SELECT name FROM country ORDER BY population LIMIT 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), 'asc')], 'limit': 3}"
Return the names of the 3 countries with the fewest people.,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), 'asc')], 'limit': 3}",SELECT T2.name FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code ORDER BY T1.population LIMIT 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), 'asc')], 'limit': 3}"
how many countries are in Asia?,"SELECT count(*) FROM country WHERE continent  =  ""Asia""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.code) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of countries in Asia.,"SELECT count(*) FROM country WHERE continent  =  ""Asia""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='asia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of the countries that are in the continent of Europe and have a population of 80000?,"SELECT Name FROM country WHERE continent  =  ""Europe"" AND Population  =  ""80000""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=80000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT name FROM country WHERE continent = 'Europe' AND population = 80000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=80000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Give the names of countries that are in Europe and have a population equal to 80000.,"SELECT Name FROM country WHERE continent  =  ""Europe"" AND Population  =  ""80000""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=80000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Europe' AND T2.population = 80000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='europe', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=80000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?,"select sum(population) ,  avg(surfacearea) from country where continent  =  ""north america"" and surfacearea  >  3000","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='north america', val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1=3000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT SUM(T1.population) / COUNT(T1.code), SUM(T1.surfacearea) / COUNT(T1.code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'North America' AND T1.surfacearea > 3000","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='div', operand1=ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None), operand2=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None)), ValUnit(unit_op='div', operand1=ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=11, isDistinct=False), operand2=None), operand2=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None))]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='north america', val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1=3000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .,"select sum(population) ,  avg(surfacearea) from country where continent  =  ""north america"" and surfacearea  >  3000","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='north america', val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1=3000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'North America' AND T1.surfacearea > 3000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=13, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='north america', val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1=3000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the cities whose population is between 160000 and 900000?,SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='between', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=160000.0, val2=900000.0)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT name FROM city WHERE population BETWEEN 160000 AND 900000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='between', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=160000.0, val2=900000.0)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the names of cities that have a population between 160000 and 900000 .,select name from city where population between 160000 and 900000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='between', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=160000.0, val2=900000.0)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.percentage BETWEEN 100 AND 100 AND T2.population BETWEEN 160000 AND 900000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='between', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), val1=100.0, val2=100.0), 'and', CondUnit(not_op=False, op_id='between', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1=160000.0, val2=900000.0)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which language is spoken by the largest number of countries?,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.language FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.language = T2.language WHERE T1.percentage = 100 GROUP BY T2.language ORDER BY COUNT(T2.countrycode) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=23, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), val1=100.0, val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=22, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Give the language that is spoken in the most countries.,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T2.language ORDER BY COUNT(T2.language) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=23, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=23, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the language spoken by the largest percentage of people in each country?,"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=22, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T2.code = T1.countrycode ORDER BY T1.percentage DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
"What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?","SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=22, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY T2.percentage DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Count the number of countries for which Spanish is the predominantly spoken language.,"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='spanish', val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=22, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(T1.countrycode) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'Spanish',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=22, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='spanish', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the codes of countries where Spanish is spoken by the largest percentage of people?,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='spanish', val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=22, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'Spanish' ORDER BY T1.percentage DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='spanish', val2=None)], 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Return the codes of countries for which Spanish is the predominantly spoken language.,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='spanish', val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=22, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Spanish' AND T2.isofficial = 'T',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1='spanish', val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), val1='t', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many conductors are there?,SELECT count(*) FROM conductor,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(conductor_id) FROM conductor,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of conductors.,SELECT count(*) FROM conductor,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(conductor_id) FROM conductor,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the names of conductors, ordered by age?",SELECT Name FROM conductor ORDER BY Age ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT T1.name FROM conductor AS T1 INNER JOIN conductor AS T2 ON T1.age = T2.age,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the names of conductors whose nationalities are not ""USA""?",SELECT Name FROM conductor WHERE Nationality != 'USA',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='usa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT name FROM conductor WHERE nationality!= 'USA',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='usa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Return the names of conductors that do not have the nationality ""USA"".",SELECT Name FROM conductor WHERE Nationality != 'USA',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='usa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM conductor AS T1 WHERE T1.nationality!= 'USA',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='usa', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the record companies of orchestras in descending order of years in which they were founded?,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T1.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id ORDER BY T1.year_of_founded DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
"Return the record companies of orchestras, sorted descending by the years in which they were founded.",SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T1.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id ORDER BY T1.year_of_founded DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
Return the average attendance across all shows.,SELECT avg(Attendance) FROM SHOW,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=22, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T2.attendance) FROM performance AS T1 INNER JOIN show AS T2 ON T2.performance_id = T1.performance_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=11, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=22, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the maximum and minimum share of performances whose type is not ""Live final"".","SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=17, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=17, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1='live final', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MAX(T1.share) FROM performance AS T1 INNER JOIN show AS T2 ON T1.performance_id = T2.performance_id WHERE T1.type = 'Live final',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=19, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=17, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1='live final', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Return the maximum and minimum shares for performances that do not have the type ""Live final"".","SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=17, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=17, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1='live final', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MAX(T1.share) FROM performance AS T1 INNER JOIN show AS T2 ON T1.performance_id = T2.performance_id WHERE T1.type <> 'Live final',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=19, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=17, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=13, isDistinct=False), operand2=None), val1='live final', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many different nationalities do conductors have?,SELECT count(DISTINCT Nationality) FROM conductor,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.nationality) FROM conductor AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of different nationalities of conductors.,SELECT count(DISTINCT Nationality) FROM conductor,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.nationality) FROM conductor AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List names of conductors in descending order of years of work.,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T1.name FROM conductor AS T1 INNER JOIN conductor AS T2 ON T1.year_of_work = T2.year_of_work ORDER BY T1.year_of_work DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
"What are the names of conductors, sorted descending by the number of years they have worked?",SELECT Name FROM conductor ORDER BY Year_of_Work DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': None}",SELECT T2.name FROM performance AS T1 INNER JOIN conductor AS T2 ON T1.orchestra_id = T2.conductor_id GROUP BY T2.name ORDER BY COUNT(T2.year_of_work) DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
List the name of the conductor with the most years of work.,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.name FROM conductor AS T1 INNER JOIN conductor AS T2 ON T1.year_of_work = T2.year_of_work ORDER BY T1.year_of_work DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the name of the conductor who has worked the greatest number of years?,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.name FROM conductor AS T1 INNER JOIN performance AS T2 ON T2.orchestra_id = T1.conductor_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the names of conductors and the orchestras they have conducted.,"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T2.conductor_id = T1.conductor_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of conductors as well as the corresonding orchestras that they have conducted?,"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the names of conductors that have conducted more than one orchestras.,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.conductor_id HAVING COUNT(T1.conductor_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names of conductors who have conducted at more than one orchestra?,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.conductor_id HAVING COUNT(T2.conductor_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': None, 'limit': None}"
Show the name of the conductor that has conducted the most number of orchestras.,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.name ORDER BY COUNT(T2.orchestra_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the name of the conductor who has conducted the most orchestras?,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Please show the name of the conductor that has conducted orchestras founded after 2008.,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2008.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded > 2008,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2008.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of conductors who have conducted orchestras founded after the year 2008?,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2008.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id WHERE T2.year_of_founded > 2008,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2008.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many orchestras does each record company manage?,"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(orchestra_id) FROM orchestra GROUP BY record_company,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': None, 'limit': None}"
Please show the record formats of orchestras in ascending order of count.,SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(major_record_format) ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=10, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
"What are the major record formats of orchestras, sorted by their frequency?",SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT T2.major_record_format FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T2.major_record_format ORDER BY COUNT(T2.major_record_format) DESC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=10, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=10, isDistinct=False), operand2=None), 'desc')], 'limit': None}"
What is the record company used by the greatest number of orchestras?,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=8, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
List the names of orchestras that have no performance.,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.orchestra FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.orchestra_id = T2.orchestra_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the orchestras that do not have any performances?,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.orchestra FROM orchestra AS T1 LEFT JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id WHERE T2.performance_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the record companies shared by orchestras founded before 2003 and after 2003.,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2003.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2003.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT DISTINCT T1.record_company FROM orchestra AS T1 INNER JOIN orchestra AS T2 ON T1.orchestra_id = T2.orchestra_id WHERE T1.year_of_founded < 2003 AND T2.year_of_founded > 2003,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2003.0, val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2003.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2003.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2003.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT DISTINCT T1.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id WHERE T1.year_of_founded < 2003 INTERSECT SELECT DISTINCT T1.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id WHERE T1.year_of_founded > 2003,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2003.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=2003.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
"Find the number of orchestras whose record format is ""CD"" or ""DVD"".","SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  ""CD"" OR Major_Record_Format  =  ""DVD""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='cd', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='dvd', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(orchestra_id) FROM orchestra WHERE major_record_format = 'CD' INTERSECT SELECT COUNT(orchestra_id) FROM orchestra WHERE major_record_format = 'DVD',"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='cd', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='dvd', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Count the number of orchestras that have CD or DVD as their record format.,"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  ""CD"" OR Major_Record_Format  =  ""DVD""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='cd', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='dvd', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(orchestra_id) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='cd', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), val1='dvd', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the years in which orchestras that have given more than one performance are founded.,SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=12, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.year_of_founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T1.year_of_founded HAVING COUNT(T2.performance_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=11, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}"
What are years of founding for orchestras that have had more than a single performance?,SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=12, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.year_of_founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T1.year_of_founded HAVING COUNT(T2.performance_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=12, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=11, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}"
How many high schoolers are there?,SELECT count(*) FROM Highschooler,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(*) FROM highschooler,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of high schoolers.,SELECT count(*) FROM Highschooler,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.id) FROM highschooler AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the names and grades of each high schooler.,"SELECT name ,  grade FROM Highschooler","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.name, T1.grade FROM highschooler AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names and grades for each high schooler?,"SELECT name ,  grade FROM Highschooler","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.name, T1.grade FROM highschooler AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show all the grades of the high schoolers.,SELECT grade FROM Highschooler,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.grade FROM highschooler AS T1 INNER JOIN highschooler AS T2 ON T1.id = T2.id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the grade of each high schooler?,SELECT grade FROM Highschooler,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT grade FROM highschooler,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What grade is Kyle in?,"SELECT grade FROM Highschooler WHERE name  =  ""Kyle""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.grade FROM highschooler AS T1 INNER JOIN highschooler AS T2 ON T1.name = 'Kyle',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the grade for the high schooler named Kyle.,"SELECT grade FROM Highschooler WHERE name  =  ""Kyle""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.grade FROM highschooler AS T1 INNER JOIN highschooler AS T2 ON T1.id = T2.id WHERE T1.name = 'Kyle',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the names of all high schoolers in grade 10.,SELECT name FROM Highschooler WHERE grade  =  10,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=10.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade = 10,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=10.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of all high schoolers in grade 10?,SELECT name FROM Highschooler WHERE grade  =  10,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=10.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT name FROM highschooler WHERE grade = 10,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=10.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the ID of the high schooler named Kyle.,"SELECT ID FROM Highschooler WHERE name  =  ""Kyle""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is Kyle's id?,"SELECT ID FROM Highschooler WHERE name  =  ""Kyle""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many high schoolers are there in grade 9 or 10?,SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=9.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=10.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(*) FROM highschooler WHERE grade = 9 OR grade = 10,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=9.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=10.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of high schoolers in grades 9 or 10.,SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=9.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=10.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade BETWEEN 9 AND 10,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='between', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=9.0, val2=10.0)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the number of high schoolers for each grade.,"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T2.grade, COUNT(T1.id) FROM highschooler AS T1 INNER JOIN highschooler AS T2 ON T1.grade = T2.grade GROUP BY T2.grade","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}"
How many high schoolers are in each grade?,"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT grade FROM highschooler GROUP BY grade,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}"
Which grade has the most high schoolers?,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(grade) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Return the grade that has the greatest number of high schoolers.,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(grade) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=2, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Show me all grades that have at least 4 students.,SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=4.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(name) >= 4,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=1, isDistinct=False), operand2=None), val1=4.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}"
Which grades have 4 or more high schoolers?,SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=4.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT DISTINCT T1.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.grade HAVING COUNT(T1.id) >= 4,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=0, isDistinct=False), operand2=None), val1=4.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=2, isDistinct=False)], 'order_by': None, 'limit': None}"
Show the student IDs and numbers of friends corresponding to each.,"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT student_id, COUNT(friend_id) FROM friend GROUP BY student_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}"
How many friends does each student have?,"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.name, COUNT(T2.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
Show the names of high school students and their corresponding number of friends.,"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.name, COUNT(T2.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names of the high schoolers and how many friends does each have?,"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the name of the high schooler who has the greatest number of friends?,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY COUNT(T2.student_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Return the name of the high school student with the most friends.,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY COUNT(T2.student_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Show the names of high schoolers who have at least 3 friends.,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) >= 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names of high schoolers who have 3 or more friends?,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING COUNT(T2.friend_id) >= 3,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None), val1=3.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=0, isDistinct=False)], 'order_by': None, 'limit': None}"
Show the names of all of the high schooler Kyle's friends.,"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the names of friends of the high school student Kyle.,"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER'), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.name FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T1.friend_id = 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show ids of all students who do not have any friends.,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT id FROM highschooler EXCEPT SELECT T2.id FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.friend_id = T2.id,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What are the ids of high school students who do not have friends?,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.id FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show names of all high school students who do not have any friends.,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.name FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T1.friend_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of students who have no friends?,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.friend_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the ids of high schoolers who have friends and are also liked by someone else.,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.friend_id IN ( SELECT T3.id FROM highschooler AS T3 INNER JOIN likes AS T4 ON T3.id = T4.liked_id GROUP BY T4.liked_id HAVING COUNT(T4.liked_id) > 1 ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=6, isDistinct=False)], 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the ids of students who both have friends and are liked?,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.student_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show name of all students who have some friends and also are liked by someone else.,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INTERSECT SELECT T1.name FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.liked_id,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=6, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
What are the names of high schoolers who both have friends and are liked?,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.student_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many likes correspond to each student id?,"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.student_id, COUNT(T1.liked_id) FROM likes AS T1 GROUP BY T1.student_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}"
"Show the names of high schoolers who have likes, and numbers of likes for each.","SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.name FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
"What are the names of high schoolers who have likes, and how many likes does each have?","SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.name, COUNT(T2.student_id) FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the name of the high schooler who has the greatest number of likes?,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(student_id) DESC LIMIT 1 ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': 1}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Give the name of the student with the most likes.,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Show the names of students who have at least 2 likes.,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.name FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) >= 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names of students who have 2 or more likes?,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=5, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT name FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) >= 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
Show the names of students who have a grade higher than 5 and have at least 2 friends.,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=5.0, val2=None)], 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 GROUP BY T1.name HAVING COUNT(T2.student_id) >= 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=5.0, val2=None)], 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=5.0, val2=None)], 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 GROUP BY T1.name HAVING COUNT(T2.student_id) = 2,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=5.0, val2=None)], 'having': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=3, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
How many likes does Kyle have?,"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.liked_id) FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Return the number of likes that the high schooler named Kyle has.,"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(liked_id) FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.liked_id = T2.id WHERE T2.name = 'Kyle',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=6, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='kyle', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the average grade of all students who have some friends.,SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the average grade of students who have friends?,SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=2, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the lowest grade of students who do not have any friends?,SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='min', col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=3, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which states have both owners and professionals living there?,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT DISTINCT T1.state FROM owners AS T1 INTERSECT SELECT DISTINCT T1.state FROM professionals AS T1,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Find the states where both owners and professionals live.,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT DISTINCT T1.state FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.state = T2.state,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=37, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the average age of the dogs who have gone through any treatments?,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T1.age) FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the average age of the dogs who went through treatments.,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=25, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT AVG(T2.age) FROM treatments AS T1 INNER JOIN dogs AS T2 ON T2.dog_id = T1.dog_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.","SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","{'union': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=39, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1='indiana', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=39, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=32, isDistinct=False)], 'order_by': None, 'limit': None}}","SELECT T1.professional_id, T1.last_name, T1.cell_number FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.state = 'Indiana'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=39, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1='indiana', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.","SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","{'union': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=39, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1='indiana', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=39, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=32, isDistinct=False)], 'order_by': None, 'limit': None}}","SELECT T2.professional_id, T2.last_name, T2.cell_number FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.owner_id = T2.professional_id WHERE T1.state = 'IN'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=32, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=39, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='in', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .,select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=48, isDistinct=False), operand2=None), val1=1000.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=44, isDistinct=False)], 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment <= 1000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), val1=1000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?,select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=48, isDistinct=False), operand2=None), val1=1000.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=44, isDistinct=False)], 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment <= 1000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), val1=1000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Which professional did not operate any treatment on dogs? List the professional's id, role and email.","SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}","SELECT T1.professional_id, T1.role_code, T1.email_address FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Which owner owns the most dogs? List the owner id, first name and last name.","SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=4, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=20, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.owner_id, T1.first_name, T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.owner_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=20, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
"Return the owner id, first name and last name of the owner who has the most dogs.","SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=4, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=20, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.owner_id, T1.first_name, T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T1.first_name, T1.last_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False), ColUnit(agg_id=None, col_id=10, isDistinct=False), ColUnit(agg_id=None, col_id=11, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
"Which professionals have done at least two treatments? List the professional's id, role, and first name.","SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=32, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.professional_id, T1.role_code, T1.first_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(T1.professional_id) > 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=32, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=32, isDistinct=False)], 'order_by': None, 'limit': None}"
"What are the id, role, and first name of the professionals who have performed two or more treatments?","SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=32, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.professional_id, T1.role_code, T1.first_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.role_code, T1.first_name HAVING COUNT(T2.treatment_id) >= 2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=43, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=32, isDistinct=False), ColUnit(agg_id=None, col_id=33, isDistinct=False), ColUnit(agg_id=None, col_id=34, isDistinct=False)], 'order_by': None, 'limit': None}"
What is the name of the breed with the most dogs?,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.breed_name FROM dogs AS T1 INNER JOIN breeds AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_name ORDER BY COUNT(T1.dog_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which breed do the most dogs have? Give me the breed name.,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T1.breed_name FROM breeds AS T1 INNER JOIN dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(T1.breed_name) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER'), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T2.owner_id, T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T2.owner_id ORDER BY COUNT(T3.treatment_id) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER'), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=20, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=43, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER'), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.owner_id, T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER'), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=48, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the description of the treatment type that costs the least money in total?,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=48, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T1.treatment_type_description FROM treatment_types AS T1 INNER JOIN treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=46, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=48, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
Give me the description of the treatment type whose total cost is the lowest.,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=7, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=48, isDistinct=False), operand2=None), 'asc')], 'limit': 1}",SELECT T1.treatment_type_description FROM treatment_types AS T1 INNER JOIN treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=46, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=48, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER'), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=48, isDistinct=False), operand2=None), 'desc')], 'limit': 1}","SELECT T1.owner_id, T1.zip_code FROM owners AS T1 INNER JOIN charges AS T2 ON T1.owner_id = T2.charge_id WHERE T2.charge_type = 'Adoption Fee' GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T2.charge_amount) DESC LIMIT 1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=15, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='adoption fee', val2=None)], 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False), ColUnit(agg_id=None, col_id=15, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which professionals have done at least two types of treatments? List the professional id and cell phone.,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=32, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.professional_id, T1.cell_number FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.cell_number HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=46, isDistinct=True), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=32, isDistinct=False), ColUnit(agg_id=None, col_id=42, isDistinct=False)], 'order_by': None, 'limit': None}"
Find the id and cell phone of the professionals who operate two or more types of treatments.,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=32, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.professional_id, T1.cell_number FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.cell_number HAVING COUNT(T2.treatment_type_code) >= 2","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gte', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=46, isDistinct=False), operand2=None), val1=2.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=32, isDistinct=False), ColUnit(agg_id=None, col_id=42, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the first name and last name of the professionals who have done treatment with cost below average?,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=39, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=48, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.first_name, T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T3.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER'), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=48, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=39, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=48, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.first_name, T1.last_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=39, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='avg', col_id=48, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"List the date of each treatment, together with the first name of the professional who operated it.","SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=32, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=47, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.date_of_treatment, T2.first_name FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=32, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=47, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the cost of each treatment and the corresponding treatment type description.,"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=46, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.cost_of_treatment, T2.treatment_type_description FROM treatments AS T1 INNER JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=46, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the cost and treatment type description of each treatment?,"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=46, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.cost_of_treatment, T2.treatment_type_description FROM treatments AS T1 INNER JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=46, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are each owner's first name, last name, and the size of their dog?","SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.first_name, T1.last_name, T3.size_description FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN sizes AS T3 ON T2.size_code = T3.size_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List pairs of the owner's first name and the dogs's name.,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.first_name, T2.name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the names of the dogs of the rarest breed and the treatment dates of them.,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=47, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=22, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'asc')], 'limit': 1}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM dogs AS T1 INNER JOIN breeds AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.breed_name DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Which dogs are of the rarest breed? Show their names and treatment dates.,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=47, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=22, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'asc')], 'limit': 1}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM dogs AS T1 INNER JOIN breeds AS T2 ON T1.breed_code = T2.breed_code WHERE T2.breed_name = 'Rare Breed',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), val1='rare breed', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='virginia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.first_name, T2.name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='va', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the first names of owners living in Virginia and the names of dogs they own.,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='virginia', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.first_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='va', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the arriving date and the departing date of the dogs who have gone through a treatment?,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=29, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.date_arrived, T1.date_departed FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=29, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the last name of the owner owning the youngest dog.,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), 'asc')], 'limit': 1}"
Who owns the youngest dog? Give me his or her last name.,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.date_of_birth DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=26, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?,SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1='hawaii', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None), val1='wisconsin', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.email_address FROM professionals AS T1 INNER JOIN owners AS T2 ON T1.professional_id = T2.owner_id WHERE T2.state = 'HI' OR T2.state = 'WI',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=4, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='hi', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='wi', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the arriving date and the departing date of all the dogs?,"SELECT date_arrived ,  date_departed FROM Dogs","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=29, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.date_arrived FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=29, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the arrival date and the departure date for all the dogs.,"SELECT date_arrived ,  date_departed FROM Dogs","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=29, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.date_arrived FROM dogs AS T1 LEFT JOIN dogs AS T2 ON T1.dog_id = T2.dog_id WHERE T2.date_departed IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=19, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=29, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=31, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many dogs went through any treatments?,SELECT count(DISTINCT dog_id) FROM Treatments,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=44, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.dog_id) FROM treatments AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=44, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Count the number of dogs that went through a treatment.,SELECT count(DISTINCT dog_id) FROM Treatments,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=44, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T2.dog_id) FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=44, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many professionals have performed any treatment to dogs?,SELECT count(DISTINCT professional_id) FROM Treatments,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=45, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.professional_id) FROM treatments AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=45, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the number of professionals who have ever treated dogs.,SELECT count(DISTINCT professional_id) FROM Treatments,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=45, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(DISTINCT T1.professional_id) FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=32, isDistinct=True), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.","SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='like', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), val1='%west%', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.role_code, T2.street, T2.city, T2.state FROM professionals AS T1 INNER JOIN professionals AS T2 ON T1.zip_code = T2.zip_code WHERE T1.city LIKE '%West%'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=38, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=38, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=33, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=35, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=37, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='like', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=36, isDistinct=False), operand2=None), val1='%west%', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.","SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='like', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='%north%', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.first_name, T1.last_name, T1.email_address FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state LIKE '%North%'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=20, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=10, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=11, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=16, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='like', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1='%north%', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How much does the most recent treatment cost?,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=47, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT MAX(T1.cost_of_treatment) FROM treatments AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=48, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show me the cost of the most recently performed treatment.,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=48, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=47, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT MAX(cost_of_treatment) FROM treatments,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=48, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many dogs have not gone through any treatment?,SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(dog_id) FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Tell me the number of dogs that have not received any treatment .,select count(*) from dogs where dog_id not in ( select dog_id from treatments ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.dog_id) FROM dogs AS T1 LEFT JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.dog_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=19, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=44, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=19, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=44, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many owners temporarily do not have any dogs?,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(owner_id) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the number of owners who do not own any dogs at this moment.,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(owner_id) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=4, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=9, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=20, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many professionals did not operate any treatment on dogs?,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(professional_id) FROM professionals EXCEPT SELECT T2.professional_id FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id,"{'except': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=32, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None), TableUnit(table_type='table_unit', table=6, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=32, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}"
Find the number of professionals who have not treated any dogs.,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=7, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(T1.professional_id) FROM professionals AS T1 LEFT JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=32, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=45, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.","SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=21, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T2.name, T2.age, T2.weight FROM breeds AS T1 INNER JOIN dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.abandoned_yn = '1'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=21, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.","SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=21, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.name, T1.age, T1.weight FROM dogs AS T1 INNER JOIN sizes AS T2 ON T1.size_code = T2.size_code WHERE T1.abandoned_yn = '1'","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=24, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=28, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=21, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the age of the oldest dog?,SELECT max(age) FROM Dogs,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.age FROM breeds AS T1 INNER JOIN dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.age DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=25, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Tell me the age of the oldest dog.,SELECT max(age) FROM Dogs,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT MAX(T1.age) FROM dogs AS T1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=25, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How much does each charge type costs? List both charge type and amount.,"SELECT charge_type ,  charge_amount FROM Charges","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.charge_type, T1.charge_amount FROM charges AS T1 GROUP BY T1.charge_type","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=3, isDistinct=False)], 'order_by': None, 'limit': None}"
List each charge type and its amount.,"SELECT charge_type ,  charge_amount FROM Charges","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.charge_type, T1.charge_amount FROM charges AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"List the email, cell phone and home phone of all the professionals.","SELECT email_address ,  cell_number ,  home_phone FROM professionals","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=41, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT email_address, cell_number, home_phone FROM professionals","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=41, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"What are the email, cell phone and home phone of each professional?","SELECT email_address ,  cell_number ,  home_phone FROM professionals","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=42, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=41, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT email_address FROM professionals,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=40, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are all the possible breed type and size type combinations?,"SELECT DISTINCT breed_code ,  size_code FROM dogs","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT DISTINCT T1.breed_name, T2.size_description FROM breeds AS T1 INNER JOIN sizes AS T2 ON T1.breed_code = T2.size_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Find the distinct breed type and size type combinations for dogs.,"SELECT DISTINCT breed_code ,  size_code FROM dogs","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=5, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=22, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT DISTINCT T1.breed_name, T3.size_description FROM breeds AS T1 INNER JOIN dogs AS T2 ON T1.breed_code = T2.breed_code INNER JOIN sizes AS T3 ON T2.size_code = T3.size_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=5, join_type='INNER'), TableUnit(table_type='table_unit', table=2, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=22, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=23, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=5, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the first name of all the professionals along with the description of the treatment they have done.,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER'), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=46, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.first_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id INNER JOIN treatment_types AS T3 ON T3.treatment_type_code = T2.treatment_type_code,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER'), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=46, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are each professional's first name and description of the treatment they have performed?,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=7, join_type='INNER'), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=45, isDistinct=False), val2=None), 'and', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=46, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.first_name, T2.treatment_type_description FROM professionals AS T1 INNER JOIN treatment_types AS T2 ON T1.professional_id = T2.treatment_type_code","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=6, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=32, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=34, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many singers are there?,SELECT count(*) FROM singer,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(*) FROM singer,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the count of singers?,SELECT count(*) FROM singer,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(name) FROM singer,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
List the name of singers in ascending order of net worth.,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT T1.name FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of singers ordered by ascending net worth?,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'asc')], 'limit': None}",SELECT name FROM singer ORDER BY net_worth_millions,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'asc')], 'limit': None}"
What are the birth year and citizenship of singers?,"SELECT Birth_Year ,  Citizenship FROM singer","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT DISTINCT T1.birth_year, T1.citizenship FROM singer AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the birth years and citizenships of the singers?,"SELECT Birth_Year ,  Citizenship FROM singer","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.birth_year, T1.citizenship FROM singer AS T1","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
"List the name of singers whose citizenship is not ""France"".","SELECT Name FROM singer WHERE Citizenship != ""France""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='france', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT name FROM singer WHERE citizenship!= 'France',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='neq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1='france', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the name of singers whose birth year is either 1948 or 1949?,SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1948.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1949.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T1.birth_year = 1948 OR T1.birth_year = 1949,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1948.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1949.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of the singers whose birth years are either 1948 or 1949?,SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1948.0, val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1949.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T1.birth_year = 1948,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1948.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the name of the singer with the largest net worth?,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id ORDER BY T2.net_worth_millions DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the name of the singer who is worth the most?,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id ORDER BY T2.net_worth_millions DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Show different citizenship of singers and the number of singers of each citizenship.,"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT DISTINCT T2.citizenship, COUNT(T2.citizenship) FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.citizenship","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}"
"For each citizenship, how many singers are from that country?","SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT COUNT(T1.citizenship) FROM singer AS T1 GROUP BY T1.citizenship,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}"
Please show the most common citizenship of singers.,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.citizenship FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.citizenship ORDER BY COUNT(T1.singer_id) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=7, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
What is the most common singer citizenship ?,select citizenship from singer group by citizenship order by count(*) desc limit 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), 'desc')], 'limit': 1}",SELECT T2.citizenship FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.citizenship ORDER BY COUNT(T2.citizenship) DESC LIMIT 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': [(ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None), 'desc')], 'limit': 1}"
Show different citizenships and the maximum net worth of singers of each citizenship.,"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.citizenship, MAX(T2.net_worth_millions) FROM singer AS T1 INNER JOIN singer AS T2 ON T1.citizenship = T2.citizenship GROUP BY T1.citizenship","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='max', col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=4, isDistinct=False)], 'order_by': None, 'limit': None}"
Show titles of songs and names of singers.,"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}","SELECT T1.title, T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the song titles and singer names?,"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.title FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show distinct names of singers that have songs with sales more than 300000.,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=300000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id WHERE T1.sales > 300000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=300000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
what are the different names of the singers that have sales more than 300000?,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=300000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id WHERE T1.sales > 300000,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=8, isDistinct=False), operand2=None), val1=300000.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the names of singers that have more than one song.,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.name HAVING COUNT(T2.name) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
What are the names of the singers that have more than one songs?,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.name HAVING COUNT(T1.song_id) > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': None, 'having': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=5, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
Show the names of singers and the total sales of their songs.,"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T1.name, SUM(T2.sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
"For each singer name, what is the total sales for their songs?","SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}","SELECT T2.name, SUM(T1.sales) FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.name","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None), ValUnit(unit_op='none', operand1=ColUnit(agg_id='sum', col_id=8, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=1, isDistinct=False)], 'order_by': None, 'limit': None}"
List the name of singers that do not have any song.,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T1.name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.song_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=7, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the sname of every sing that does not have any song?,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=True, op_id='in', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=0, isDistinct=False), operand2=None), val1={'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT DISTINCT T2.name FROM song AS T1 LEFT JOIN singer AS T2 ON T1.singer_id = T2.singer_id WHERE T1.song_id IS NULL,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=7, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (True, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='is', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1='null', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the citizenship shared by singers with birth year before 1945 and after 1955.,SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1945.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1955.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.citizenship FROM singer AS T1 INNER JOIN singer AS T2 ON T1.citizenship = T2.citizenship WHERE T1.birth_year < 1945 AND T1.birth_year > 1955,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1945.0, val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1955.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?,SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,"{'intersect': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1945.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1955.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T1.citizenship FROM singer AS T1 INNER JOIN singer AS T2 ON T1.citizenship = T2.citizenship WHERE T1.birth_year < 1945 AND T1.birth_year > 1955,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=0, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=4, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=4, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='lt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1945.0, val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=1955.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
How many available features are there in total?,SELECT count(*) FROM Other_Available_Features,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=-1, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT COUNT(feature_id) FROM other_available_features,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id='count', col_id=4, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What is the feature type name of feature AirCon?,"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  ""AirCon""","{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1='aircon', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}",SELECT T2.feature_type_name FROM other_available_features AS T1 INNER JOIN ref_feature_types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon',"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=2, join_type=None), TableUnit(table_type='table_unit', table=0, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=5, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=0, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=1, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=6, isDistinct=False), operand2=None), val1='aircon', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
Show the property type descriptions of properties belonging to that code.,SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None), TableUnit(table_type='table_unit', table=1, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=2, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': [ColUnit(agg_id=None, col_id=9, isDistinct=False)], 'order_by': None, 'limit': None}",SELECT T1.property_type_description FROM ref_property_types AS T1 INNER JOIN properties AS T2 ON T1.property_type_code = T2.property_type_code,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None)]), 'where': None, 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
What are the names of properties that are either houses or apartments with more than 1 room?,"SELECT property_name FROM Properties WHERE property_type_code  =  ""House"" UNION SELECT property_name FROM Properties WHERE property_type_code  =  ""Apartment"" AND room_count  >  1","{'union': True, 'left_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='house', val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}, 'right_query': {'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=3, join_type=None)], 'conds': []}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=9, isDistinct=False), operand2=None), val1='apartment', val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}}",SELECT T2.property_name FROM ref_property_types AS T1 INNER JOIN properties AS T2 ON T1.property_type_code = T2.property_type_code WHERE T1.property_type_description = 'House' OR T1.property_type_description = 'Apartment' AND T2.room_count > 1,"{'intersect': False, 'union': False, 'except': False, 'from': {'table_units': [TableUnit(table_type='table_unit', table=1, join_type=None), TableUnit(table_type='table_unit', table=3, join_type='INNER')], 'conds': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=2, isDistinct=False), operand2=None), val1=ColUnit(agg_id=None, col_id=9, isDistinct=False), val2=None)]}, 'select': (False, [ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=12, isDistinct=False), operand2=None)]), 'where': [CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='house', val2=None), 'or', CondUnit(not_op=False, op_id='eq', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=3, isDistinct=False), operand2=None), val1='apartment', val2=None), 'and', CondUnit(not_op=False, op_id='gt', operand=ValUnit(unit_op='none', operand1=ColUnit(agg_id=None, col_id=14, isDistinct=False), operand2=None), val1=1.0, val2=None)], 'having': None, 'group_by': None, 'order_by': None, 'limit': None}"
