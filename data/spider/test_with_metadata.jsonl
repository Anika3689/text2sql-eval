{"db_id": "concert_singer", "question": "How many singers do we have?", "gold": "SELECT count(*) FROM singer", "pred": "SELECT COUNT(singer_id) FROM singer", "tokens": ["select", "count", "(", "*", ")", "from", "singer"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What is the total number of singers?", "gold": "SELECT count(*) FROM singer", "pred": "SELECT COUNT(singer_id) FROM singer", "tokens": ["select", "count", "(", "*", ")", "from", "singer"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "pred": "SELECT T2.name, T2.country, T2.age FROM singer AS T1 INNER JOIN concert AS T2 ON T1.singer_id = T2.singer_id ORDER BY T2.age DESC", "tokens": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are the names, countries, and ages for every singer in descending order of age?", "gold": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "pred": "SELECT T2.name, T2.country, T2.age FROM singer AS T1 INNER JOIN concert AS T2 ON T1.singer_id = T2.singer_id ORDER BY T2.age DESC", "tokens": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What is the average, minimum, and maximum age of all singers from France?", "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "pred": "SELECT AVG(age) FROM singer WHERE country = 'France'", "tokens": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "\"France\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 3, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What is the average, minimum, and maximum age for all French singers?", "gold": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "pred": "SELECT AVG(age) FROM singer WHERE country = 'France'", "tokens": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "\"France\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 3, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "Show the name and the release year of the song by the youngest singer.", "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "pred": "SELECT T1.name, T1.song_release_year FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id INNER JOIN concert AS T3 ON T2.concert_id = T3.concert_id WHERE T1.age = ( SELECT MIN(T1.age) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id INNER JOIN concert AS T3 ON T", "tokens": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are the names and release years for all the songs of the youngest singer?", "gold": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "pred": "SELECT T2.song_name, T2.song_release_year FROM singer AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age = ( SELECT MIN(T1.age) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > 0 )", "tokens": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are all distinct countries where singers above age 20 are from?", "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20", "pred": "SELECT DISTINCT T2.country FROM singer AS T1 INNER JOIN concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > 20", "tokens": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "20"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are  the different countries with singers above age 20?", "gold": "SELECT DISTINCT country FROM singer WHERE age  >  20", "pred": "SELECT DISTINCT T1.country FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > 20", "tokens": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "20"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "Show all countries and the number of singers in each country.", "gold": "SELECT country ,  count(*) FROM singer GROUP BY country", "pred": "SELECT T2.country, COUNT(T2.country) FROM singer AS T1 INNER JOIN singer AS T2 ON T1.country = T2.country GROUP BY T2.country", "tokens": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "How many singers are from each country?", "gold": "SELECT country ,  count(*) FROM singer GROUP BY country", "pred": "SELECT COUNT(singer_id) FROM singer GROUP BY country", "tokens": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "List all song names by singers above the average age.", "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "pred": "SELECT T2.song_name FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > ( SELECT AVG(age) FROM singer )", "tokens": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are all the song names by singers who are older than average?", "gold": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "pred": "SELECT T1.song_name FROM singer AS T1 INNER JOIN concert_singer AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > ( SELECT AVG(T1.age) FROM singer AS T1 INNER JOIN concert_singer AS T2 ON T1.singer_id = T2.singer_id )", "tokens": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "pred": "SELECT T1.location, T1.name FROM stadium AS T1 INNER JOIN `concert` AS T2 ON T2.stadium_id = T1.stadium_id WHERE T1.capacity BETWEEN 5000 AND 10000", "tokens": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "5000", "and", "10000"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "gold": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "pred": "SELECT T1.location, T1.name FROM stadium AS T1 INNER JOIN `stadium` AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.capacity BETWEEN 5000 AND 10000", "tokens": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "5000", "and", "10000"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What is the maximum capacity and the average of all stadiums ?", "gold": "select max(capacity), average from stadium", "pred": "SELECT MAX(capacity) FROM stadium", "tokens": ["select", "max", "(", "capacity", ")", ",", "average", "from", "stadium"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What is the average and maximum capacities for all stadiums ?", "gold": "select avg(capacity) ,  max(capacity) from stadium", "pred": "SELECT AVG(capacity) FROM stadium", "tokens": ["select", "avg", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "from", "stadium"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What is the name and capacity for the stadium with highest average attendance?", "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "pred": "SELECT T1.name, T1.capacity FROM stadium AS T1 INNER JOIN ( SELECT T1.stadium_id, MAX(T1.average) AS Max FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id ) AS T2 ON T1.stadium_id = T2.stadium_id", "tokens": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What is the name and capacity for the stadium with the highest average attendance?", "gold": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "pred": "SELECT T2.name, T2.capacity FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id ORDER BY T2.average DESC LIMIT 1", "tokens": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "How many concerts are there in year 2014 or 2015?", "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "pred": "SELECT COUNT(concert_id) FROM concert WHERE year = 2014 INTERSECT SELECT COUNT(concert_id) FROM concert WHERE year = 2015", "tokens": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "2014", "or", "year", "=", "2015"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "How many concerts occurred in 2014 or 2015?", "gold": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "pred": "SELECT SUM(CASE WHEN year = '2014' THEN 1 ELSE 0 END) FROM concert", "tokens": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "2014", "or", "year", "=", "2015"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "Show the stadium name and the number of concerts in each stadium.", "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "pred": "SELECT T1.name, COUNT(T2.concert_id) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.name", "tokens": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "group", "by", "t1.stadium_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "For each stadium, how many concerts play there?", "gold": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "pred": "SELECT COUNT(T3.concert_id) FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id INNER JOIN singer_in_concert AS T3 ON T2.concert_id = T3.concert_id", "tokens": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "group", "by", "t1.stadium_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "gold": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.name, T2.capacity FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year > '2014' GROUP BY T2.name, T2.capacity ORDER BY COUNT(T2.name) DESC LIMIT 1", "tokens": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">=", "2014", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 32, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 5, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "gold": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "pred": "SELECT T2.name, T2.capacity FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year > '2013' GROUP BY T1.year ORDER BY COUNT(T1.concert_id) DESC LIMIT 1", "tokens": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">", "2013", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 32, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 5, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "Which year has most number of concerts?", "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT year FROM concert GROUP BY year ORDER BY COUNT(concert_id) DESC LIMIT 1", "tokens": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "What is the year that had the most concerts?", "gold": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT COUNT(concert_id) FROM concert", "tokens": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "Show the stadium names without any concert.", "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "pred": "SELECT T2.name FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.concert_id IS NULL", "tokens": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are the names of the stadiums without any concerts?", "gold": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "pred": "SELECT T3.name FROM singer_in_concert AS T1 INNER JOIN concert AS T2 ON T1.concert_id = T2.concert_id INNER JOIN stadium AS T3 ON T2.stadium_id = T3.stadium_id", "tokens": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "Show countries where a singer above age 40 and a singer below 30 are from.", "gold": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "pred": "SELECT T2.country FROM singer AS T1 INNER JOIN singer AS T2 ON T1.country = T2.country WHERE T1.age > 40 INTERSECT SELECT T2.country FROM singer AS T1 INNER JOIN singer AS T2 ON T1.country = T2.country WHERE T1.age < 30", "tokens": ["select", "country", "from", "singer", "where", "age", ">", "40", "intersect", "select", "country", "from", "singer", "where", "age", "<", "30"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "pred": "SELECT T2.name FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year!= 2014", "tokens": ["select", "name", "from", "stadium", "except", "select", "t2.name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 23, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are the names of all stadiums that did not have a concert in 2014?", "gold": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "pred": "SELECT T1.name FROM stadium AS T1 INNER JOIN concert AS T2 ON T2.stadium_id = T1.stadium_id WHERE T2.year!= 2014", "tokens": ["select", "name", "from", "stadium", "except", "select", "t2.name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 23, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "Show the name and theme for all concerts and the number of singers in each concert.", "gold": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "pred": "SELECT T1.name, T1.theme, COUNT(T2.singer_id) FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T1.name, T1.theme", "tokens": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "What are the names , themes , and number of singers for every concert ?", "gold": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "pred": "SELECT T2.concert_name, T2.theme, COUNT(T1.singer_id) FROM singer_in_concert AS T1 INNER JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_name, T2.theme", "tokens": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "List singer names and number of concerts for each singer.", "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "pred": "SELECT T2.name, COUNT(T1.concert_id) FROM singer_in_concert AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.name", "tokens": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t2.singer_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "What are the names of the singers and number of concerts for each person?", "gold": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "pred": "SELECT T1.name, COUNT(T2.concert_id) FROM singer AS T1 INNER JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.name", "tokens": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t2.singer_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "concert_singer", "question": "List all singer names in concerts in year 2014.", "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "pred": "SELECT T3.name FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id INNER JOIN singer AS T3 ON T2.singer_id = T3.singer_id WHERE T1.year = '2014'", "tokens": ["select", "t2.name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "join", "concert", "as", "t3", "on", "t1.concert_id", "=", "t3.concert_id", "where", "t3.year", "=", "2014"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are the names of the singers who performed in a concert in 2014?", "gold": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "pred": "SELECT T2.name FROM concert AS T1 INNER JOIN singer_in_concert AS T2 ON T1.concert_id = T2.concert_id INNER JOIN singer AS T3 ON T2.singer_id = T3.singer_id WHERE T1.year = '2014'", "tokens": ["select", "t2.name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "join", "concert", "as", "t3", "on", "t1.concert_id", "=", "t3.concert_id", "where", "t3.year", "=", "2014"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "pred": "SELECT T1.name, T1.country FROM singer AS T1 INNER JOIN `singer_in_concert` AS T2 ON T1.singer_id = T2.singer_id INNER JOIN concert AS T3 ON T3.concert_id = T2.concert_id WHERE T3.concert_name LIKE '%Hey%'", "tokens": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "\"%Hey%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "gold": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "pred": "SELECT T1.name, T1.country FROM singer AS T1 INNER JOIN song_name AS T2 ON T1.singer_id = T2.singer_id WHERE T2.song_name LIKE '%Hey%'", "tokens": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "\"%Hey%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "pred": "SELECT T1.name FROM stadium AS T1 INNER JOIN concert AS T2 ON T2.stadium_id = T1.stadium_id WHERE T2.year = '2014' INTERSECT SELECT T1.name FROM stadium AS T1 INNER JOIN concert AS T2 ON T2.stadium_id = T1.stadium_id WHERE T2.year = '2015'", "tokens": ["select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", "intersect", "select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2015"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 41, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 4, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "gold": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "pred": "SELECT T1.name, T1.location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year = '2014' INTERSECT SELECT T1.name, T1.location FROM stadium AS T1 INNER JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year = '2015'", "tokens": ["select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", "intersect", "select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2015"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 41, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 4, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "Find the number of concerts happened in the stadium with the highest capacity .", "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "pred": "SELECT COUNT(T1.concert_id) FROM concert AS T1 INNER JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.capacity = ( SELECT MAX(capacity) FROM stadium )", "tokens": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")"], "hardness": "hard", "sql_features": {"has_subquery": true, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 22, "num_table_aliases": 2, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "concert_singer", "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "gold": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "pred": "SELECT COUNT(concert_id) FROM concert WHERE stadium_id = ( SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1 )", "tokens": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")"], "hardness": "hard", "sql_features": {"has_subquery": true, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 22, "num_table_aliases": 2, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the number of pets whose weight is heavier than 10.", "gold": "SELECT count(*) FROM pets WHERE weight  >  10", "pred": "SELECT SUM(CASE WHEN T2.weight > 10 THEN 1 ELSE 0 END) FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid", "tokens": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "10"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "How many pets have a greater weight than 10?", "gold": "SELECT count(*) FROM pets WHERE weight  >  10", "pred": "SELECT SUM(CASE WHEN T2.weight > 10 THEN 1 ELSE 0 END) FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid", "tokens": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "10"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the weight of the youngest dog.", "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "pred": "SELECT T1.weight FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid WHERE T1.pettype = 'Dog' ORDER BY T1.pet_age LIMIT 1", "tokens": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "pets_1", "question": "How much does the youngest dog weigh?", "gold": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "pred": "SELECT T2.weight FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.age = ( SELECT MIN(age) FROM student WHERE major = ( SELECT major FROM student WHERE fname = 'Pam' ) )", "tokens": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "pred": "SELECT T1.pettype, T1.weight FROM pets AS T1 INNER JOIN ( SELECT pettype, MAX(weight) AS weight FROM pets GROUP BY pettype ) AS T2 ON T1.pettype = T2.pettype AND T1.weight = T2.weight", "tokens": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "pets_1", "question": "List the maximum weight and type for each type of pet.", "gold": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "pred": "SELECT T1.pettype, MAX(T1.weight) FROM pets AS T1 GROUP BY T1.pettype", "tokens": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "pets_1", "question": "Find number of pets owned by students who are older than 20.", "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "pred": "SELECT COUNT(T2.petid) FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20", "tokens": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.age", ">", "20"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "How many pets are owned by students that have an age greater than 20?", "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "pred": "SELECT SUM(T2.petid) FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20", "tokens": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.age", ">", "20"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the number of dog pets that are raised by female students (with sex F).", "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "pred": "SELECT SUM(CASE WHEN T2.pettype = 'Dog' THEN 1 ELSE 0 END) FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F'", "tokens": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t2.petid", "=", "t3.petid", "where", "t1.sex", "=", "\"F\"", "and", "t3.pettype", "=", "\"dog\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 33, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "pets_1", "question": "How many dog pets are raised by female students?", "gold": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "pred": "SELECT COUNT(pettype) FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid INNER JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.sex = 'F' AND T1.pettype = 'dog'", "tokens": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t2.petid", "=", "t3.petid", "where", "t1.sex", "=", "\"F\"", "and", "t3.pettype", "=", "\"dog\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 33, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the number of distinct type of pets.", "gold": "SELECT count(DISTINCT pettype) FROM pets", "pred": "SELECT COUNT(DISTINCT T2.pettype) FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid", "tokens": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "pets_1", "question": "How many different types of pet are there?", "gold": "SELECT count(DISTINCT pettype) FROM pets", "pred": "SELECT COUNT(DISTINCT pettype) FROM pets", "tokens": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the first name of students who have cat or dog pet.", "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "pred": "SELECT T2.fname FROM pets AS T1 INNER JOIN student AS T2 ON T1.petid = T2.stuid WHERE T1.pettype = 'cat' OR T1.pettype = 'dog'", "tokens": ["select", "distinct", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", "or", "t3.pettype", "=", "\"dog\""], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 31, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What are the first names of every student who has a cat or dog as a pet?", "gold": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "pred": "SELECT T2.fname FROM pets AS T1 INNER JOIN student AS T2 ON T1.petid = T2.stuid WHERE T1.pettype = 'cat' OR T1.pettype = 'dog'", "tokens": ["select", "distinct", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", "or", "t3.pettype", "=", "\"dog\""], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 31, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the first name of students who have both cat and dog pets .", "gold": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "pred": "SELECT T1.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pet", "tokens": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"dog\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 53, "num_table_aliases": 3, "num_joins": 4, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What are the students' first names who have both cats and dogs as pets?", "gold": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "pred": "SELECT T2.fname FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T1.petid = T3.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T2.fname FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T1.petid = T3.petid WHERE T3.pet", "tokens": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"dog\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 53, "num_table_aliases": 3, "num_joins": 4, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the major and age of students who do not have a cat pet.", "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pred": "SELECT T2.major, T2.age FROM pets AS T1 INNER JOIN student AS T2 ON T2.stuid = T1.petid WHERE T1.pettype = 'cat' EXCEPT SELECT T2.major, T2.age FROM pets AS T1 INNER JOIN student AS T2 ON T2.stuid = T1.petid", "tokens": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 38, "num_table_aliases": 4, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What major is every student who does not own a cat as a pet, and also how old are they?", "gold": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pred": "SELECT T1.major FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.petid NOT IN ( SELECT petid FROM pets WHERE pettype = 'cat' )", "tokens": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 38, "num_table_aliases": 4, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the id of students who do not have a cat pet.", "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "pred": "SELECT T1.stuid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.petid NOT IN ( SELECT petid FROM pets WHERE pettype = 'cat' )", "tokens": ["select", "stuid", "from", "student", "except", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 31, "num_table_aliases": 4, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What are the ids of the students who do not own cats as pets?", "gold": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "pred": "SELECT T1.stuid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype!= 'cat'", "tokens": ["select", "stuid", "from", "student", "except", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 31, "num_table_aliases": 4, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pred": "SELECT T1.fname, T1.age FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'dog'", "tokens": ["select", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"dog\"", "and", "t1.stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", ")"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 60, "num_table_aliases": 3, "num_joins": 4, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What is the first name of every student who has a dog but does not have a cat?", "gold": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "pred": "SELECT T1.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype = 'dog' EXCEPT SELECT T1.fname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pettype", "tokens": ["select", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"dog\"", "and", "t1.stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", ")"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 60, "num_table_aliases": 3, "num_joins": 4, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the type and weight of the youngest pet.", "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "pred": "SELECT pettype, weight FROM pets ORDER BY pet_age LIMIT 1", "tokens": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What type of pet is the youngest animal, and how much does it weigh?", "gold": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "pred": "SELECT T1.pettype FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid WHERE T2.stuid = ( SELECT stuid FROM student WHERE age = ( SELECT MAX(age) FROM student ) )", "tokens": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the id and weight of all pets whose age is older than 1.", "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "pred": "SELECT T2.petid, T2.weight FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T2.petid = T3.petid WHERE T3.pet_age > 1", "tokens": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What is the id and weight of every pet who is older than 1?", "gold": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "pred": "SELECT T1.petid, T1.weight FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid WHERE T1.pet_age > 1", "tokens": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the average and maximum age for each type of pet.", "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "pred": "SELECT AVG(T1.pet_age),  T2.pettype FROM pets AS T1 INNER JOIN pets AS T2 ON T1.pet_age = T2.pet_age GROUP BY T2.pettype", "tokens": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "pets_1", "question": "What is the average and maximum age for each pet type?", "gold": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "pred": "SELECT T1.pettype, AVG(T1.pet_age) FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid GROUP BY T1.pettype", "tokens": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "pets_1", "question": "Find the average weight for each pet type.", "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "pred": "SELECT AVG(T1.weight) FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid GROUP BY T1.pettype", "tokens": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "pets_1", "question": "What is the average weight for each type of pet?", "gold": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "pred": "SELECT T2.pettype, AVG(T2.weight) FROM has_pet AS T1 INNER JOIN pets AS T2 ON T1.petid = T2.petid GROUP BY T2.pettype", "tokens": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "pets_1", "question": "Find the first name and age of students who have a pet.", "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "pred": "SELECT T2.fname, T2.age FROM student AS T2 INNER JOIN has_pet AS T1 ON T2.stuid = T1.stuid", "tokens": ["select", "distinct", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What are the different first names and ages of the students who do have pets?", "gold": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "pred": "SELECT DISTINCT T2.fname, T2.age FROM pets AS T1 INNER JOIN student AS T2 ON T2.stuid = T1.petid", "tokens": ["select", "distinct", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "pred": "SELECT T1.petid FROM pets AS T1 INNER JOIN has_pet AS T2 ON T1.petid = T2.petid INNER JOIN student AS T3 ON T2.stuid = T3.stuid WHERE T3.lname = 'Smith'", "tokens": ["select", "t2.petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.lname", "=", "\"Smith\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "gold": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "pred": "SELECT T2.petid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.lname = 'Smith'", "tokens": ["select", "t2.petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.lname", "=", "\"Smith\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the number of pets for each student who has any pet and student id.", "gold": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "pred": "SELECT COUNT(T2.petid) FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid", "tokens": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "pets_1", "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "gold": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "pred": "SELECT COUNT(T2.petid),  T1.stuid FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid", "tokens": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "pets_1", "question": "Find the first name and gender of student who have more than one pet.", "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "pred": "SELECT T2.fname, T2.sex FROM has_pet AS T1 INNER JOIN student AS T2 ON T1.stuid = T2.stuid GROUP BY T2.fname, T2.sex, T2.stuid HAVING COUNT(T1.petid) > 1", "tokens": ["select", "t1.fname", ",", "t1.sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "pets_1", "question": "What is the first name and gender of the all the students who have more than one pet?", "gold": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "pred": "SELECT T1.fname, T1.sex FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.fname, T1.sex HAVING COUNT(T2.stuid) > 1", "tokens": ["select", "t1.fname", ",", "t1.sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "pets_1", "question": "Find the last name of the student who has a cat that is age 3.", "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "pred": "SELECT T1.lname FROM student AS T1 INNER JOIN has_pet AS T2 ON T1.stuid = T2.stuid INNER JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' AND T3.pet_age = 3", "tokens": ["select", "t1.lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pet_age", "=", "3", "and", "t3.pettype", "=", "\"cat\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 30, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What is the last name of the student who has a cat that is 3 years old?", "gold": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "pred": "SELECT T2.lname FROM pets AS T1 INNER JOIN student AS T2 ON T1.petid = T2.stuid WHERE T1.pettype = 'cat' AND T1.pet_age = 3", "tokens": ["select", "t1.lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pet_age", "=", "3", "and", "t3.pettype", "=", "\"cat\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 30, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "pets_1", "question": "Find the average age of students who do not have any pet .", "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)", "pred": "SELECT AVG(age) FROM student WHERE stuid NOT IN ( SELECT stuid FROM has_pet )", "tokens": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "pets_1", "question": "What is the average age for all students who do not own any pets ?", "gold": "select avg(age) from student where stuid not in (select stuid from has_pet)", "pred": "SELECT AVG(T1.age) FROM student AS T1 LEFT JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T2.stuid IS NULL", "tokens": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "How many employees are there?", "gold": "SELECT count(*) FROM employee", "pred": "SELECT COUNT(T1.employee_id) FROM employee AS T1", "tokens": ["select", "count", "(", "*", ")", "from", "employee"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Count the number of employees", "gold": "SELECT count(*) FROM employee", "pred": "SELECT COUNT(employee_id) FROM employee", "tokens": ["select", "count", "(", "*", ")", "from", "employee"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Sort employee names by their age in ascending order.", "gold": "SELECT name FROM employee ORDER BY age", "pred": "SELECT T1.name FROM employee AS T1 ORDER BY T1.age ASC", "tokens": ["select", "name", "from", "employee", "order", "by", "age"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 7, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "List the names of employees and sort in ascending order of age.", "gold": "SELECT name FROM employee ORDER BY age", "pred": "SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id", "tokens": ["select", "name", "from", "employee", "order", "by", "age"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 7, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "What is the number of employees from each city?", "gold": "SELECT count(*) ,  city FROM employee GROUP BY city", "pred": "SELECT COUNT(T1.employee_id) FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id GROUP BY T1.city", "tokens": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "Count the number of employees for each city.", "gold": "SELECT count(*) ,  city FROM employee GROUP BY city", "pred": "SELECT COUNT(T2.employee_id) FROM city AS T1 INNER JOIN employee AS T2 ON T1.city = T2.city", "tokens": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "Which cities do more than one employee under age 30 come from?", "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "pred": "SELECT T2.city FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id WHERE T2.age < 30 GROUP BY T2.city HAVING COUNT(T1.employee_id) > 1", "tokens": ["select", "city", "from", "employee", "where", "age", "<", "30", "group", "by", "city", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "Find the cities that have more than one employee under age 30.", "gold": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "pred": "SELECT T2.city FROM employee AS T1 INNER JOIN shop AS T2 ON T1.employee_id = T2.manager_name WHERE T1.age < 30 GROUP BY T2.city HAVING COUNT(T2.city) > 1", "tokens": ["select", "city", "from", "employee", "where", "age", "<", "30", "group", "by", "city", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "Find the number of shops in each location.", "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "pred": "SELECT COUNT(T1.location) FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id WHERE T2.is_full_time = 1 GROUP BY T1.location", "tokens": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "How many shops are there in each location?", "gold": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "pred": "SELECT COUNT(T1.shop_id), T1.location FROM shop AS T1 GROUP BY T1.location", "tokens": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "Find the manager name and district of the shop whose number of products is the largest.", "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "pred": "SELECT T1.manager_name, T1.district FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.manager_name, T1.district, T1.number_products ORDER BY T1.number_products DESC LIMIT 1", "tokens": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "What are the manager name and district of the shop that sells the largest number of products?", "gold": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "pred": "SELECT T1.manager_name, T1.district FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id ORDER BY T1.number_products DESC LIMIT 1", "tokens": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "find the minimum and maximum number of products of all stores.", "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "pred": "SELECT MIN(number_products) FROM shop", "tokens": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "What are the minimum and maximum number of products across all the shops?", "gold": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "pred": "SELECT MIN(number_products) FROM shop", "tokens": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Return the name, location and district of all shops in descending order of number of products.", "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "pred": "SELECT T2.name, T2.location, T2.district FROM shop AS T1 INNER JOIN employee AS T2 ON T1.shop_id = T2.employee_id", "tokens": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "gold": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "pred": "SELECT T1.name, T1.location, T1.district FROM shop AS T1 ORDER BY T1.number_products DESC", "tokens": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Find the names of stores whose number products is more than the average number of products.", "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "pred": "SELECT T2.name FROM shop AS T1 INNER JOIN employee AS T2 ON T1.manager_name = T2.name WHERE T1.number_products > ( SELECT AVG(number_products) FROM shop )", "tokens": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Which shops' number products is above the average? Give me the shop names.", "gold": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "pred": "SELECT T2.name FROM shop AS T1 INNER JOIN employee AS T2 ON T1.shop_id = T2.employee_id WHERE T1.number_products > ( SELECT AVG(number_products) FROM shop )", "tokens": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "find the name of employee who was awarded the most times in the evaluation.", "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T2.employee_id = T1.employee_id GROUP BY T1.employee_id ORDER BY COUNT(T2.employee_id) DESC LIMIT 1", "tokens": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "group", "by", "t2.employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "Which employee received the most awards in evaluations? Give me the employee name.", "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id GROUP BY T1.name ORDER BY COUNT(T2.year_awarded) DESC LIMIT 1", "tokens": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "group", "by", "t2.employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "Find the name of the employee who got the highest one time bonus.", "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "pred": "SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id WHERE T2.bonus = 1 ORDER BY T2.bonus DESC LIMIT 1", "tokens": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "order", "by", "t2.bonus", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Which employee received the biggest bonus? Give me the employee name.", "gold": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "pred": "SELECT T2.name FROM evaluation AS T1 INNER JOIN employee AS T2 ON T1.employee_id = T2.employee_id ORDER BY T1.bonus DESC LIMIT 1", "tokens": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "order", "by", "t2.bonus", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Find the names of employees who never won any award in the evaluation.", "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "pred": "SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id", "tokens": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "What are the names of the employees who never received any evaluation?", "gold": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "pred": "SELECT T1.name FROM employee AS T1 INNER JOIN evaluation AS T2 ON T1.employee_id = T2.employee_id", "tokens": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "What is the name of the shop that is hiring the largest number of employees?", "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name ORDER BY COUNT(T1.employee_id) DESC LIMIT 1", "tokens": ["select", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t1.shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "Which shop has the most employees? Give me the shop name.", "gold": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name ORDER BY COUNT(T1.employee_id) DESC LIMIT 1", "tokens": ["select", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t1.shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "Find the name of the shops that do not hire any employee.", "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "pred": "SELECT T1.name FROM shop AS T1 LEFT JOIN hiring AS T2 ON T1.shop_id = T2.shop_id WHERE T2.shop_id IS NULL", "tokens": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Which shops run with no employees? Find the shop names", "gold": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "pred": "SELECT T2.name FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.shop_id = T2.shop_id WHERE T1.employee_id IS NULL", "tokens": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Find the number of employees hired in each shop; show the shop name as well.", "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "pred": "SELECT T2.name, COUNT(T1.employee_id) FROM hiring AS T1 INNER JOIN shop AS T2 ON T1.shop_id = T2.shop_id GROUP BY T2.name", "tokens": ["select", "count", "(", "*", ")", ",", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t2.name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "For each shop, return the number of employees working there and the name of the shop.", "gold": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "pred": "SELECT T1.name, COUNT(T1.employee_id) FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id GROUP BY T1.name", "tokens": ["select", "count", "(", "*", ")", ",", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t2.name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "employee_hire_evaluation", "question": "What is total bonus given in all evaluations?", "gold": "SELECT sum(bonus) FROM evaluation", "pred": "SELECT SUM(bonus) FROM evaluation", "tokens": ["select", "sum", "(", "bonus", ")", "from", "evaluation"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Find the total amount of bonus given in all the evaluations.", "gold": "SELECT sum(bonus) FROM evaluation", "pred": "SELECT SUM(bonus) FROM evaluation", "tokens": ["select", "sum", "(", "bonus", ")", "from", "evaluation"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Give me all the information about hiring.", "gold": "SELECT * FROM hiring", "pred": "SELECT * FROM `evaluation` AS T1 INNER JOIN `employee` AS T2 ON T1.employee_id = T2.employee_id", "tokens": ["select", "*", "from", "hiring"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 4, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "What is all the information about hiring?", "gold": "SELECT * FROM hiring", "pred": "SELECT T1.name FROM employee AS T1 INNER JOIN hiring AS T2 ON T1.employee_id = T2.employee_id", "tokens": ["select", "*", "from", "hiring"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 4, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "pred": "SELECT T2.district FROM shop AS T1 INNER JOIN evaluation AS T2 ON T1.shop_id = T2.employee_id WHERE T1.number_products < 3000 INTERSECT SELECT T2.district FROM shop AS T1 INNER JOIN evaluation AS T2 ON T1.shop_id = T2.employee_id WHERE T1.number_products > 10000", "tokens": ["select", "district", "from", "shop", "where", "number_products", "<", "3000", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "10000"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "gold": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "pred": "SELECT T2.district FROM shop AS T1 INNER JOIN employee_hire_evaluation.shop AS T2 ON T1.shop_id = T2.shop_id WHERE T1.number_products < 3000 INTERSECT SELECT T2.district FROM shop AS T1 INNER JOIN employee_hire_evaluation.shop AS T2 ON T1.shop_id = T2.shop_id WHERE T1.number_products > 10000", "tokens": ["select", "district", "from", "shop", "where", "number_products", "<", "3000", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "10000"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "How many different store locations are there?", "gold": "SELECT count(DISTINCT LOCATION) FROM shop", "pred": "SELECT COUNT(DISTINCT T1.location) FROM shop AS T1", "tokens": ["select", "count", "(", "distinct", "location", ")", "from", "shop"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "employee_hire_evaluation", "question": "Count the number of distinct store locations.", "gold": "SELECT count(DISTINCT LOCATION) FROM shop", "pred": "SELECT COUNT(T2.location) FROM shop AS T1 INNER JOIN hiring AS T2 ON T1.shop_id = T2.shop_id", "tokens": ["select", "count", "(", "distinct", "location", ")", "from", "shop"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many documents do we have?", "gold": "SELECT count(*) FROM Documents", "pred": "SELECT COUNT(document_id) FROM documents", "tokens": ["select", "count", "(", "*", ")", "from", "documents"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of documents.", "gold": "SELECT count(*) FROM Documents", "pred": "SELECT COUNT(document_id) FROM documents", "tokens": ["select", "count", "(", "*", ")", "from", "documents"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "List document IDs, document names, and document descriptions for all documents.", "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents", "pred": "SELECT document_id, document_name, document_description FROM documents", "tokens": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids, names, and descriptions for all documents?", "gold": "SELECT document_id ,  document_name ,  document_description FROM Documents", "pred": "SELECT document_id, document_name, document_description FROM documents", "tokens": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the document name and template id for document with description with the letter 'w' in it?", "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "pred": "SELECT T2.document_name, T2.template_id FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_description LIKE '%w%'", "tokens": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "\"%w%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the names and template ids for documents that contain the letter w in their description.", "gold": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "pred": "SELECT T1.document_name, T1.template_id FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_description LIKE '%w%'", "tokens": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "\"%w%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the document id, template id and description for document named \"Robbin CV\"?", "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "pred": "SELECT T1.document_id, T2.template_id, T2.template_details FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = 'Robbin CV'", "tokens": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "\"Robbin CV\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the document id, template id, and description for the document with the name Robbin CV.", "gold": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "pred": "SELECT T2.document_id, T2.template_id, T1.document_description FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = 'Robbin CV'", "tokens": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "\"Robbin CV\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many different templates do all document use?", "gold": "SELECT count(DISTINCT template_id) FROM Documents", "pred": "SELECT COUNT(DISTINCT T1.template_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id", "tokens": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of different templates used for documents.", "gold": "SELECT count(DISTINCT template_id) FROM Documents", "pred": "SELECT COUNT(DISTINCT T2.template_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id", "tokens": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many documents are using the template with type code 'PPT'?", "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "pred": "SELECT COUNT(T1.document_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id INNER JOIN ref_template_types AS T3 ON T2.template_type_code = T3.template_type_code WHERE T3.template_type_code = 'PPT'", "tokens": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.template_type_code", "=", "\"PPT\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of documents that use the PPT template type.", "gold": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "pred": "SELECT COUNT(T2.document_id) FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_code = 'PPT'", "tokens": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.template_type_code", "=", "\"PPT\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all template ids and number of documents using each template.", "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "pred": "SELECT T1.template_id, COUNT(T2.document_id) FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id", "tokens": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are all different template ids used for documents, and how many times were each of them used?", "gold": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "pred": "SELECT T1.template_id, COUNT(T2.document_id) FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id", "tokens": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the id and type code for the template used by the most documents?", "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.template_id, T2.template_type_code FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id GROUP BY T2.template_id, T2.template_type_code ORDER BY COUNT(T1.document_id) DESC LIMIT 1", "tokens": ["select", "t1.template_id", ",", "t2.template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the id and type code of the template that is used for the greatest number of documents.", "gold": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code ORDER BY COUNT(T1.template_type_code) DESC LIMIT 1", "tokens": ["select", "t1.template_id", ",", "t2.template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show ids for all templates that are used by more than one document.", "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "pred": "SELECT T1.template_id FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id HAVING COUNT(T1.template_id) > 1", "tokens": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "1"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the template ids of any templates used in more than a single document?", "gold": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "pred": "SELECT T2.template_id FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id GROUP BY T2.template_id HAVING COUNT(T2.template_id) > 1", "tokens": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "1"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show ids for all templates not used by any document.", "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "pred": "SELECT DISTINCT T2.template_id FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id", "tokens": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 0, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids for templates that are not used in any documents?", "gold": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "pred": "SELECT T1.template_id FROM templates AS T1 LEFT JOIN documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_id IS NULL", "tokens": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 0, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many templates do we have?", "gold": "SELECT count(*) FROM Templates", "pred": "SELECT COUNT(template_id) FROM templates", "tokens": ["select", "count", "(", "*", ")", "from", "templates"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of templates.", "gold": "SELECT count(*) FROM Templates", "pred": "SELECT COUNT(template_id) FROM templates", "tokens": ["select", "count", "(", "*", ")", "from", "templates"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show template ids, version numbers, and template type codes for all templates.", "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "pred": "SELECT T1.template_id, T1.version_number, T1.template_type_code FROM templates AS T1", "tokens": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids, version numbers, and type codes for each template?", "gold": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "pred": "SELECT T1.template_id, T1.version_number, T1.template_type_code FROM templates AS T1", "tokens": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all distinct template type codes for all templates.", "gold": "SELECT DISTINCT template_type_code FROM Templates", "pred": "SELECT DISTINCT T2.template_type_code FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code", "tokens": ["select", "distinct", "template_type_code", "from", "templates"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 5, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes?", "gold": "SELECT DISTINCT template_type_code FROM Templates", "pred": "SELECT DISTINCT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code", "tokens": ["select", "distinct", "template_type_code", "from", "templates"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 5, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of templates with template type code PP or PPT?", "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "pred": "SELECT T1.template_id FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code = 'PP'", "tokens": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "\"PP\"", "or", "template_type_code", "=", "\"PPT\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the ids of templates that have the code PP or PPT.", "gold": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "pred": "SELECT T1.template_id FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code = 'PP'", "tokens": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "\"PP\"", "or", "template_type_code", "=", "\"PPT\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many templates have template type code CV?", "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "pred": "SELECT COUNT(template_id) FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code = 'CV'", "tokens": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "\"CV\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of templates of the type CV.", "gold": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "pred": "SELECT COUNT(template_id) FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code = 'CV'", "tokens": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "\"CV\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the version number and template type code for the template with version number later than 5?", "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "pred": "SELECT DISTINCT T1.version_number, T1.template_type_code FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.version_number > 5", "tokens": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "5"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "gold": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "pred": "SELECT T1.version_number, T1.template_type_code FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.version_number > 5", "tokens": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "5"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and number of templates for each.", "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "pred": "SELECT T1.template_type_code, COUNT(T2.template_id) FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code", "tokens": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes, and how many templates correspond to each?", "gold": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "pred": "SELECT T1.template_type_code, COUNT(T2.template_id) FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code", "tokens": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Which template type code has most number of templates?", "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T2.template_type_code = T1.template_type_code GROUP BY T1.template_type_code ORDER BY COUNT(T2.template_id) DESC LIMIT 1", "tokens": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the type code of the template type that the most templates belong to.", "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code ORDER BY COUNT(T2.template_id) DESC LIMIT 1", "tokens": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes with less than three templates.", "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "pred": "SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T2.template_type_code = T1.template_type_code GROUP BY T1.template_type_code HAVING COUNT(T2.template_id) < 3", "tokens": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "3"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the codes of template types that have fewer than 3 templates?", "gold": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "pred": "SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code HAVING COUNT(T1.template_type_code) < 3", "tokens": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "3"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What the smallest version number and its template type code?", "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "pred": "SELECT MIN(version_number), template_type_code FROM templates", "tokens": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the lowest version number, along with its corresponding template type code.", "gold": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "pred": "SELECT T1.version_number, T1.template_type_code FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code ORDER BY T1.version_number LIMIT 1", "tokens": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the template type code of the template used by document with the name \"Data base\"?", "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "pred": "SELECT T2.template_type_code FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = 'Data base'", "tokens": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.document_name", "=", "\"Data base\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the template type code of the template that is used by a document named Data base.", "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "pred": "SELECT T2.template_type_code FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id WHERE T1.document_name = 'Data base'", "tokens": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.document_name", "=", "\"Data base\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all document names using templates with template type code BK.", "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "pred": "SELECT T3.document_name FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code INNER JOIN documents AS T3 ON T2.template_id = T3.template_id WHERE T1.template_type_code = 'BK'", "tokens": ["select", "t2.document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t1.template_type_code", "=", "\"BK\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the names of documents that use templates with the code BK?", "gold": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "pred": "SELECT T2.document_name FROM templates AS T1 INNER JOIN documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = 'BK'", "tokens": ["select", "t2.document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t1.template_type_code", "=", "\"BK\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and the number of documents using each type.", "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "pred": "SELECT T2.template_type_code, COUNT(T2.template_type_code) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id INNER JOIN ref_template_types AS T3 ON T2.template_type_code = T3.template_type_code GROUP BY T2.template_type_code", "tokens": ["select", "t1.template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes, and how many documents use each type?", "gold": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "pred": "SELECT T1.template_type_code, COUNT(T2.document_id) FROM ref_template_types AS T1 INNER JOIN documents AS T2 ON T2.template_id = T1.template_type_code GROUP BY T1.template_type_code", "tokens": ["select", "t1.template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Which template type code is used by most number of documents?", "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.template_type_code FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id GROUP BY T2.template_type_code ORDER BY COUNT(T1.document_id) DESC LIMIT 1", "tokens": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the code of the template type that is most commonly used in documents.", "gold": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code GROUP BY T1.template_type_code ORDER BY COUNT(T2.template_id) DESC LIMIT 1", "tokens": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes that are not used by any document.", "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "pred": "SELECT T1.template_type_code FROM ref_template_types AS T1 LEFT JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_id IS NULL", "tokens": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the codes of template types that are not used for any document?", "gold": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "pred": "SELECT T1.template_type_code FROM ref_template_types AS T1 LEFT JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_code IS NULL", "tokens": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and descriptions.", "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "pred": "SELECT T1.template_type_code, T1.template_type_description FROM ref_template_types AS T1", "tokens": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the type codes and descriptions for all template types?", "gold": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "pred": "SELECT T1.template_type_code, T1.template_type_description FROM ref_template_types AS T1", "tokens": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the template type descriptions for template type code \"AD\".", "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "pred": "SELECT T2.template_type_description FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_code = 'AD'", "tokens": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "\"AD\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the template type description of the template type with the code AD.", "gold": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "pred": "SELECT T2.template_type_description FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_code = 'AD'", "tokens": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "\"AD\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the template type code for template type description \"Book\".", "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "pred": "SELECT T2.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Book'", "tokens": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "\"Book\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the type code of the template type with the description \"Book\".", "gold": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "pred": "SELECT T1.template_type_code FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T2.template_type_code = T1.template_type_code WHERE T1.template_type_description = 'Book'", "tokens": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "\"Book\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the distinct template type descriptions for the templates ever used by any document?", "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "pred": "SELECT DISTINCT T2.template_type_description FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id INNER JOIN ref_template_types AS T3 ON T2.template_type_code = T3.template_type_code", "tokens": ["select", "distinct", "t1.template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "join", "documents", "as", "t3", "on", "t2.template_id", "=", "t3.template_id"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 23, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the different descriptions for templates that have been used in a document.", "gold": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "pred": "SELECT DISTINCT T2.template_type_description FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_id IN ( SELECT T2.template_id FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id )", "tokens": ["select", "distinct", "t1.template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "join", "documents", "as", "t3", "on", "t2.template_id", "=", "t3.template_id"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 23, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the template ids with template type description \"Presentation\".", "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "pred": "SELECT T2.template_id FROM ref_template_types AS T1 INNER JOIN templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = 'Presentation'", "tokens": ["select", "t2.template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "where", "t1.template_type_description", "=", "\"Presentation\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the ids corresponding to templates with the description 'Presentation'.", "gold": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "pred": "SELECT T1.template_id FROM templates AS T1 INNER JOIN ref_template_types AS T2 ON T1.template_type_code = T2.template_type_code WHERE T2.template_type_description = 'Presentation'", "tokens": ["select", "t2.template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "where", "t1.template_type_description", "=", "\"Presentation\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many paragraphs in total?", "gold": "SELECT count(*) FROM Paragraphs", "pred": "SELECT COUNT(paragraph_id) FROM paragraphs", "tokens": ["select", "count", "(", "*", ")", "from", "paragraphs"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of paragraphs.", "gold": "SELECT count(*) FROM Paragraphs", "pred": "SELECT COUNT(paragraph_id) FROM paragraphs", "tokens": ["select", "count", "(", "*", ")", "from", "paragraphs"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many paragraphs for the document with name 'Summer Show'?", "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "pred": "SELECT COUNT(paragraph_id) FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Summer Show'", "tokens": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Summer Show\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of paragraphs in the document named 'Summer Show'.", "gold": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "pred": "SELECT COUNT(paragraph_id) FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = 'Summer Show'", "tokens": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Summer Show\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show paragraph details for paragraph with text 'Korea ' .", "gold": "select other_details from paragraphs where paragraph_text like 'korea'", "pred": "SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Korea '", "tokens": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "\"korea\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the details for the paragraph that includes the text 'Korea ' ?", "gold": "select other_details from paragraphs where paragraph_text like 'korea'", "pred": "SELECT T1.paragraph_text FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Korea '", "tokens": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "\"korea\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "pred": "SELECT T2.paragraph_id, T2.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Welcome to NY'", "tokens": ["select", "t1.paragraph_id", ",", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Welcome to NY\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "gold": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "pred": "SELECT T2.paragraph_id, T2.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Welcome to NY'", "tokens": ["select", "t1.paragraph_id", ",", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Welcome to NY\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all paragraph texts for the document \"Customer reviews\".", "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "pred": "SELECT T2.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Customer reviews'", "tokens": ["select", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Customer reviews\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "gold": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "pred": "SELECT T2.paragraph_text FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name = 'Customer reviews'", "tokens": ["select", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Customer reviews\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "pred": "SELECT T2.document_id, COUNT(T1.paragraph_id) FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id ORDER BY T2.document_id", "tokens": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "gold": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "pred": "SELECT DISTINCT T1.document_id, COUNT(T1.paragraph_id) FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id", "tokens": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all document ids, names and the number of paragraphs in each document.", "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "pred": "SELECT document_id, document_name, COUNT(paragraph_id) FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY document_id", "tokens": ["select", "t1.document_id", ",", "t2.document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "gold": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "pred": "SELECT T1.document_id, T2.document_name, COUNT(T3.paragraph_id) FROM documents AS T1 INNER JOIN templates AS T2 ON T1.template_id = T2.template_id INNER JOIN paragraphs AS T3 ON T1.document_id = T3.document_id GROUP BY T1.document_id", "tokens": ["select", "t1.document_id", ",", "t2.document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "List all document ids with at least two paragraphs.", "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "pred": "SELECT T1.document_id FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id HAVING COUNT(T2.paragraph_id) >= 2", "tokens": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of documents that have 2 or more paragraphs?", "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "pred": "SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id HAVING COUNT(T1.paragraph_id) > 1", "tokens": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the document id and name with greatest number of paragraphs?", "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.document_id, T2.document_name FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id, T2.document_name ORDER BY COUNT(T1.paragraph_id) DESC LIMIT 1", "tokens": ["select", "t1.document_id", ",", "t2.document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the id and name of the document with the most paragraphs.", "gold": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T3.document_id, T3.document_name FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id INNER JOIN documents AS T3 ON T3.document_id = T2.document_id WHERE T1.paragraph_id = ( SELECT MAX(T1.paragraph_id) FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id )", "tokens": ["select", "t1.document_id", ",", "t2.document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the document id with least number of paragraphs?", "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "pred": "SELECT T1.document_id FROM documents AS T1 INNER JOIN paragraphs AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY COUNT(T2.paragraph_id) LIMIT 1", "tokens": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the id of the document with the fewest paragraphs.", "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "pred": "SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id ORDER BY COUNT(T1.paragraph_id) LIMIT 1", "tokens": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the document id with 1 to 2 paragraphs?", "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "pred": "SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id HAVING COUNT(T1.paragraph_id) BETWEEN 1 AND 2", "tokens": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "1", "and", "2"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Give the ids of documents that have between one and two paragraphs.", "gold": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "pred": "SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id GROUP BY T2.document_id HAVING COUNT(T1.paragraph_id) BETWEEN 1 AND 2", "tokens": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "1", "and", "2"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "pred": "SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Brazil' INTERSECT SELECT T2.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Ireland'", "tokens": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"Brazil\"", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"Ireland\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "gold": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "pred": "SELECT T1.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Brazil' INTERSECT SELECT T1.document_id FROM paragraphs AS T1 INNER JOIN documents AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Ireland'", "tokens": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"Brazil\"", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"Ireland\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "course_teach", "question": "How many teachers are there?", "gold": "SELECT count(*) FROM teacher", "pred": "SELECT COUNT(teacher_id) FROM teacher", "tokens": ["select", "count", "(", "*", ")", "from", "teacher"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What is the total count of teachers?", "gold": "SELECT count(*) FROM teacher", "pred": "SELECT COUNT(teacher_id) FROM teacher", "tokens": ["select", "count", "(", "*", ")", "from", "teacher"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "List the names of teachers in ascending order of age.", "gold": "SELECT Name FROM teacher ORDER BY Age ASC", "pred": "SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id", "tokens": ["select", "name", "from", "teacher", "order", "by", "age", "asc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What are the names of the teachers ordered by ascending age?", "gold": "SELECT Name FROM teacher ORDER BY Age ASC", "pred": "SELECT name FROM teacher ORDER BY age ASC", "tokens": ["select", "name", "from", "teacher", "order", "by", "age", "asc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What are the age and hometown of teachers?", "gold": "SELECT Age ,  Hometown FROM teacher", "pred": "SELECT T1.age, T1.hometown FROM teacher AS T1", "tokens": ["select", "age", ",", "hometown", "from", "teacher"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What is the age and hometown of every teacher?", "gold": "SELECT Age ,  Hometown FROM teacher", "pred": "SELECT T2.age, T2.hometown FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id", "tokens": ["select", "age", ",", "hometown", "from", "teacher"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "gold": "select name from teacher where hometown != \"little lever urban district\"", "pred": "SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.hometown!= 'Little Lever Urban District'", "tokens": ["select", "name", "from", "teacher", "where", "hometown", "!=", "\"little lever urban district\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "gold": "select name from teacher where hometown != \"little lever urban district\"", "pred": "SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.hometown!= 'Little Lever Urban District'", "tokens": ["select", "name", "from", "teacher", "where", "hometown", "!=", "\"little lever urban district\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "course_teach", "question": "Show the name of teachers aged either 32 or 33?", "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "pred": "SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.age = 32 INTERSECT SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.age = 33", "tokens": ["select", "name", "from", "teacher", "where", "age", "=", "32", "or", "age", "=", "33"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What are the names of the teachers who are aged either 32 or 33?", "gold": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "pred": "SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.age = 32 INTERSECT SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.age = 33", "tokens": ["select", "name", "from", "teacher", "where", "age", "=", "32", "or", "age", "=", "33"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What is the hometown of the youngest teacher?", "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "pred": "SELECT T1.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.age = 'Youngest'", "tokens": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "Where is the youngest teacher from?", "gold": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "pred": "SELECT T1.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.hometown ORDER BY T1.age LIMIT 1", "tokens": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "Show different hometown of teachers and the number of teachers from each hometown.", "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "pred": "SELECT T1.hometown FROM teacher AS T1 GROUP BY T1.hometown", "tokens": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "course_teach", "question": "For each hometown, how many teachers are there?", "gold": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "pred": "SELECT COUNT(teacher_id) FROM teacher GROUP BY hometown", "tokens": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "course_teach", "question": "List the most common hometown of teachers.", "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T1.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T2.teacher_id = T1.teacher_id GROUP BY T1.hometown ORDER BY COUNT(T1.hometown) DESC LIMIT 1", "tokens": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "course_teach", "question": "What is the most commmon hometowns for teachers?", "gold": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T2.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T2.hometown ORDER BY COUNT(T2.teacher_id) DESC LIMIT 1", "tokens": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "course_teach", "question": "Show the hometowns shared by at least two teachers.", "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "pred": "SELECT T1.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.hometown HAVING COUNT(T1.teacher_id) > 1", "tokens": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "course_teach", "question": "What are the towns from which at least two teachers come from?", "gold": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "pred": "SELECT T1.hometown FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.hometown HAVING COUNT(T1.hometown) > 1", "tokens": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "course_teach", "question": "Show names of teachers and the courses they are arranged to teach.", "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "pred": "SELECT T2.name, T1.course FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id", "tokens": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What is the name of each teacher and what course they teach?", "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "pred": "SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN course AS T3 ON T3.course_id = T2.course_id", "tokens": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "pred": "SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id", "tokens": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "order", "by", "t3.name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 27, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "gold": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "pred": "SELECT T2.name, T1.course FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id", "tokens": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "order", "by", "t3.name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 27, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "Show the name of the teacher for the math course.", "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "pred": "SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN course AS T3 ON T1.course_id = T3.course_id WHERE T3.course ='math'", "tokens": ["select", "t3.name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "where", "t2.course", "=", "\"Math\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What are the names of the people who teach math courses?", "gold": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "pred": "SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id INNER JOIN course AS T3 ON T3.course_id = T1.course_id WHERE T3.course ='math'", "tokens": ["select", "t3.name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "where", "t2.course", "=", "\"Math\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "course_teach", "question": "Show names of teachers and the number of courses they teach.", "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "pred": "SELECT T1.name, COUNT(T2.course_id) FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.name", "tokens": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "course_teach", "question": "What are the names of the teachers and how many courses do they teach?", "gold": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "pred": "SELECT T1.name, COUNT(T2.course_id) FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.name", "tokens": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "course_teach", "question": "Show names of teachers that teach at least two courses.", "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "pred": "SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id HAVING COUNT(T1.teacher_id) > 1", "tokens": ["select", "t2.name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "course_teach", "question": "What are the names of the teachers who teach at least two courses?", "gold": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "pred": "SELECT T1.name FROM teacher AS T1 INNER JOIN course_arrange AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id HAVING COUNT(T2.teacher_id) > 1", "tokens": ["select", "t2.name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "course_teach", "question": "List the names of teachers who have not been arranged to teach courses.", "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "pred": "SELECT DISTINCT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id", "tokens": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "course_teach", "question": "What are the names of the teachers whose courses have not been arranged?", "gold": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "pred": "SELECT T2.name FROM course_arrange AS T1 INNER JOIN teacher AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.course_id IS NULL", "tokens": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "How many visitors below age 30 are there?", "gold": "SELECT count(*) FROM visitor WHERE age  <  30", "pred": "SELECT COUNT(T1.id) FROM visitor AS T1 WHERE T1.age < 30", "tokens": ["select", "count", "(", "*", ")", "from", "visitor", "where", "age", "<", "30"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "gold": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "pred": "SELECT T2.name FROM visitor AS T2 WHERE T2.level_of_membership > 4 ORDER BY T2.level_of_membership DESC", "tokens": ["select", "name", "from", "visitor", "where", "level_of_membership", ">", "4", "order", "by", "level_of_membership", "desc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "What is the average age of the visitors whose membership level is not higher than 4?", "gold": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "pred": "SELECT AVG(T2.age) FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.level_of_membership <= 4", "tokens": ["select", "avg", "(", "age", ")", "from", "visitor", "where", "level_of_membership", "<=", "4"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "gold": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "pred": "SELECT T2.name, T2.level_of_membership FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_id = T2.id WHERE T2.level_of_membership > 4 ORDER BY T2.age DESC", "tokens": ["select", "name", ",", "level_of_membership", "from", "visitor", "where", "level_of_membership", ">", "4", "order", "by", "age", "desc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "Find the id and name of the museum that has the most staff members?", "gold": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "pred": "SELECT T1.museum_id, T1.name FROM museum AS T1 GROUP BY T1.museum_id ORDER BY COUNT(T1.museum_id) DESC LIMIT 1", "tokens": ["select", "museum_id", ",", "name", "from", "museum", "order", "by", "num_of_staff", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "Find the average number of staff working for the museums that were open before 2009.", "gold": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "pred": "SELECT AVG(num_of_staff) FROM museum WHERE open_year LIKE '2008%'", "tokens": ["select", "avg", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", "<", "2009"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "What are the opening year and staff number of the museum named Plaza Museum?", "gold": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "pred": "SELECT T2.open_year, T2.num_of_staff FROM visit AS T1 INNER JOIN museum AS T2 ON T1.museum_id = T2.museum_id WHERE T1.visitor_id = 'id' AND T2.name = 'Plaza Museum'", "tokens": ["select", "num_of_staff", ",", "open_year", "from", "museum", "where", "name", "=", "\"Plaza Museum\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "gold": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "pred": "SELECT T1.name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.museum_id = T2.museum_id GROUP BY T1.name HAVING COUNT(T1.name) > ( SELECT MIN(num_of_staff) FROM museum WHERE open_year > '2010' )", "tokens": ["select", "name", "from", "museum", "where", "num_of_staff", ">", "(", "select", "min", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", ">", "2010", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 20, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "find the id, name and age for visitors who visited some museums more than once.", "gold": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "pred": "SELECT T1.id, T1.name, T1.age FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id GROUP BY T1.id, T1.name, T1.age HAVING COUNT(T2.visitor_id) > 1", "tokens": ["select", "t1.id", ",", "t1.name", ",", "t1.age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "museum_visit", "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "gold": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "pred": "SELECT T1.id, T1.name, T1.level_of_membership FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id ORDER BY T2.total_spent DESC LIMIT 1", "tokens": ["select", "t2.visitor_id", ",", "t1.name", ",", "t1.level_of_membership", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "group", "by", "t2.visitor_id", "order", "by", "sum", "(", "t2.total_spent", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 30, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "museum_visit", "question": "What are the id and name of the museum visited most times?", "gold": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.museum_id, T1.name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.museum_id = T2.museum_id GROUP BY T1.museum_id ORDER BY COUNT(T2.museum_id) DESC LIMIT 1", "tokens": ["select", "t2.museum_id", ",", "t1.name", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1.museum_id", "=", "t2.museum_id", "group", "by", "t2.museum_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "museum_visit", "question": "What is the name of the museum that had no visitor yet?", "gold": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "pred": "SELECT T1.name FROM museum AS T1 INNER JOIN visit AS T2 ON T1.museum_id = T2.museum_id WHERE T2.num_of_ticket = 0", "tokens": ["select", "name", "from", "museum", "where", "museum_id", "not", "in", "(", "select", "museum_id", "from", "visit", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "Find the name and age of the visitor who bought the most tickets at once.", "gold": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "pred": "SELECT T2.name, T2.age FROM visit AS T1 INNER JOIN visitor AS T2 ON T1.visitor_id = T2.id ORDER BY T1.num_of_ticket DESC LIMIT 1", "tokens": ["select", "t1.name", ",", "t1.age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "order", "by", "t2.num_of_ticket", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "What are the average and maximum number of tickets bought in all visits?", "gold": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "pred": "SELECT AVG(T1.num_of_ticket) FROM visit AS T1 GROUP BY T1.num_of_ticket", "tokens": ["select", "avg", "(", "num_of_ticket", ")", ",", "max", "(", "num_of_ticket", ")", "from", "visit"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "What is the total ticket expense of the visitors whose membership level is 1?", "gold": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "pred": "SELECT SUM(T2.total_spent) FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id WHERE T1.level_of_membership = 1", "tokens": ["select", "sum", "(", "t2.total_spent", ")", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "where", "t1.level_of_membership", "=", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "gold": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "pred": "SELECT T1.name FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id INNER JOIN museum AS T3 ON T3.museum_id = T2.museum_id WHERE T3.open_year < '2009' INTERSECT SELECT T1.name FROM visitor AS T1 INNER JOIN visit AS T2 ON T1.id = T2.visitor_id INNER JOIN museum AS T3 ON T3.museum_id = T2.museum_id WHERE", "tokens": ["select", "t1.name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "join", "museum", "as", "t3", "on", "t3.museum_id", "=", "t2.museum_id", "where", "t3.open_year", "<", "2009", "intersect", "select", "t1.name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "join", "museum", "as", "t3", "on", "t3.museum_id", "=", "t2.museum_id", "where", "t3.open_year", ">", "2011"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 53, "num_table_aliases": 3, "num_joins": 4, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "Find the number of visitors who did not visit any museum opened after 2010.", "gold": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "pred": "SELECT COUNT(id) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year > 2010 ) )", "tokens": ["select", "count", "(", "*", ")", "from", "visitor", "where", "id", "not", "in", "(", "select", "t2.visitor_id", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1.museum_id", "=", "t2.museum_id", "where", "t1.open_year", ">", "2010", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 31, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "museum_visit", "question": "How many museums were opened after 2013 or before 2008?", "gold": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "pred": "SELECT COUNT(museum_id) FROM museum WHERE open_year > 2013 INTERSECT SELECT COUNT(museum_id) FROM museum WHERE open_year < 2008", "tokens": ["select", "count", "(", "*", ")", "from", "museum", "where", "open_year", ">", "2013", "or", "open_year", "<", "2008"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the total number of players.", "gold": "SELECT count(*) FROM players", "pred": "SELECT COUNT(player_id) FROM players", "tokens": ["select", "count", "(", "*", ")", "from", "players"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "How many players are there?", "gold": "SELECT count(*) FROM players", "pred": "SELECT COUNT(player_id) FROM players", "tokens": ["select", "count", "(", "*", ")", "from", "players"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the total number of matches.", "gold": "SELECT count(*) FROM matches", "pred": "SELECT COUNT(*) FROM matches", "tokens": ["select", "count", "(", "*", ")", "from", "matches"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Count the number of matches.", "gold": "SELECT count(*) FROM matches", "pred": "SELECT COUNT(match_num) FROM matches", "tokens": ["select", "count", "(", "*", ")", "from", "matches"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "List the first name and birth date of all players from the country with code USA.", "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "pred": "SELECT T1.first_name, T1.birth_date FROM players AS T1 INNER JOIN players AS T2 ON T1.country_code = T2.country_code WHERE T2.country_code = 'USA'", "tokens": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "\"USA\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What are the first names and birth dates of players from the USA?", "gold": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "pred": "SELECT T1.first_name, T1.birth_date FROM players AS T1 INNER JOIN players AS T2 ON T1.country_code = T2.country_code WHERE T1.first_name = T2.first_name AND T1.birth_date = T2.birth_date AND T1.country_code = 'USA'", "tokens": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "\"USA\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the average age of losers and winners of all matches.", "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "pred": "SELECT AVG(loser_age) FROM matches", "tokens": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What are the average ages of losers and winners across matches?", "gold": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "pred": "SELECT AVG(loser_age) FROM matches", "tokens": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the average rank of winners in all matches.", "gold": "SELECT avg(winner_rank) FROM matches", "pred": "SELECT AVG(T2.ranking) FROM matches AS T1 INNER JOIN rankings AS T2 ON T2.player_id = T1.winner_id", "tokens": ["select", "avg", "(", "winner_rank", ")", "from", "matches"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What is the average rank for winners in all matches?", "gold": "SELECT avg(winner_rank) FROM matches", "pred": "SELECT AVG(ranking) FROM rankings AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id", "tokens": ["select", "avg", "(", "winner_rank", ")", "from", "matches"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the highest rank of losers in all matches.", "gold": "SELECT min(loser_rank) FROM matches", "pred": "SELECT MAX(T2.ranking) FROM matches AS T1 INNER JOIN rankings AS T2 ON T1.loser_id = T2.player_id", "tokens": ["select", "min", "(", "loser_rank", ")", "from", "matches"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What is the best rank of losers across all matches?", "gold": "SELECT min(loser_rank) FROM matches", "pred": "SELECT MIN(ranking) FROM rankings", "tokens": ["select", "min", "(", "loser_rank", ")", "from", "matches"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "find the number of distinct country codes of all players.", "gold": "SELECT count(DISTINCT country_code) FROM players", "pred": "SELECT COUNT(DISTINCT T1.country_code) FROM players AS T1", "tokens": ["select", "count", "(", "distinct", "country_code", ")", "from", "players"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "How many distinct countries do players come from?", "gold": "SELECT count(DISTINCT country_code) FROM players", "pred": "SELECT COUNT(DISTINCT T1.country_code) FROM players AS T1", "tokens": ["select", "count", "(", "distinct", "country_code", ")", "from", "players"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the number of distinct name of losers.", "gold": "SELECT count(DISTINCT loser_name) FROM matches", "pred": "SELECT DISTINCT T1.loser_name FROM matches AS T1", "tokens": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "How many different loser names are there?", "gold": "SELECT count(DISTINCT loser_name) FROM matches", "pred": "SELECT COUNT(DISTINCT T1.loser_name) FROM matches AS T1", "tokens": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the name of tourney that has more than 10 matches.", "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "pred": "SELECT T2.tourney_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id GROUP BY T2.tourney_name HAVING COUNT(T1.match_num) > 10", "tokens": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "10"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "What are the names of tournaments that have more than 10 matches?", "gold": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "pred": "SELECT T2.tourney_name FROM matches AS T1 INNER JOIN tourney AS T2 ON T1.tourney_id = T2.tourney_id GROUP BY T2.tourney_name HAVING COUNT(T1.match_num) > 10", "tokens": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "10"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "List the names of all winners who played in both 2013 and 2016.", "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "pred": "SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2013 INTERSECT SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.year = 2016", "tokens": ["select", "winner_name", "from", "matches", "where", "year", "=", "2013", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "2016"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What are the names of players who won in both 2013 and 2016?", "gold": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "pred": "SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE STRFTIME('%Y', T2.tourney_date) = '2013' INTERSECT SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE STRFTIME('%Y', T2.tourney_date) = '", "tokens": ["select", "winner_name", "from", "matches", "where", "year", "=", "2013", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "2016"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "wta_1", "question": "List the number of all matches who played in years of 2013 or 2016.", "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "pred": "SELECT COUNT(DISTINCT T1.match_num) FROM matches AS T1 INNER JOIN players AS T2 ON T2.player_id = T1.loser_id WHERE T1.year = 2013 INTERSECT SELECT COUNT(DISTINCT T1.match_num) FROM matches AS T1 INNER JOIN players AS T2 ON T2.player_id = T1.loser_id WHERE T1.year = 2016", "tokens": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "2013", "or", "year", "=", "2016"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "wta_1", "question": "How many matches were played in 2013 or 2016?", "gold": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "pred": "SELECT COUNT(DISTINCT match_num) FROM matches WHERE YEAR = 2013 INTERSECT SELECT COUNT(DISTINCT match_num) FROM matches WHERE YEAR = 2016", "tokens": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "2013", "or", "year", "=", "2016"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "pred": "SELECT T1.country_code, T1.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'", "tokens": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"WTA Championships\"", "intersect", "select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"Australian Open\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 41, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 4, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "pred": "SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'", "tokens": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"WTA Championships\"", "intersect", "select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"Australian Open\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 41, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 4, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the first name and country code of the oldest player.", "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "pred": "SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking DESC LIMIT 1", "tokens": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What is the first name and country code of the oldest player?", "gold": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "pred": "SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.loser_id WHERE T2.loser_age = ( SELECT MAX(loser_age) FROM matches )", "tokens": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "List the first and last name of all players in the order of birth date.", "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "pred": "SELECT first_name, last_name FROM players ORDER BY birth_date", "tokens": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What are the full names of all players, sorted by birth date?", "gold": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "pred": "SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN players AS T2 ON T1.birth_date = T2.birth_date ORDER BY T1.birth_date", "tokens": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "List the first and last name of all players who are left / L hand in the order of birth date.", "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "pred": "SELECT T2.first_name, T2.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T2.loser_id = T1.player_id WHERE T1.hand = 'L'", "tokens": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "\"L\"", "order", "by", "birth_date"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 13, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What are the full names of all left handed players, in order of birth date?", "gold": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "pred": "SELECT first_name, last_name FROM players WHERE hand = 'left' ORDER BY birth_date", "tokens": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "\"L\"", "order", "by", "birth_date"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 13, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the first name and country code of the player who did the most number of tours.", "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "pred": "SELECT T2.first_name, T2.country_code FROM rankings AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id ORDER BY T1.tours DESC LIMIT 1", "tokens": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "order", "by", "t2.tours", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What is the first name and country code of the player with the most tours?", "gold": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "pred": "SELECT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1", "tokens": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "order", "by", "t2.tours", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the year that has the most number of matches.", "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT COUNT(year) FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1", "tokens": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "Which year had the most matches?", "gold": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT year FROM matches GROUP BY year ORDER BY COUNT(year) DESC LIMIT 1", "tokens": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "Find the name and rank points of the winner who won the most times.", "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.first_name, T1.last_name, T3.ranking_points FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id INNER JOIN rankings AS T3 ON T1.player_id = T3.player_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(T2.winner_id) DESC LIMIT 1", "tokens": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 18, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "gold": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id GROUP BY T2.winner_id ORDER BY COUNT(T2.match_num) DESC LIMIT 1", "tokens": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 18, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "pred": "SELECT T2.winner_name FROM rankings AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open' ORDER BY T1.ranking_points DESC LIMIT 1", "tokens": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "\"Australian Open\"", "order", "by", "winner_rank_points", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "gold": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "pred": "SELECT T1.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T2.player_id = T1.winner_id WHERE T1.tourney_name = 'Australian Open' GROUP BY T1.winner_name ORDER BY T2.winner_rank_points DESC LIMIT 1", "tokens": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "\"Australian Open\"", "order", "by", "winner_rank_points", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "wta_1", "question": "find the names of loser and winner who played in the match with greatest number of minutes.", "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "pred": "SELECT T1.loser_name, T1.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.loser_id = T2.player_id INNER JOIN players AS T3 ON T1.winner_id = T3.player_id WHERE T1.minutes = ( SELECT MAX(minutes) FROM matches )", "tokens": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What are the names of the winner and loser who played in the longest match?", "gold": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "pred": "SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T2.winner_id = T1.player_id WHERE T2.minutes = ( SELECT MAX(minutes) FROM matches )", "tokens": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the average ranking for each player and their first name.", "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "pred": "SELECT AVG(r.ranking) AS avg_ranking, p.first_name FROM rankings r INNER JOIN players p ON r.player_id = p.player_id GROUP BY p.first_name", "tokens": ["select", "avg", "(", "ranking", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "What are the first names of all players, and their average rankings?", "gold": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "pred": "SELECT T2.first_name FROM rankings AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name", "tokens": ["select", "avg", "(", "ranking", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "Find the total ranking points for each player and their first name.", "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "pred": "SELECT T2.first_name, SUM(T2.ranking_points) FROM rankings AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name", "tokens": ["select", "sum", "(", "ranking_points", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "What are the first names of all players, and their total ranking points?", "gold": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "pred": "SELECT T1.first_name, SUM(T2.ranking_points) FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name", "tokens": ["select", "sum", "(", "ranking_points", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "find the number of players for each country.", "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "pred": "SELECT COUNT(T1.country_code),  T1.country_code FROM players AS T1 GROUP BY T1.country_code", "tokens": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "How many players are from each country?", "gold": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "pred": "SELECT COUNT(DISTINCT T1.country_code) FROM players AS T1 GROUP BY T1.country_code", "tokens": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "find the code of the country where has the greatest number of players.", "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.country_code FROM players AS T1 GROUP BY T1.country_code ORDER BY COUNT(T1.country_code) DESC LIMIT 1", "tokens": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "What is the code of the country with the most players?", "gold": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.country_code ORDER BY COUNT(T2.country_code) DESC LIMIT 1", "tokens": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "Find the codes of countries that have more than 50 players.", "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "pred": "SELECT T2.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.loser_id GROUP BY T2.country_code HAVING COUNT(T2.country_code) > 50", "tokens": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "50"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "What are the codes of countries with more than 50 players?", "gold": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "pred": "SELECT T1.country_code FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.country_code HAVING COUNT(T2.player_id) > 50", "tokens": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "50"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "Find the total number of tours for each ranking date.", "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "pred": "SELECT COUNT(T1.tours) FROM rankings AS T1 INNER JOIN rankings AS T2 ON T1.ranking_date = T2.ranking_date GROUP BY T1.ranking_date", "tokens": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "How many total tours were there for each ranking date?", "gold": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "pred": "SELECT T1.ranking_date, COUNT(T1.tours) FROM rankings AS T1 GROUP BY T1.ranking_date", "tokens": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "Find the number of matches happened in each year.", "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "pred": "SELECT COUNT(DISTINCT YEAR) FROM matches", "tokens": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "How many matches were played in each year?", "gold": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "pred": "SELECT year FROM matches GROUP BY year", "tokens": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "Find the name and rank of the 3 youngest winners across all matches.", "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "pred": "SELECT T2.first_name, T2.last_name, T1.ranking FROM rankings AS T1 INNER JOIN players AS T2 ON T2.player_id = T1.player_id WHERE T1.year = 2011 ORDER BY T2.hand = 'right' DESC, T1.ranking_points DESC LIMIT 3", "tokens": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "3"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What are the names and ranks of the three youngest winners across all matches?", "gold": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "pred": "SELECT T1.first_name, T1.last_name FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_age LIMIT 3", "tokens": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "3"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "How many different winners both participated in the WTA Championships and were left handed?", "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "pred": "SELECT DISTINCT T1.winner_name FROM matches AS T1 INNER JOIN players AS T2 ON T1.winner_id = T2.player_id WHERE T2.hand = 'L' AND T1.tourney_name = 'WTA Championships'", "tokens": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "\"WTA Championships\"", "and", "winner_hand", "=", "\"L\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the number of left handed winners who participated in the WTA Championships.", "gold": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "pred": "SELECT COUNT(T1.hand) FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'Left' AND T2.tourney_name = 'WTA Championships'", "tokens": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "\"WTA Championships\"", "and", "winner_hand", "=", "\"L\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "pred": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id", "tokens": ["select", "t1.first_name", ",", "t1.country_code", ",", "t1.birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "order", "by", "t2.winner_rank_points", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "gold": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "pred": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 INNER JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.ranking_points DESC LIMIT 1", "tokens": ["select", "t1.first_name", ",", "t1.country_code", ",", "t1.birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "order", "by", "t2.winner_rank_points", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "wta_1", "question": "Find the number of players for each hand type.", "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand", "pred": "SELECT COUNT(player_id) FROM players WHERE hand = 'Right' INTERSECT SELECT COUNT(player_id) FROM players WHERE hand = 'Left'", "tokens": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "wta_1", "question": "How many players are there for each hand type?", "gold": "SELECT count(*) ,  hand FROM players GROUP BY hand", "pred": "SELECT COUNT(hand) FROM players GROUP BY hand", "tokens": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "battle_death", "question": "How many ships ended up being 'Captured'?", "gold": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "pred": "SELECT COUNT(T1.id) FROM ship AS T1 INNER JOIN death AS T2 ON T1.id = T2.caused_by_ship_id WHERE T1.disposition_of_ship = 'Captured'", "tokens": ["select", "count", "(", "*", ")", "from", "ship", "where", "disposition_of_ship", "=", "\"Captured\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "battle_death", "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "gold": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "pred": "SELECT T1.name, T1.tonnage FROM ship AS T1 ORDER BY T1.name DESC", "tokens": ["select", "name", ",", "tonnage", "from", "ship", "order", "by", "name", "desc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "battle_death", "question": "List the name, date and result of each battle.", "gold": "SELECT name ,  date FROM battle", "pred": "SELECT T2.name, T2.date, T2.result FROM death AS T1 INNER JOIN battle AS T2 ON T2.id = T1.caused_by_ship_id", "tokens": ["select", "name", ",", "date", "from", "battle"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "battle_death", "question": "What is maximum and minimum death toll caused each time?", "gold": "SELECT max(killed) ,  min(killed) FROM death", "pred": "SELECT MAX(killed) FROM death INTERSECT SELECT MIN(killed) FROM death", "tokens": ["select", "max", "(", "killed", ")", ",", "min", "(", "killed", ")", "from", "death"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "battle_death", "question": "What is the average number of injuries caused each time?", "gold": "SELECT avg(injured) FROM death", "pred": "SELECT AVG(injured) FROM death", "tokens": ["select", "avg", "(", "injured", ")", "from", "death"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "battle_death", "question": "What are the death and injury situations caused by the ship with tonnage 't'?", "gold": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "pred": "SELECT T1.killed FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'", "tokens": ["select", "t1.killed", ",", "t1.injured", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1.caused_by_ship_id", "=", "t2.id", "where", "t2.tonnage", "=", "\"t\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "battle_death", "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "gold": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "pred": "SELECT T1.name, T1.result FROM battle AS T1 INNER JOIN death AS T2 ON T1.id = T2.lost_in_battle WHERE T1.bulgarian_commander!= 'Boril'", "tokens": ["select", "name", ",", "result", "from", "battle", "where", "bulgarian_commander", "!=", "\"Boril\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "battle_death", "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "gold": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "pred": "SELECT T1.id, T1.name FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'", "tokens": ["select", "distinct", "t1.id", ",", "t1.name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.ship_type", "=", "\"Brig\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "battle_death", "question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "gold": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "pred": "SELECT T1.id, T1.name FROM battle AS T1 INNER JOIN death AS T2 ON T2.caused_by_ship_id = T1.id GROUP BY T1.id HAVING SUM(T2.killed) > 10", "tokens": ["select", "t1.id", ",", "t1.name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "join", "death", "as", "t3", "on", "t2.id", "=", "t3.caused_by_ship_id", "group", "by", "t1.id", "having", "sum", "(", "t3.killed", ")", ">", "10"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 34, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "battle_death", "question": "What is the ship id and name that caused most total injuries?", "gold": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.id, T2.name FROM death AS T1 INNER JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id, T2.name ORDER BY SUM(T1.injured) DESC LIMIT 1", "tokens": ["select", "t2.id", ",", "t2.name", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1.caused_by_ship_id", "=", "t2.id", "group", "by", "t2.id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "battle_death", "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "gold": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "pred": "SELECT DISTINCT T2.name FROM death AS T1 INNER JOIN battle AS T2 ON T1.caused_by_ship_id = T2.id WHERE T1.caused_by_ship_id = 107 AND T1.killed = 104 AND T2.latin_commander = 'Baldwin I'", "tokens": ["select", "name", "from", "battle", "where", "bulgarian_commander", "=", "\"Kaloyan\"", "and", "latin_commander", "=", "\"Baldwin I\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "battle_death", "question": "How many different results are there for the battles?", "gold": "SELECT count(DISTINCT RESULT) FROM battle", "pred": "SELECT COUNT(DISTINCT T2.result) FROM ship AS T1 INNER JOIN battle AS T2 ON T1.lost_in_battle = T2.id", "tokens": ["select", "count", "(", "distinct", "result", ")", "from", "battle"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "battle_death", "question": "How many battles did not lose any ship with tonnage '225'?", "gold": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "pred": "SELECT COUNT(DISTINCT T1.id) FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.tonnage!= '225'", "tokens": ["select", "count", "(", "*", ")", "from", "battle", "where", "id", "not", "in", "(", "select", "lost_in_battle", "from", "ship", "where", "tonnage", "=", "\"225\"", ")", ";"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "battle_death", "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "gold": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "pred": "SELECT T1.name, T1.date FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name, T1.date FROM battle AS T1 INNER JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'", "tokens": ["select", "t1.name", ",", "t1.date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.name", "=", "\"Lettice\"", "intersect", "select", "t1.name", ",", "t1.date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.name", "=", "\"HMS Atalanta\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 41, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 4, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "battle_death", "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "gold": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "pred": "SELECT T2.name, T2.result, T2.bulgarian_commander FROM death AS T1 INNER JOIN battle AS T2 ON T2.id = T1.lost_in_battle WHERE T2.location = 'English Channel'", "tokens": ["select", "name", ",", "result", ",", "bulgarian_commander", "from", "battle", "except", "select", "t1.name", ",", "t1.result", ",", "t1.bulgarian_commander", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.location", "=", "\"English Channel\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 31, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 6, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "battle_death", "question": "What are the notes of the death events which has substring 'East'?", "gold": "SELECT note FROM death WHERE note LIKE '%East%'", "pred": "SELECT T2.note FROM battle AS T1 INNER JOIN death AS T2 ON T1.id = T2.lost_in_battle WHERE T1.result LIKE '%East%'", "tokens": ["select", "note", "from", "death", "where", "note", "like", "\"%East%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "what are all the addresses including line 1 and line 2?", "gold": "SELECT line_1 ,  line_2 FROM addresses", "pred": "SELECT T1.line_1, T1.line_2 FROM addresses AS T1", "tokens": ["select", "line_1", ",", "line_2", "from", "addresses"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the first and second line for all addresses?", "gold": "SELECT line_1 ,  line_2 FROM addresses", "pred": "SELECT line_1, line_2 FROM addresses", "tokens": ["select", "line_1", ",", "line_2", "from", "addresses"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many courses in total are listed?", "gold": "SELECT count(*) FROM Courses", "pred": "SELECT COUNT(course_id) FROM courses", "tokens": ["select", "count", "(", "*", ")", "from", "courses"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many courses are there?", "gold": "SELECT count(*) FROM Courses", "pred": "SELECT COUNT(course_id) FROM courses", "tokens": ["select", "count", "(", "*", ")", "from", "courses"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How is the math course described?", "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "pred": "SELECT T3.course_description FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id INNER JOIN departments AS T3 ON T1.department_id = T3.department_id WHERE T1.course_name ='math'", "tokens": ["select", "course_description", "from", "courses", "where", "course_name", "=", "\"math\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are the descriptions for all the math courses?", "gold": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "pred": "SELECT T3.course_description FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id INNER JOIN departments AS T3 ON T1.department_id = T3.department_id WHERE T3.department_name = 'Math'", "tokens": ["select", "course_description", "from", "courses", "where", "course_name", "=", "\"math\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the zip code of the address in the city Port Chelsea?", "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "pred": "SELECT T1.zip_postcode FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id WHERE T2.city = 'Port Chelsea'", "tokens": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "\"Port Chelsea\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the zip code for Port Chelsea?", "gold": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "pred": "SELECT T1.zip_postcode FROM addresses AS T1 INNER JOIN other_address_details AS T2 ON T1.address_id = T2.address_id WHERE T2.port_chelsea = '1'", "tokens": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "\"Port Chelsea\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "Which department offers the most number of degrees? List department name and id.", "gold": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.department_name, T1.department_id FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(T1.department_id) DESC LIMIT 1", "tokens": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the name and id of the department with the most number of degrees ?", "gold": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "pred": "SELECT T2.department_name, T2.department_id FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_id ORDER BY COUNT(T1.degree_program_id) DESC LIMIT 1", "tokens": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "How many departments offer any degree?", "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "pred": "SELECT COUNT(DISTINCT T2.department_id) FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id", "tokens": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many different departments offer degrees?", "gold": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "pred": "SELECT COUNT(DISTINCT T1.department_id) FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id", "tokens": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many different degree names are offered?", "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "pred": "SELECT COUNT(DISTINCT T2.degree_summary_name) FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id", "tokens": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many different degrees are offered?", "gold": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "pred": "SELECT COUNT(degree_summary_name) FROM degree_programs", "tokens": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many degrees does the engineering department offer?", "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "pred": "SELECT COUNT(degree_program_id) FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Engineering'", "tokens": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "where", "t1.department_name", "=", "\"engineer\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many degrees does the engineering department have?", "gold": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "pred": "SELECT COUNT(DISTINCT T1.degree_summary_name) FROM degree_programs AS T1 INNER JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Engineering'", "tokens": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "where", "t1.department_name", "=", "\"engineer\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are the names and descriptions of all the sections?", "gold": "SELECT section_name ,  section_description FROM Sections", "pred": "SELECT T1.section_name, T1.section_description FROM sections AS T1", "tokens": ["select", "section_name", ",", "section_description", "from", "sections"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are the names and descriptions for all the sections?", "gold": "SELECT section_name ,  section_description FROM Sections", "pred": "SELECT T2.section_name, T2.section_description FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id", "tokens": ["select", "section_name", ",", "section_description", "from", "sections"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are the names and id of courses having at most 2 sections?", "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "pred": "SELECT T1.course_name FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(T2.course_id) <= 2", "tokens": ["select", "t1.course_name", ",", "t1.course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_id", "having", "count", "(", "*", ")", "<=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What are the names and ids of every course with less than 2 sections?", "gold": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "pred": "SELECT T1.course_name, T1.course_id FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(T2.section_id) < 2", "tokens": ["select", "t1.course_name", ",", "t1.course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_id", "having", "count", "(", "*", ")", "<=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "List the section_name in reversed lexicographical order.", "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC", "pred": "SELECT T1.section_name FROM sections AS T1 ORDER BY T1.section_name DESC", "tokens": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are the names of the sections in reverse alphabetical order?", "gold": "SELECT section_name FROM Sections ORDER BY section_name DESC", "pred": "SELECT T2.section_name FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id", "tokens": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the semester which most student registered in? Show both the name and the id.", "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.semester_name, T1.semester_id FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(T1.semester_id) DESC LIMIT 1", "tokens": ["select", "t1.semester_name", ",", "t1.semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.semester_id", "=", "t2.semester_id", "group", "by", "t1.semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "For each semester, what is the name and id of the one with the most students registered?", "gold": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.semester_name, T2.semester_id FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T2.semester_id ORDER BY COUNT(T1.student_id) DESC LIMIT 1", "tokens": ["select", "t1.semester_name", ",", "t1.semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.semester_id", "=", "t2.semester_id", "group", "by", "t1.semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the description of the department whose name has the substring the computer?", "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "pred": "SELECT T2.department_description FROM departments AS T1 INNER JOIN courses AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name LIKE '%the computer%'", "tokens": ["select", "department_description", "from", "departments", "where", "department_name", "like", "\"%computer%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the department description for the one whose name has the word computer?", "gold": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "pred": "SELECT T2.department_description FROM departments AS T1 INNER JOIN degree_programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name LIKE '%computer%'", "tokens": ["select", "department_description", "from", "departments", "where", "department_name", "like", "\"%computer%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name, T2.degree_program_id FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T3.degree_program_id = T2.degree_program_id GROUP BY T1.first_name, T1.middle_name, T1.last_name, T2.degree_program_id HAVING COUNT(T2.degree_program_id) = 2", "tokens": ["select", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", "=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 30, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 4, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "gold": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id WHERE T2.degree_program_id = 2 GROUP BY T1.first_name, T1.middle_name, T1.last_name, T1.student_id", "tokens": ["select", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", "=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 30, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 4, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "pred": "SELECT T2.first_name, T2.middle_name, T2.last_name FROM degree_programs AS T1 INNER JOIN students AS T2 ON T1.degree_program_id = T2.student_id WHERE T1.degree_summary_name = 'Bachelor'", "tokens": ["select", "distinct", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "join", "degree_programs", "as", "t3", "on", "t2.degree_program_id", "=", "t3.degree_program_id", "where", "t3.degree_summary_name", "=", "\"Bachelor\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 31, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "gold": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id INNER JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors'", "tokens": ["select", "distinct", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "join", "degree_programs", "as", "t3", "on", "t2.degree_program_id", "=", "t3.degree_program_id", "where", "t3.degree_summary_name", "=", "\"Bachelor\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 31, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "Find the kind of program which most number of students are enrolled in?", "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(T1.student_id) DESC LIMIT 1", "tokens": ["select", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the degree summary name that has the most number of students enrolled?", "gold": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.degree_summary_name FROM student_enrolment AS T1 INNER JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY COUNT(T2.degree_summary_name) DESC LIMIT 1", "tokens": ["select", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.degree_program_id, T1.degree_summary_name FROM degree_programs AS T1 INNER JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(T1.degree_program_id) DESC LIMIT 1", "tokens": ["select", "t1.degree_program_id", ",", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the program id and the summary of the degree that has the most students enrolled?", "gold": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.degree_program_id, T1.degree_summary_name FROM degree_programs AS T1 INNER JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "tokens": ["select", "t1.degree_program_id", ",", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(T2.student_id) AS num_enrollments FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "tokens": ["select", "t1.student_id", ",", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "count", "(", "*", ")", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 39, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 2, "num_select_cols": 6, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "gold": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(T2.student_id) FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "tokens": ["select", "t1.student_id", ",", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "count", "(", "*", ")", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 39, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 2, "num_select_cols": 6, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "Which semesters do not have any student enrolled? List the semester name.", "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "pred": "SELECT T1.semester_name FROM semesters AS T1 LEFT JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.semester_id IS NULL", "tokens": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the name of the semester with no students enrolled?", "gold": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "pred": "SELECT T2.semester_name FROM student_enrolment AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.student_id IS NULL", "tokens": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are all the course names of the courses which ever have students enrolled in?", "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "pred": "SELECT T2.course_name FROM student_enrolment_courses AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id", "tokens": ["select", "distinct", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are the names of all courses that have some students enrolled?", "gold": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "pred": "SELECT T1.course_name FROM courses AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id", "tokens": ["select", "distinct", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What's the name of the course with most number of enrollments?", "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.course_name FROM student_enrolment_courses AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_name ORDER BY COUNT(T2.course_id) DESC LIMIT 1", "tokens": ["select", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the name of the course with the most students enrolled?", "gold": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.course_name FROM courses AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY COUNT(T1.course_id) DESC LIMIT 1", "tokens": ["select", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "pred": "SELECT T1.last_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'North Carolina' EXCEPT SELECT T1.last_name FROM students AS T1 INNER JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id", "tokens": ["select", "t1.last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.current_address_id", "=", "t2.address_id", "where", "t2.state_province_county", "=", "\"NorthCarolina\"", "except", "select", "distinct", "t3.last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3.student_id", "=", "t4.student_id"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 34, "num_table_aliases": 4, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "gold": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "pred": "SELECT T2.last_name FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.state_province_county = 'North Carolina' EXCEPT SELECT T3.last_name FROM degree_programs AS T1 INNER JOIN student_enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id INNER JOIN students AS T3 ON T2.student_id = T3.student_id", "tokens": ["select", "t1.last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.current_address_id", "=", "t2.address_id", "where", "t2.state_province_county", "=", "\"NorthCarolina\"", "except", "select", "distinct", "t3.last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3.student_id", "=", "t4.student_id"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 34, "num_table_aliases": 4, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "Show the date and id of the transcript with at least 2 course results.", "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "pred": "SELECT T2.transcript_date, T2.transcript_id FROM student_enrolment_courses AS T1 INNER JOIN transcripts AS T2 ON T1.student_enrolment_id = T2.transcript_id GROUP BY T2.transcript_id HAVING COUNT(T1.student_enrolment_id) >= 2", "tokens": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the date and id of the transcript with at least 2 courses listed?", "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "pred": "SELECT DISTINCT T1.transcript_date, T1.transcript_id FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id, T1.transcript_date HAVING COUNT(T1.transcript_id) = 2", "tokens": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "gold": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "pred": "SELECT T2.cell_mobile_number FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T1.first_name = 'Timmothy' AND T1.last_name = 'Ward'", "tokens": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "\"Timmothy\"", "and", "last_name", "=", "\"Ward\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the mobile phone number of the student named Timmothy Ward ?", "gold": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "pred": "SELECT T1.cell_mobile_number FROM students AS T1 INNER JOIN students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = 'Timmothy' AND T2.middle_name = 'Ward'", "tokens": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "\"timmothy\"", "and", "last_name", "=", "\"ward\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "Who is the first student to register? List the first name, middle name and last name.", "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 WHERE T1.`date_first_registered` = ( SELECT MIN(T2.`date_first_registered`) FROM students AS T2 )", "tokens": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name of the first student to register?", "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "pred": "SELECT first_name, middle_name, last_name FROM students ORDER BY date_first_registered LIMIT 1", "tokens": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "pred": "SELECT T3.first_name, T3.middle_name, T3.last_name FROM semesters AS T1 INNER JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id INNER JOIN students AS T3 ON T2.student_id = T3.student_id WHERE T1.semester_name = 'Graduation' ORDER BY T3.date_first_registered LIMIT 1", "tokens": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name of the earliest school graduate?", "gold": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "pred": "SELECT T2.first_name, T2.middle_name, T2.last_name FROM student_enrolment AS T1 INNER JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.transcript_date LIMIT 1", "tokens": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "Whose permanent address is different from his or her current address? List his or her first name.", "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "pred": "SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T1.current_address_id!= T1.permanent_address_id", "tokens": ["select", "first_name", "from", "students", "where", "current_address_id", "!=", "permanent_address_id"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the first name of the student whose permanent address is different from his or her current one?", "gold": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "pred": "SELECT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.line_1!= T1.line_1", "tokens": ["select", "first_name", "from", "students", "where", "current_address_id", "!=", "permanent_address_id"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "Which address holds the most number of students currently? List the address id and all lines.", "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.address_id FROM addresses AS T1 INNER JOIN students AS T2 ON T2.current_address_id = T1.address_id GROUP BY T1.address_id ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "tokens": ["select", "t1.address_id", ",", "t1.line_1", ",", "t1.line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1.address_id", "=", "t2.current_address_id", "group", "by", "t1.address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 30, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the id, line 1, and line 2 of the address with the most students?", "gold": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(T1.address_id) DESC LIMIT 1", "tokens": ["select", "t1.address_id", ",", "t1.line_1", ",", "t1.line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1.address_id", "=", "t2.current_address_id", "group", "by", "t1.address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 30, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "On average, when were the transcripts printed?", "gold": "SELECT avg(transcript_date) FROM Transcripts", "pred": "SELECT CAST(SUM(transcript_date) AS REAL) / COUNT(transcript_id) FROM transcripts", "tokens": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the average transcript date?", "gold": "SELECT avg(transcript_date) FROM Transcripts", "pred": "SELECT AVG(T1.transcript_date) FROM transcripts AS T1", "tokens": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "When is the first transcript released? List the date and details.", "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "pred": "SELECT T1.transcript_date FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id ORDER BY T1.transcript_date LIMIT 1", "tokens": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the earliest date of a transcript release, and what details can you tell me?", "gold": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "pred": "SELECT MIN(T1.transcript_date), T1.other_details FROM transcripts AS T1", "tokens": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many transcripts are released?", "gold": "SELECT count(*) FROM Transcripts", "pred": "SELECT COUNT(transcript_id) FROM transcripts", "tokens": ["select", "count", "(", "*", ")", "from", "transcripts"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many transcripts are listed?", "gold": "SELECT count(*) FROM Transcripts", "pred": "SELECT COUNT(transcript_id) FROM transcripts", "tokens": ["select", "count", "(", "*", ")", "from", "transcripts"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the last transcript release date?", "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "pred": "SELECT MAX(transcript_date) FROM transcripts", "tokens": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "When was the last transcript released?", "gold": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "pred": "SELECT MAX(T2.transcript_date) FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id", "tokens": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT COUNT(DISTINCT T1.student_course_id),  T1.student_course_id FROM transcript_contents AS T1 INNER JOIN student_enrolment_courses AS T2 ON T1.student_course_id = T2.student_course_id", "tokens": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 21, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "gold": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT MAX(T1.course_id) FROM ( SELECT T1.course_id, COUNT(T2.transcript_id) AS num FROM courses AS T1 INNER JOIN transcript_contents AS T2 ON T1.course_id = T2.student_course_id GROUP BY T1.course_id ) AS T", "tokens": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 21, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "Show the date of the transcript which shows the least number of results, also list the id.", "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "pred": "SELECT T2.transcript_date FROM student_enrolment_courses AS T1 INNER JOIN transcripts AS T2 ON T1.student_course_id = T2.transcript_id GROUP BY T2.transcript_date ORDER BY COUNT(T1.student_course_id) LIMIT 1", "tokens": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "What is the date and id of the transcript with the least number of results?", "gold": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "pred": "SELECT T1.transcript_id, T1.transcript_date FROM transcripts AS T1 INNER JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(T2.student_course_id) ASC LIMIT 1", "tokens": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "student_transcripts_tracking", "question": "Find the semester when both Master students and Bachelor students got enrolled in.", "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "pred": "SELECT T2.semester_name FROM degree_programs AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.degree_summary_name = 'Master' INTERSECT SELECT T2.semester_name FROM degree_programs AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.degree_summary_name = 'Bachelor'", "tokens": ["select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"Master\"", "intersect", "select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"Bachelor\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 39, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "gold": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "pred": "SELECT T2.semester_id FROM degree_programs AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.degree_summary_name = 'Masters' INTERSECT SELECT T2.semester_id FROM degree_programs AS T1 INNER JOIN semesters AS T2 ON T1.semester_id = T2.semester_id WHERE T1.degree_summary_name = 'Bachelors'", "tokens": ["select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"Master\"", "intersect", "select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"Bachelor\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 39, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "How many different addresses do the students currently live?", "gold": "SELECT count(DISTINCT current_address_id) FROM Students", "pred": "SELECT COUNT(DISTINCT T1.current_address_id) FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.current_address_id", "tokens": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are the different addresses that have students living there?", "gold": "SELECT count(DISTINCT current_address_id) FROM Students", "pred": "SELECT DISTINCT T2.line_1 FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id", "tokens": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "List all the student details in reversed lexicographical order.", "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "pred": "SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 ORDER BY T1.first_name DESC, T1.middle_name DESC, T1.last_name DESC", "tokens": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What other details can you tell me about students in reverse alphabetical order?", "gold": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "pred": "SELECT other_student_details FROM students ORDER BY last_name DESC", "tokens": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "Describe the section h.", "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "pred": "SELECT T2.section_name FROM courses AS T1 INNER JOIN sections AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = 'h'", "tokens": ["select", "section_description", "from", "sections", "where", "section_name", "=", "\"h\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What is the description for the section named h?", "gold": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "pred": "SELECT T1.section_description FROM sections AS T1 INNER JOIN courses AS T2 ON T1.course_id = T2.course_id WHERE T1.section_name = 'h'", "tokens": ["select", "section_description", "from", "sections", "where", "section_name", "=", "\"h\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "pred": "SELECT T2.first_name FROM addresses AS T1 INNER JOIN students AS T2 ON T1.address_id = T2.permanent_address_id WHERE T1.country = 'Haiti' OR T2.cell_mobile_number = '09700166582'", "tokens": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "\"haiti\"", "or", "t1.cell_mobile_number", "=", "\"09700166582\""], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "student_transcripts_tracking", "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "gold": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "pred": "SELECT DISTINCT T1.first_name FROM students AS T1 INNER JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti' OR T1.cell_mobile_number = '09700166582'", "tokens": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "\"haiti\"", "or", "t1.cell_mobile_number", "=", "\"09700166582\""], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "tvshow", "question": "List the title of all cartoons in alphabetical order.", "gold": "SELECT Title FROM Cartoon ORDER BY title", "pred": "SELECT title FROM cartoon", "tokens": ["select", "title", "from", "cartoon", "order", "by", "title"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 7, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are the titles of the cartoons sorted alphabetically?", "gold": "SELECT Title FROM Cartoon ORDER BY title", "pred": "SELECT title FROM cartoon", "tokens": ["select", "title", "from", "cartoon", "order", "by", "title"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 7, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "List all cartoon directed by \"Ben Jones\".", "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "pred": "SELECT title FROM cartoon AS T1 INNER JOIN tv_series AS T2 ON T1.channel = T2.channel WHERE T1.directed_by = 'Ben Jones'", "tokens": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are the names of all cartoons directed by Ben Jones?", "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "pred": "SELECT T1.title FROM cartoon AS T1 INNER JOIN directed_by AS T2 ON T1.id = T2.cartoon_id WHERE T2.directed_by = 'Ben Jones'", "tokens": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "How many cartoons were written by \"Joseph Kuhr\"?", "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "pred": "SELECT COUNT(T2.title) FROM written_by AS T1 INNER JOIN cartoon AS T2 ON T1.channel = T2.channel WHERE T1.written_by = 'Joseph Kuhr'", "tokens": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "\"Joseph Kuhr\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the number of cartoones written by Joseph Kuhr?", "gold": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "pred": "SELECT COUNT(title) FROM cartoon AS T1 INNER JOIN written_by AS T2 ON T1.id = T2.id WHERE T2 = 'Joseph Kuhr'", "tokens": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "\"Joseph Kuhr\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "list all cartoon titles and their directors ordered by their air date", "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "pred": "SELECT T1.title, T1.directed_by FROM cartoon AS T1 INNER JOIN tv_series AS T2 ON T2.channel = T1.channel ORDER BY T1.original_air_date", "tokens": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the name and directors of all the cartoons that are ordered by air date?", "gold": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "pred": "SELECT T1.title, T1.directed_by FROM cartoon AS T1", "tokens": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "pred": "SELECT DISTINCT T2.title FROM cartoon AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.directed_by = 'Ben Jones' INTERSECT SELECT DISTINCT T2.title FROM cartoon AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.directed_by = 'Brandon Vietti'", "tokens": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", "or", "directed_by", "=", "\"Brandon Vietti\"", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 13, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "gold": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "pred": "SELECT T2.title FROM cartoon AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.directed_by = 'Ben Jones' OR T1.directed_by = 'Brandon Vietti'", "tokens": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", "or", "directed_by", "=", "\"Brandon Vietti\"", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 13, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "tvshow", "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "pred": "SELECT country, COUNT(id) FROM tv_channel GROUP BY country ORDER BY COUNT(id) DESC LIMIT 1", "tokens": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 22, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "tvshow", "question": "What is the country with the most number of TV Channels and how many does it have?", "gold": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "pred": "SELECT COUNT(T2.id), T2.country FROM tv_channel AS T1 INNER JOIN tv_channel AS T2 ON T1.id = T2.id GROUP BY T2.country ORDER BY COUNT(T2.id) DESC LIMIT 1", "tokens": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 22, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "tvshow", "question": "List the number of different series names and contents in the TV Channel table.", "gold": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "pred": "SELECT COUNT(DISTINCT series_name) FROM tv_channel", "tokens": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "How many different series and contents are listed in the TV Channel table?", "gold": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "pred": "SELECT COUNT(DISTINCT series_name) FROM tv_channel UNION SELECT COUNT(DISTINCT content) FROM tv_channel", "tokens": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "pred": "SELECT T2.content FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio'", "tokens": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "\"Sky Radio\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the content of the series Sky Radio?", "gold": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "pred": "SELECT T1.content FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T2.channel = 'Sky Radio'", "tokens": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "\"Sky Radio\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "pred": "SELECT T1.package_option FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T2.channel = T1.id WHERE T2.series_name = 'Sky Radio'", "tokens": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "\"Sky Radio\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "gold": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "pred": "SELECT T2.package_option FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio'", "tokens": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "\"Sky Radio\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "How many TV Channel using language English?", "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "pred": "SELECT COUNT(language) FROM tv_channel WHERE language = 'English'", "tokens": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "\"English\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "How many TV Channels use the English language?", "gold": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "pred": "SELECT COUNT(language) FROM tv_channel WHERE language = 'English'", "tokens": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "\"English\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "List the language used least number of TV Channel. List language and number of TV Channel.", "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "pred": "SELECT T1.language, COUNT(T1.id) FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T2.channel = T1.id GROUP BY T1.language ORDER BY COUNT(T1.id) LIMIT 1", "tokens": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 22, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "tvshow", "question": "What are the languages used by the least number of TV Channels and how many channels use it?", "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "pred": "SELECT T2.language FROM tv_channel AS T1 INNER JOIN ( SELECT T2.language, COUNT(T2.id) AS num FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel GROUP BY T2.language ORDER BY T2.language DESC LIMIT 1 ) AS T3 ON T1.language = T3.language", "tokens": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 22, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "tvshow", "question": "List each language and the number of TV Channels using it.", "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "pred": "SELECT T1.language, COUNT(T2.id) FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel GROUP BY T1.language", "tokens": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "tvshow", "question": "For each language, list the number of TV Channels that use it.", "gold": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "pred": "SELECT COUNT(T1.language) FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel GROUP BY T1.language", "tokens": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "tvshow", "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "pred": "SELECT T2.series_name FROM cartoon AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.title = 'The Rise of the Blue Beetle!'", "tokens": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.title", "=", "\"The Rise of the Blue Beetle!\"", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "pred": "SELECT T3.series_name FROM cartoon AS T1 INNER JOIN tv_channel AS T2 ON T2.id = T1.channel INNER JOIN tv_series AS T3 ON T3.channel = T2.id WHERE T1.title = 'The Rise of the Blue Beetle'", "tokens": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.title", "=", "\"The Rise of the Blue Beetle!\"", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "pred": "SELECT T2.title FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio'", "tokens": ["select", "t2.title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"Sky Radio\"", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "gold": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "pred": "SELECT T1.title FROM cartoon AS T1 INNER JOIN tv_channel AS T2 ON T2.id = T1.channel WHERE T2.series_name = 'Sky Radio'", "tokens": ["select", "t2.title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"Sky Radio\"", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "List the Episode of all TV series sorted by rating.", "gold": "SELECT Episode FROM TV_series ORDER BY rating", "pred": "SELECT T2.episode FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.language = 'English' GROUP BY T2.episode ORDER BY COUNT(T2.episode) DESC LIMIT 1", "tokens": ["select", "episode", "from", "tv_series", "order", "by", "rating"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 7, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are all of the episodes ordered by ratings?", "gold": "SELECT Episode FROM TV_series ORDER BY rating", "pred": "SELECT DISTINCT T1.episode FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T2.id = T1.channel", "tokens": ["select", "episode", "from", "tv_series", "order", "by", "rating"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 7, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "pred": "SELECT T2.episode, T2.rating FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.content = 'Drama' ORDER BY T2.rating DESC LIMIT 3", "tokens": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "3", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 13, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "gold": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "pred": "SELECT T2.episode, T2.rating FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel ORDER BY T2.rating DESC LIMIT 3", "tokens": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "3", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 13, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is minimum and maximum share of TV series?", "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "pred": "SELECT MIN(share) FROM tv_series", "tokens": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 13, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the maximum and minimum share for the TV series?", "gold": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "pred": "SELECT MAX(share) FROM tv_series", "tokens": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 13, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "pred": "SELECT T2.episode FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T2.episode = 'A Love of a Lifetime'", "tokens": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "\"A Love of a Lifetime\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "When did the episode \"A Love of a Lifetime\" air?", "gold": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "pred": "SELECT T2.air_date FROM cartoon AS T1 INNER JOIN tv_series AS T2 ON T1.channel = T2.channel WHERE T1.title = 'A Love of a Lifetime'", "tokens": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "\"A Love of a Lifetime\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "pred": "SELECT T2.weekly_rank FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.episode = 'A Love of a Lifetime'", "tokens": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "\"A Love of a Lifetime\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "gold": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "pred": "SELECT T2.weekly_rank FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T1.channel = T2.id WHERE T1.episode = 'A Love of a Lifetime'", "tokens": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "\"A Love of a Lifetime\"", ";"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "pred": "SELECT T2.channel FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T2.id = T1.channel WHERE T1.episode = 'A Love of a Lifetime'", "tokens": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.episode", "=", "\"A Love of a Lifetime\"", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "gold": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "pred": "SELECT T1.series_name FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T2.channel = T1.id WHERE T2.episode = 'A Love of a Lifetime'", "tokens": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.episode", "=", "\"A Love of a Lifetime\"", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "pred": "SELECT T2.episode FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio'", "tokens": ["select", "t2.episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"Sky Radio\"", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the episode for the TV series named \"Sky Radio\"?", "gold": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "pred": "SELECT T2.episode FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.series_name = 'Sky Radio'", "tokens": ["select", "t2.episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"Sky Radio\"", ";"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "Find the number of cartoons directed by each of the listed directors.", "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "pred": "SELECT COUNT(title) FROM cartoon AS T1 INNER JOIN cartoon AS T2 ON T1.directed_by = T2.directed_by WHERE T1.directed_by IN ('Darrell Van Citters', 'Brian Sheesley')", "tokens": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "tvshow", "question": "How many cartoons did each director create?", "gold": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "pred": "SELECT COUNT(T2.title) FROM directed_by AS T1  INNER JOIN cartoon AS T2  ON T1.id = T2.directed_by", "tokens": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "tvshow", "question": "Find the production code and channel of the most recently aired cartoon .", "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "pred": "SELECT T2.production_code, T2.channel FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel ORDER BY T2.original_air_date DESC LIMIT 1", "tokens": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the produdction code and channel of the most recent cartoon ?", "gold": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "pred": "SELECT T2.production_code, T2.channel FROM tv_series AS T1 INNER JOIN cartoon AS T2 ON T1.channel = T2.channel ORDER BY T1.id DESC LIMIT 1", "tokens": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "tvshow", "question": "Find the package choice and series name of the TV channel that has high definition TV.", "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "pred": "SELECT T1.package_option, T2.series_name FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.hight_definition_tv = 'TRUE'", "tokens": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "\"yes\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "gold": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "pred": "SELECT T1.package_option, T2.series_name FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.hight_definition_tv = 'Yes'", "tokens": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "\"yes\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "pred": "SELECT T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.written_by = 'Todd Casey'", "tokens": ["select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"Todd Casey\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "gold": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "pred": "SELECT T3.country FROM tv_series AS T1 INNER JOIN tv_channel AS T2 ON T2.id = T1.channel INNER JOIN cartoon AS T3 ON T3.channel = T2.id WHERE T1.written_by = 'Todd Casey'", "tokens": ["select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"Todd Casey\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "pred": "SELECT T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T2.channel = T1.id WHERE T2.written_by = 'Todd Casey'", "tokens": ["select", "country", "from", "tv_channel", "except", "select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"Todd Casey\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 23, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are the countries that are not playing cartoons written by Todd Casey?", "gold": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "pred": "SELECT DISTINCT T2.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.written_by = 'Todd Casey'", "tokens": ["select", "country", "from", "tv_channel", "except", "select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"Todd Casey\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 23, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "pred": "SELECT T1.series_name, T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Ben Jones' INTERSECT SELECT T1.series_name, T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Michael Chang'", "tokens": ["select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"Michael Chang\"", "intersect", "select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"Ben Jones\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 41, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 4, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "gold": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "pred": "SELECT T1.series_name, T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Ben Jones' INTERSECT SELECT T1.series_name, T1.country FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by = 'Michael Chang'", "tokens": ["select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"Michael Chang\"", "intersect", "select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"Ben Jones\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 41, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 4, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "tvshow", "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "pred": "SELECT T1.pixel_aspect_ratio_par, T2.country FROM tv_channel AS T1 INNER JOIN tv_series AS T2 ON T1.id = T2.channel WHERE T1.language!= 'English'", "tokens": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!=", "\"English\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "gold": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "pred": "SELECT T1.pixel_aspect_ratio_par, T1.country FROM tv_channel AS T1 WHERE T1.language!= 'English'", "tokens": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!=", "\"English\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "find id of the tv channels that from the countries where have more than two tv channels.", "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "pred": "SELECT T2.id FROM tv_channel AS T1 INNER JOIN tv_channel AS T2 ON T1.country = T2.country WHERE T1.id!= T2.id GROUP BY T2.id HAVING COUNT(T2.id) > 2", "tokens": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "2"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "tvshow", "question": "What are the ids of all tv channels that have more than 2 TV channels?", "gold": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "pred": "SELECT id FROM tv_channel GROUP BY id HAVING COUNT(id) > 2", "tokens": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "2"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "tvshow", "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "pred": "SELECT DISTINCT T1.id FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by!= 'Ben Jones'", "tokens": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 13, "num_table_aliases": 2, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "gold": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "pred": "SELECT T1.id FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by!= 'Ben Jones'", "tokens": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 13, "num_table_aliases": 2, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "pred": "SELECT T1.package_option FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T2.channel = T1.id WHERE T2.directed_by!= 'Ben Jones'", "tokens": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "tvshow", "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "gold": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "pred": "SELECT T1.package_option FROM tv_channel AS T1 INNER JOIN cartoon AS T2 ON T1.id = T2.channel WHERE T2.directed_by!= 'Ben Jones'", "tokens": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "poker_player", "question": "How many poker players are there?", "gold": "SELECT count(*) FROM poker_player", "pred": "SELECT COUNT(poker_player_id) FROM poker_player", "tokens": ["select", "count", "(", "*", ")", "from", "poker_player"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Count the number of poker players.", "gold": "SELECT count(*) FROM poker_player", "pred": "SELECT COUNT(poker_player_id) FROM poker_player", "tokens": ["select", "count", "(", "*", ")", "from", "poker_player"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "List the earnings of poker players in descending order.", "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "pred": "SELECT T1.earnings FROM poker_player AS T1", "tokens": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What are the earnings of poker players, ordered descending by value?", "gold": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "pred": "SELECT T1.earnings FROM poker_player AS T1 ORDER BY T1.earnings DESC", "tokens": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "List the final tables made and the best finishes of poker players.", "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "pred": "SELECT T1.final_table_made, T1.best_finish FROM poker_player AS T1", "tokens": ["select", "final_table_made", ",", "best_finish", "from", "poker_player"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What are the final tables made and best finishes for all poker players?", "gold": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "pred": "SELECT T1.final_table_made, T1.best_finish FROM poker_player AS T1", "tokens": ["select", "final_table_made", ",", "best_finish", "from", "poker_player"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What is the average earnings of poker players?", "gold": "SELECT avg(Earnings) FROM poker_player", "pred": "SELECT AVG(T2.earnings) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id", "tokens": ["select", "avg", "(", "earnings", ")", "from", "poker_player"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Return the average earnings across all poker players.", "gold": "SELECT avg(Earnings) FROM poker_player", "pred": "SELECT AVG(T1.earnings) FROM poker_player AS T1 GROUP BY T1.earnings", "tokens": ["select", "avg", "(", "earnings", ")", "from", "poker_player"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What is the money rank of the poker player with the highest earnings?", "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "pred": "SELECT T1.money_rank FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC LIMIT 1", "tokens": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Return the money rank of the player with the greatest earnings.", "gold": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "pred": "SELECT MAX(money_rank) FROM poker_player", "tokens": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "pred": "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000", "tokens": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "200000"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "gold": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "pred": "SELECT MAX(final_table_made) FROM poker_player WHERE earnings < 200000", "tokens": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "200000"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What are the names of poker players?", "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "pred": "SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id", "tokens": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Return the names of all the poker players.", "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "pred": "SELECT T1.name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id", "tokens": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What are the names of poker players whose earnings is higher than 300000?", "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "pred": "SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.earnings > 300000", "tokens": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t2.earnings", ">", "300000"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Give the names of poker players who have earnings above 300000.", "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "pred": "SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.earnings > 300000", "tokens": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t2.earnings", ">", "300000"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "poker_player", "question": "List the names of poker players ordered by the final tables made in ascending order.", "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "pred": "SELECT T1.name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id ORDER BY T2.final_table_made ASC", "tokens": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.final_table_made"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 17, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "pred": "SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.final_table_made ASC", "tokens": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.final_table_made"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 17, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What is the birth date of the poker player with the lowest earnings?", "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "pred": "SELECT T2.birth_date FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings ASC LIMIT 1", "tokens": ["select", "t1.birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "asc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Return the birth date of the poker player with the lowest earnings.", "gold": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "pred": "SELECT T2.birth_date FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings LIMIT 1", "tokens": ["select", "t1.birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "asc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What is the money rank of the tallest poker player?", "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "pred": "SELECT T1.money_rank FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T2.height DESC LIMIT 1", "tokens": ["select", "t2.money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t1.height", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Return the money rank of the poker player with the greatest height.", "gold": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "pred": "SELECT T1.money_rank FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T2.height DESC LIMIT 1", "tokens": ["select", "t2.money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t1.height", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What is the average earnings of poker players with height higher than 200?", "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "pred": "SELECT SUM(T1.earnings) / COUNT(T1.earnings) FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.height > 200", "tokens": ["select", "avg", "(", "t2.earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t1.height", ">", "200"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Give average earnings of poker players who are taller than 200.", "gold": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "pred": "SELECT AVG(T2.earnings) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id WHERE T1.height > 200", "tokens": ["select", "avg", "(", "t2.earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t1.height", ">", "200"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What are the names of poker players in descending order of earnings?", "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "pred": "SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC", "tokens": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "desc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Return the names of poker players sorted by their earnings descending.", "gold": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "pred": "SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.earnings DESC", "tokens": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "desc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What are different nationalities of people and the corresponding number of people from each nation?", "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "pred": "SELECT DISTINCT T1.nationality, COUNT(T1.people_id) FROM people AS T1 GROUP BY T1.nationality", "tokens": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "poker_player", "question": "How many people are there of each nationality?", "gold": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "pred": "SELECT COUNT(DISTINCT T1.nationality) FROM people AS T1 GROUP BY T1.nationality", "tokens": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "poker_player", "question": "What is the most common nationality of people?", "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T1.nationality FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id GROUP BY T1.nationality ORDER BY COUNT(T1.nationality) DESC LIMIT 1", "tokens": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "poker_player", "question": "Give the nationality that is most common across all people.", "gold": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T2.nationality FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id GROUP BY T2.nationality ORDER BY COUNT(T1.people_id) DESC LIMIT 1", "tokens": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "poker_player", "question": "What are the nationalities that are shared by at least two people?", "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "pred": "SELECT T1.nationality FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id GROUP BY T1.nationality HAVING COUNT(T1.people_id) > 1", "tokens": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "poker_player", "question": "Return the nationalities for which there are two or more people.", "gold": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "pred": "SELECT T1.nationality FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id GROUP BY T1.nationality HAVING COUNT(T1.people_id) > 1", "tokens": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "poker_player", "question": "List the names and birth dates of people in ascending alphabetical order of name.", "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "pred": "SELECT T1.name, T1.birth_date FROM people AS T1 ORDER BY T1.name ASC", "tokens": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "gold": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "pred": "SELECT T2.name, T2.birth_date FROM people AS T2 ORDER BY T2.name", "tokens": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Show names of people whose nationality is not \"Russia\".", "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "pred": "SELECT T2.name FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id WHERE T1.nationality!= 'Russia'", "tokens": ["select", "name", "from", "people", "where", "nationality", "!=", "\"Russia\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What are the names of people who are not from Russia?", "gold": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "pred": "SELECT T2.name FROM poker_player AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.nationality!= 'Russia'", "tokens": ["select", "name", "from", "people", "where", "nationality", "!=", "\"Russia\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "poker_player", "question": "List the names of people that are not poker players.", "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "pred": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM poker_player )", "tokens": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "What are the names of people who do not play poker?", "gold": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "pred": "SELECT name FROM people WHERE people_id NOT IN ( SELECT people_id FROM poker_player )", "tokens": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "How many distinct nationalities are there?", "gold": "SELECT count(DISTINCT Nationality) FROM people", "pred": "SELECT COUNT(DISTINCT T1.nationality) FROM people AS T1", "tokens": ["select", "count", "(", "distinct", "nationality", ")", "from", "people"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "poker_player", "question": "Count the number of different nationalities.", "gold": "SELECT count(DISTINCT Nationality) FROM people", "pred": "SELECT COUNT(DISTINCT T2.nationality) FROM people AS T1 INNER JOIN poker_player AS T2 ON T1.people_id = T2.people_id", "tokens": ["select", "count", "(", "distinct", "nationality", ")", "from", "people"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the names of all the countries that became independent after 1950?", "gold": "SELECT Name FROM country WHERE IndepYear  >  1950", "pred": "SELECT DISTINCT T2.name FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.indepyear > 1950", "tokens": ["select", "name", "from", "country", "where", "indepyear", ">", "1950"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the names of the nations that were founded after 1950.", "gold": "SELECT Name FROM country WHERE IndepYear  >  1950", "pred": "SELECT T2.name FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.indepyear > 1950", "tokens": ["select", "name", "from", "country", "where", "indepyear", ">", "1950"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many countries have a republic as their form of government?", "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "pred": "SELECT COUNT(*) FROM country WHERE governmentform = 'Republic'", "tokens": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "\"Republic\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many countries have governments that are republics?", "gold": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "pred": "SELECT COUNT(code) FROM country WHERE governmentform = 'Republic'", "tokens": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "\"Republic\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the total surface area of the countries in the Caribbean region?", "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "pred": "SELECT SUM(surfacearea) FROM country WHERE region = 'Caribbean'", "tokens": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "\"Caribbean\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How much surface area do the countires in the Carribean cover together?", "gold": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "pred": "SELECT SUM(surfacearea) FROM country WHERE region = 'Carribean'", "tokens": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "\"Caribbean\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which continent is Anguilla in?", "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "pred": "SELECT T2.continent FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Anguilla'", "tokens": ["select", "continent", "from", "country", "where", "name", "=", "\"Anguilla\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the continent name which Anguilla belongs to?", "gold": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "pred": "SELECT T2.continent FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Anguilla'", "tokens": ["select", "continent", "from", "country", "where", "name", "=", "\"Anguilla\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which region is the city Kabul located in?", "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "pred": "SELECT T2.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Kabul'", "tokens": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.name", "=", "\"Kabul\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What region is Kabul in?", "gold": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "pred": "SELECT T2.region FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.name = 'Kabul'", "tokens": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.name", "=", "\"Kabul\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which language is the most popular in Aruba?", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "pred": "SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Aruba' GROUP BY T2.language ORDER BY T2.percentage DESC LIMIT 1", "tokens": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Aruba\"", "order", "by", "percentage", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What language is predominantly spoken in Aruba?", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "pred": "SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Aruba' ORDER BY T2.percentage DESC LIMIT 1", "tokens": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Aruba\"", "order", "by", "percentage", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the population and life expectancies in Brazil?", "gold": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "pred": "SELECT T2.population, T2.lifeexpectancy FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Brazil'", "tokens": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "\"Brazil\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give me Brazil\u2019s population and life expectancies.", "gold": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "pred": "SELECT T1.population, T1.lifeexpectancy FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Brazil'", "tokens": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "\"Brazil\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the region and population of Angola?", "gold": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "pred": "SELECT T2.region, T2.population FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.name = 'Angola'", "tokens": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "\"Angola\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What region does Angola belong to and what is its population?", "gold": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "pred": "SELECT T2.region, T1.population FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Angola'", "tokens": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "\"Angola\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the average expected life expectancy for countries in the region of Central Africa?", "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "pred": "SELECT AVG(lifeexpectancy) FROM country WHERE region = 'Central Africa'", "tokens": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "\"Central Africa\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How long is the people\u2019s average life expectancy in Central Africa?", "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "pred": "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Central Africa'", "tokens": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "\"Central Africa\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the name of country that has the shortest life expectancy in Asia?", "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "pred": "SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.continent = 'Asia' AND T1.percentage = ( SELECT MIN(percentage) FROM countrylanguage WHERE countrycode IN ( SELECT code FROM country WHERE continent = 'Asia' ) )", "tokens": ["select", "name", "from", "country", "where", "continent", "=", "\"Asia\"", "order", "by", "lifeexpectancy", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 13, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the name of the country in Asia with the lowest life expectancy.", "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "pred": "SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' AND T1.lifeexpectancy = ( SELECT MIN(T1.lifeexpectancy) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' )", "tokens": ["select", "name", "from", "country", "where", "continent", "=", "\"Asia\"", "order", "by", "lifeexpectancy", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 13, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the total population and maximum GNP in Asia?", "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "pred": "SELECT SUM(T1.population),  MAX(T2.gnp) FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.continent = 'Asia'", "tokens": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "\"Asia\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many people live in Asia, and what is the largest GNP among them?", "gold": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "pred": "SELECT COUNT(c1.id) FROM country AS c1 INNER JOIN city AS c2 ON c1.code = c2.countrycode WHERE c1.continent = 'Asia'", "tokens": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "\"Asia\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the average life expectancy in African countries that are republics?", "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "pred": "SELECT AVG(lifeexpectancy) FROM country WHERE continent = 'Africa' INTERSECT SELECT lifeexpectancy FROM country WHERE governmentform = 'Republic'", "tokens": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "\"Africa\"", "and", "governmentform", "=", "\"Republic\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the average life expectancy for countries in Africa which are republics?", "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "pred": "SELECT SUM(T1.lifeexpectancy) / COUNT(T1.code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' AND T1.continent = 'Africa'", "tokens": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "\"Africa\"", "and", "governmentform", "=", "\"Republic\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the total surface area of the continents Asia and Europe?", "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "pred": "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia'", "tokens": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"Asia\"", "or", "continent", "=", "\"Europe\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the total surface area covered by countries in Asia or Europe.", "gold": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "pred": "SELECT SUM(surfacearea) FROM country WHERE continent = 'Asia' OR continent = 'Europe'", "tokens": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"Asia\"", "or", "continent", "=", "\"Europe\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many people live in Gelderland district?", "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "pred": "SELECT COUNT(id) FROM city WHERE district = 'Gelderland'", "tokens": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "\"Gelderland\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the total population of Gelderland district?", "gold": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "pred": "SELECT SUM(T2.population) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Netherlands' AND T2.district = 'Gelderland'", "tokens": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "\"Gelderland\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the average GNP and total population in all nations whose government is US territory?", "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "pred": "SELECT SUM(gnp), SUM(population) FROM country WHERE governmentform = 'US Territory'", "tokens": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "\"US Territory\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the mean GNP and total population of nations which are considered US territory.", "gold": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "pred": "SELECT AVG(T2.gnp),  SUM(T2.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.governmentform = 'US Territory'", "tokens": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "\"US Territory\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many unique languages are spoken in the world?", "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "pred": "SELECT COUNT(language) FROM countrylanguage", "tokens": ["select", "count", "(", "distinct", "language", ")", "from", "countrylanguage"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the number of distinct languages used around the world?", "gold": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "pred": "SELECT COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode", "tokens": ["select", "count", "(", "distinct", "language", ")", "from", "countrylanguage"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many type of governments are in Africa?", "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "pred": "SELECT COUNT(DISTINCT T1.governmentform) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa'", "tokens": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "\"Africa\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many different forms of governments are there in Africa?", "gold": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "pred": "SELECT COUNT(governmentform) FROM country WHERE continent = 'Africa'", "tokens": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "\"Africa\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the total number of languages used in Aruba?", "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "pred": "SELECT SUM(T1.percentage) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba'", "tokens": ["select", "count", "(", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Aruba\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many languages are spoken in Aruba?", "gold": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "pred": "SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Aruba'", "tokens": ["select", "count", "(", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Aruba\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many official languages does Afghanistan have?", "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "pred": "SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.name = 'Afghanistan' AND T1.isofficial = 'T'", "tokens": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Afghanistan\"", "and", "isofficial", "=", "\"T\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 25, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many official languages are spoken in Afghanistan?", "gold": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "pred": "SELECT COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.name = 'Afghanistan' AND T2.isofficial = 'T'", "tokens": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Afghanistan\"", "and", "isofficial", "=", "\"T\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 25, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is name of the country that speaks the largest number of languages?", "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code GROUP BY T2.name ORDER BY COUNT(T2.name) DESC LIMIT 1", "tokens": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "Give the name of the nation that uses the greatest amount of languages.", "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name ORDER BY COUNT(T2.language) DESC LIMIT 1", "tokens": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "Which continent has the most diverse languages?", "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T1.continent FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.continent ORDER BY COUNT(T1.continent) DESC LIMIT 1", "tokens": ["select", "t1.continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "Which continent speaks the most languages?", "gold": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T2.continent FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code GROUP BY T2.continent ORDER BY COUNT(T1.language) DESC LIMIT 1", "tokens": ["select", "t1.continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "How many countries speak both English and Dutch?", "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "pred": "SELECT SUM(CASE WHEN T1.language = 'English' THEN 1 ELSE 0 END) FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T1.language = 'Dutch'", "tokens": ["select", "count", "(", "*", ")", "from", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Dutch\"", ")"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 45, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the number of nations that use English and Dutch?", "gold": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "pred": "SELECT COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T1.language = 'English' AND T2.language = 'Dutch'", "tokens": ["select", "count", "(", "*", ")", "from", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Dutch\"", ")"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 45, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the names of nations speak both English and French?", "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "pred": "SELECT T2.language FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T1.language = 'English' AND T2.language = 'French'", "tokens": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"French\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 37, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the names of nations that speak both English and French.", "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "pred": "SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' INTERSECT SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'French'", "tokens": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"French\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 37, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the names of nations where both English and French are official languages?", "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "pred": "SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' INTERSECT SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'French'", "tokens": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "t2.isofficial", "=", "\"T\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"French\"", "and", "t2.isofficial", "=", "\"T\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 45, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 4, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the names of countries with English and French as official languages.", "gold": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "pred": "SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' INTERSECT SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'French'", "tokens": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "t2.isofficial", "=", "\"T\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"French\"", "and", "t2.isofficial", "=", "\"T\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 45, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 4, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the number of distinct continents where Chinese is spoken?", "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "pred": "SELECT COUNT(T1.continent) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Chinese'", "tokens": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Chinese\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many continents speak Chinese?", "gold": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "pred": "SELECT COUNT(T2.continent) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'Chinese'", "tokens": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Chinese\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the regions that use English or Dutch?", "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "pred": "SELECT T1.region FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' OR T2.language = 'Dutch'", "tokens": ["select", "distinct", "t1.region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "or", "t2.language", "=", "\"Dutch\""], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 23, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which regions speak Dutch or English?", "gold": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "pred": "SELECT DISTINCT T2.region FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'Dutch' INTERSECT SELECT DISTINCT T2.region FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English'", "tokens": ["select", "distinct", "t1.region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "or", "t2.language", "=", "\"Dutch\""], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 23, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the countries where either English or Dutch is the official language ?", "gold": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "pred": "SELECT T1.name FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' OR T2.language = 'Dutch'", "tokens": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"english\"", "and", "isofficial", "=", "\"t\"", "union", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"dutch\"", "and", "isofficial", "=", "\"t\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 45, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 4, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which countries have either English or Dutch as an official language?", "gold": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "pred": "SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' OR T1.language = 'Dutch'", "tokens": ["select", "*", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "isofficial", "=", "\"T\"", "union", "select", "*", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Dutch\"", "and", "isofficial", "=", "\"T\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 45, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 2, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 4, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which language is the most popular on the Asian continent?", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "pred": "SELECT T3.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode INNER JOIN countrylanguage AS T3 ON T3.countrycode = T1.code WHERE T1.continent = 'Asia' GROUP BY T3.language ORDER BY SUM(T3.percentage) DESC LIMIT 1", "tokens": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.continent", "=", "\"Asia\"", "group", "by", "t2.language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 30, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 5, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "world_1", "question": "What is the language that is used by the largest number of Asian nations?", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "pred": "SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' GROUP BY T2.language ORDER BY COUNT(T2.countrycode) DESC LIMIT 1", "tokens": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.continent", "=", "\"Asia\"", "group", "by", "t2.language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 30, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 5, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "world_1", "question": "Which languages are spoken by only one country in republic governments?", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "pred": "SELECT T2.language FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.countrycode = T2.countrycode WHERE T1.percentage = 100 AND T1.language = T2.language GROUP BY T2.language HAVING COUNT(T2.countrycode) = 1", "tokens": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.governmentform", "=", "\"Republic\"", "group", "by", "t2.language", "having", "count", "(", "*", ")", "=", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "world_1", "question": "What languages are only used by a single country with a republic government?", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "pred": "SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T2.code = T1.countrycode WHERE T2.governmentform = 'Republic' GROUP BY T1.language HAVING COUNT(T1.countrycode) = 1", "tokens": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.governmentform", "=", "\"Republic\"", "group", "by", "t2.language", "having", "count", "(", "*", ")", "=", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "world_1", "question": "Find the city with the largest population that uses English.", "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "pred": "SELECT T3.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code INNER JOIN city AS T3 ON T2.code = T3.countrycode WHERE T1.language = 'English' AND T1.isofficial = 'T' ORDER BY T3.population DESC LIMIT 1", "tokens": ["select", "t1.name", ",", "t1.population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.countrycode", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "order", "by", "t1.population", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the most populace city that speaks English?", "gold": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "pred": "SELECT T2.name FROM countrylanguage AS T1 INNER JOIN city AS T2 ON T1.countrycode = T2.countrycode WHERE T1.language = 'English' ORDER BY T2.population DESC LIMIT 1", "tokens": ["select", "t1.name", ",", "t1.population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.countrycode", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "order", "by", "t1.population", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Find the name, population and expected life length of asian country with the largest area?", "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "pred": "SELECT T2.name, T2.population, T2.lifeexpectancy FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia' ORDER BY T1.surfacearea DESC LIMIT 1", "tokens": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "\"Asia\"", "order", "by", "surfacearea", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 18, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the name, population, and life expectancy of the largest Asian country by land?", "gold": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "pred": "SELECT T2.name, T2.population, T2.lifeexpectancy FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'English' AND T1.continent = 'Asia' ORDER BY T1.surfacearea DESC LIMIT 1", "tokens": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "\"Asia\"", "order", "by", "surfacearea", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 18, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is average life expectancy in the countries where English is not the official language?", "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "pred": "SELECT AVG(T2.lifeexpectancy) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.isofficial = 'F' AND T1.language = 'English'", "tokens": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "t2.isofficial", "=", "\"T\"", ")"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 35, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the mean life expectancy of countries in which English is not the official language.", "gold": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "pred": "SELECT SUM(T2.lifeexpectancy) / COUNT(T2.code) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language!= 'English'", "tokens": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "t2.isofficial", "=", "\"T\"", ")"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 35, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the total number of people living in the nations that do not use English?", "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "pred": "SELECT SUM(CASE WHEN T1.language = 'English' THEN T2.population ELSE 0 END) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.isofficial = 'F'", "tokens": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 31, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "How many people live in countries that do not speak English?", "gold": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "pred": "SELECT COUNT(T2.population) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language!= 'English'", "tokens": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 31, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the official language spoken in the country whose head of state is Beatrix?", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "pred": "SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.headofstate = 'Beatrix'", "tokens": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.headofstate", "=", "\"Beatrix\"", "and", "t2.isofficial", "=", "\"T\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the official language used in the country the name of whose head of state is Beatrix.", "gold": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "pred": "SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.headofstate = 'Beatrix'", "tokens": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.headofstate", "=", "\"Beatrix\"", "and", "t2.isofficial", "=", "\"T\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "pred": "SELECT COUNT(DISTINCT T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.indepyear < 1930 AND T2.isofficial = 'T'", "tokens": ["select", "count", "(", "distinct", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "indepyear", "<", "1930", "and", "t2.isofficial", "=", "\"T\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "For the countries founded before 1930, what is the total number of distinct official languages?", "gold": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "pred": "SELECT SUM(T1.percentage) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T2.indepyear < 1930", "tokens": ["select", "count", "(", "distinct", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "indepyear", "<", "1930", "and", "t2.isofficial", "=", "\"T\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the countries that have greater surface area than any country in Europe?", "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "pred": "SELECT T2.surfacearea FROM country AS T1 INNER JOIN country AS T2 ON T1.continent = T2.continent WHERE T1.surfacearea < ( SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe' )", "tokens": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"Europe\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 20, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which countries have greater area than that of any country in Europe?", "gold": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "pred": "SELECT T1.surfacearea FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code WHERE T1.continent = 'Europe' AND T1.surfacearea < T2.surfacearea", "tokens": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"Europe\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 20, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the African countries that have a  population less than any country in Asia?", "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "pred": "SELECT T2.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Africa' AND T1.population < ( SELECT MAX(T3.population) FROM country AS T3 INNER JOIN city AS T4 ON T3.code = T4.countrycode WHERE T3.continent = 'Asia' )", "tokens": ["select", "name", "from", "country", "where", "continent", "=", "\"Africa\"", "and", "population", "<", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "\"Asia\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 3, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which African countries have a smaller population than that of any country in Asia?", "gold": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "pred": "SELECT T2.name FROM country AS T1 INNER JOIN country AS T2 ON T1.continent = T2.continent WHERE T1.population < ( SELECT MAX(T3.population) FROM country AS T3 INNER JOIN countrylanguage AS T4 ON T3.code = T4.countrycode WHERE T4.language = 'English' )", "tokens": ["select", "name", "from", "country", "where", "continent", "=", "\"Africa\"", "and", "population", "<", "(", "select", "min", "(", "population", ")", "from", "country", "where", "continent", "=", "\"Asia\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 3, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which Asian countries have a population that is larger than any country in Africa?", "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "pred": "SELECT T2.name FROM country AS T1 INNER JOIN country AS T2 ON T1.continent = T2.continent WHERE T1.surfacearea > 3.59e+006", "tokens": ["select", "name", "from", "country", "where", "continent", "=", "\"Asia\"", "and", "population", ">", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "\"Africa\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 3, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the Asian countries which have a population larger than that of any country in Africa?", "gold": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "pred": "SELECT T1.name FROM country AS T1 INNER JOIN country AS T2 ON T1.surfacearea > T2.surfacearea WHERE T1.continent = 'Asia' AND T2.continent = 'Africa'", "tokens": ["select", "name", "from", "country", "where", "continent", "=", "\"Asia\"", "and", "population", ">", "(", "select", "min", "(", "population", ")", "from", "country", "where", "continent", "=", "\"Africa\"", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 3, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the country codes for countries that do not speak English?", "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "pred": "SELECT T2.countrycode FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language!= 'English'", "tokens": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"English\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 13, "num_table_aliases": 2, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Return the country codes for countries that do not speak English.", "gold": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "pred": "SELECT DISTINCT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language!= 'English'", "tokens": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"English\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 13, "num_table_aliases": 2, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the country codes of countries where people use languages other than English?", "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "pred": "SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language!= 'English'", "tokens": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!=", "\"English\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the country codes for countries in which people speak langauges that are not English.", "gold": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "pred": "SELECT T2.countrycode FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language!= 'English'", "tokens": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!=", "\"English\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "pred": "SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language!= 'English' AND T1.governmentform!= 'Republic'", "tokens": ["select", "code", "from", "country", "where", "governmentform", "!=", "\"Republic\"", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"English\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "gold": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "pred": "SELECT DISTINCT T2.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language!= 'English' EXCEPT SELECT DISTINCT T1.code FROM country AS T1 WHERE T1.governmentform = 'Republic'", "tokens": ["select", "code", "from", "country", "where", "governmentform", "!=", "\"Republic\"", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"English\""], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which cities are in European countries where English is not the official language?", "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "pred": "SELECT T1.name FROM city AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code INNER JOIN countrylanguage AS T3 ON T2.code = T3.countrycode WHERE T2.continent = 'Europe' AND T3.language = 'English' AND T3.isofficial = 'N'", "tokens": ["select", "distinct", "t2.name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2.countrycode", "=", "t1.code", "where", "t1.continent", "=", "\"Europe\"", "and", "t1.name", "not", "in", "(", "select", "t3.name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3.code", "=", "t4.countrycode", "where", "t4.isofficial", "=", "\"T\"", "and", "t4.language", "=", "\"English\"", ")"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 47, "num_table_aliases": 4, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 3, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the names of cities in Europe for which English is not the official language?", "gold": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "pred": "SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'English' AND T2.continent = 'Europe' EXCEPT SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.isofficial = 'TRUE' AND T2.continent = 'Europe'", "tokens": ["select", "distinct", "t2.name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2.countrycode", "=", "t1.code", "where", "t1.continent", "=", "\"Europe\"", "and", "t1.name", "not", "in", "(", "select", "t3.name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3.code", "=", "t4.countrycode", "where", "t4.isofficial", "=", "\"T\"", "and", "t4.language", "=", "\"English\"", ")"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 47, "num_table_aliases": 4, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 3, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which unique cities are in Asian countries where Chinese is the official language ?", "gold": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "pred": "SELECT DISTINCT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code INNER JOIN city AS T3 ON T2.code = T3.countrycode WHERE T1.language = 'Chinese' AND T2.continent = 'Asia'", "tokens": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "\"t\"", "and", "t2.language", "=", "\"chinese\"", "and", "t1.continent", "=", "\"asia\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 35, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 3, "num_group_by": 0}}
{"db_id": "world_1", "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "gold": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "pred": "SELECT DISTINCT T1.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T2.code = T1.countrycode WHERE T2.continent = 'Asia' AND T1.isofficial = 'T' AND T1.language = 'Chinese'", "tokens": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "\"T\"", "and", "t2.language", "=", "\"Chinese\"", "and", "t1.continent", "=", "\"Asia\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 35, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 3, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the name, independence year, and surface area of the country with the smallest population?", "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "pred": "SELECT T2.name, T2.indepyear, T2.surfacearea FROM country AS T2 INNER JOIN countrylanguage AS T1 ON T1.countrycode = T2.code WHERE T2.population = ( SELECT MIN(surfacearea) FROM country WHERE population = ( SELECT MIN(surfacearea) FROM country ) )", "tokens": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 13, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "gold": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "pred": "SELECT T1.name, T1.indepyear, T1.surfacearea FROM country AS T1 INNER JOIN ( SELECT T2.population, T2.code FROM country AS T2 ORDER BY T2.population ASC LIMIT 1 ) AS T3 ON T1.code = T3.code", "tokens": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 13, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the population, name and leader of the country with the largest area?", "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "pred": "SELECT T2.population, T2.name, T3.headofstate FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode INNER JOIN countrylanguage AS T3 ON T3.countrycode = T2.countrycode WHERE T1.surfacearea = ( SELECT MAX(surfacearea) FROM country )", "tokens": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the name, population, and head of state for the country that has the largest area.", "gold": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "pred": "SELECT T1.name, T1.population, T3.headofstate FROM country AS T3 INNER JOIN country AS T1 ON T1.code = T3.code WHERE T1.surfacearea = ( SELECT MAX(surfacearea) FROM country )", "tokens": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "pred": "SELECT T1.name, COUNT(T2.language) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T1.name HAVING COUNT(T2.language) >= 3", "tokens": ["select", "count", "(", "t2.language", ")", ",", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "2"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 29, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "gold": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "pred": "SELECT T1.name, COUNT(T1.language) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code GROUP BY T1.countrycode HAVING COUNT(T1.language) > 2", "tokens": ["select", "count", "(", "t2.language", ")", ",", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "2"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 29, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "Find the number of cities in each district whose population is greater than the average population of cities?", "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "pred": "SELECT COUNT(T2.name) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.percentage > 50", "tokens": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 2, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "world_1", "question": "How many cities in each district have a population that is above the average population across all cities?", "gold": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "pred": "SELECT SUM(CASE WHEN T1.population > AVG(T1.population) THEN 1 ELSE 0 END) FROM city AS T1 GROUP BY T1.district", "tokens": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 2, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "world_1", "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "pred": "SELECT T2.governmentform, SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.lifeexpectancy > 72 GROUP BY T2.governmentform", "tokens": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "72"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "gold": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "pred": "SELECT DISTINCT T1.governmentform, SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.lifeexpectancy > 72", "tokens": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "72"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "pred": "SELECT AVG(T1.lifeexpectancy),  SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia'", "tokens": ["select", "sum", "(", "population", ")", ",", "avg", "(", "lifeexpectancy", ")", ",", "continent", "from", "country", "group", "by", "continent", "having", "avg", "(", "lifeexpectancy", ")", "<", "72"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 3, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "gold": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "pred": "SELECT DISTINCT T2.continent, SUM(T1.population), AVG(T1.lifeexpectancy) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.lifeexpectancy < 72 GROUP BY T2.continent", "tokens": ["select", "sum", "(", "population", ")", ",", "avg", "(", "lifeexpectancy", ")", ",", "continent", "from", "country", "group", "by", "continent", "having", "avg", "(", "lifeexpectancy", ")", "<", "72"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 3, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "What are the names and areas of countries with the top 5 largest area?", "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "pred": "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5", "tokens": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "5"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "Return the names and surface areas of the 5 largest countries.", "gold": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "pred": "SELECT name, surfacearea FROM country ORDER BY surfacearea DESC LIMIT 5", "tokens": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "5"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are names of countries with the top 3 largest population?", "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "pred": "SELECT name FROM country ORDER BY population DESC LIMIT 3", "tokens": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "3"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "Return the names of the 3 most populated countries.", "gold": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "pred": "SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode ORDER BY T2.population DESC LIMIT 3", "tokens": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "3"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the names of the nations with the 3 lowest populations?", "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "pred": "SELECT name FROM country ORDER BY population LIMIT 3", "tokens": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "3"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "Return the names of the 3 countries with the fewest people.", "gold": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "pred": "SELECT T2.name FROM country AS T1 INNER JOIN country AS T2 ON T1.code = T2.code ORDER BY T1.population LIMIT 3", "tokens": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "3"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "world_1", "question": "how many countries are in Asia?", "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "pred": "SELECT COUNT(T1.code) FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia'", "tokens": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "\"Asia\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Count the number of countries in Asia.", "gold": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "pred": "SELECT COUNT(T1.code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Asia'", "tokens": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "\"Asia\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 11, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "pred": "SELECT name FROM country WHERE continent = 'Europe' AND population = 80000", "tokens": ["select", "name", "from", "country", "where", "continent", "=", "\"Europe\"", "and", "population", "=", "\"80000\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the names of countries that are in Europe and have a population equal to 80000.", "gold": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "pred": "SELECT T1.name FROM country AS T1 INNER JOIN city AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'Europe' AND T2.population = 80000", "tokens": ["select", "name", "from", "country", "where", "continent", "=", "\"Europe\"", "and", "population", "=", "\"80000\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "pred": "SELECT SUM(T1.population) / COUNT(T1.code), SUM(T1.surfacearea) / COUNT(T1.code) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'North America' AND T1.surfacearea > 3000", "tokens": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"north america\"", "and", "surfacearea", ">", "3000"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 20, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "gold": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "pred": "SELECT SUM(T1.population) FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T1.continent = 'North America' AND T1.surfacearea > 3000", "tokens": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"north america\"", "and", "surfacearea", ">", "3000"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 20, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "world_1", "question": "What are the cities whose population is between 160000 and 900000?", "gold": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "pred": "SELECT name FROM city WHERE population BETWEEN 160000 AND 900000", "tokens": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Return the names of cities that have a population between 160000 and 900000 .", "gold": "select name from city where population between 160000 and 900000", "pred": "SELECT T2.name FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.percentage BETWEEN 100 AND 100 AND T2.population BETWEEN 160000 AND 900000", "tokens": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "world_1", "question": "Which language is spoken by the largest number of countries?", "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.language FROM countrylanguage AS T1 INNER JOIN countrylanguage AS T2 ON T1.language = T2.language WHERE T1.percentage = 100 GROUP BY T2.language ORDER BY COUNT(T2.countrycode) DESC LIMIT 1", "tokens": ["select", "language", "from", "countrylanguage", "group", "by", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "Give the language that is spoken in the most countries.", "gold": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.language FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode GROUP BY T2.language ORDER BY COUNT(T2.language) DESC LIMIT 1", "tokens": ["select", "language", "from", "countrylanguage", "group", "by", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "What is the language spoken by the largest percentage of people in each country?", "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "pred": "SELECT T1.language FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T2.code = T1.countrycode ORDER BY T1.percentage DESC LIMIT 1", "tokens": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "gold": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "pred": "SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode ORDER BY T2.percentage DESC LIMIT 1", "tokens": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "world_1", "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "pred": "SELECT COUNT(T2.countrycode) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'Spanish' GROUP BY T1.countrycode ORDER BY T1.percentage DESC LIMIT 1", "tokens": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"Spanish\"", "group", "by", "countrycode"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "world_1", "question": "Count the number of countries for which Spanish is the predominantly spoken language.", "gold": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "pred": "SELECT COUNT(T1.countrycode) FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'Spanish'", "tokens": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"Spanish\"", "group", "by", "countrycode"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "world_1", "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "pred": "SELECT T2.code FROM countrylanguage AS T1 INNER JOIN country AS T2 ON T1.countrycode = T2.code WHERE T1.language = 'Spanish' ORDER BY T1.percentage DESC LIMIT 1", "tokens": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"Spanish\"", "group", "by", "countrycode"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "world_1", "question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "gold": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "pred": "SELECT T1.code FROM country AS T1 INNER JOIN countrylanguage AS T2 ON T1.code = T2.countrycode WHERE T2.language = 'Spanish' AND T2.isofficial = 'T'", "tokens": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"Spanish\"", "group", "by", "countrycode"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "orchestra", "question": "How many conductors are there?", "gold": "SELECT count(*) FROM conductor", "pred": "SELECT COUNT(conductor_id) FROM conductor", "tokens": ["select", "count", "(", "*", ")", "from", "conductor"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Count the number of conductors.", "gold": "SELECT count(*) FROM conductor", "pred": "SELECT COUNT(conductor_id) FROM conductor", "tokens": ["select", "count", "(", "*", ")", "from", "conductor"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "List the names of conductors in ascending order of age.", "gold": "SELECT Name FROM conductor ORDER BY Age ASC", "pred": "SELECT T2.name FROM conductor AS T1 INNER JOIN performance AS T2 ON T1.conductor_id = T2.orchestra_id", "tokens": ["select", "name", "from", "conductor", "order", "by", "age", "asc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What are the names of conductors, ordered by age?", "gold": "SELECT Name FROM conductor ORDER BY Age ASC", "pred": "SELECT T1.name FROM conductor AS T1 INNER JOIN conductor AS T2 ON T1.age = T2.age", "tokens": ["select", "name", "from", "conductor", "order", "by", "age", "asc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What are the names of conductors whose nationalities are not \"USA\"?", "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "pred": "SELECT name FROM conductor WHERE nationality!= 'USA'", "tokens": ["select", "name", "from", "conductor", "where", "nationality", "!=", "\"USA\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Return the names of conductors that do not have the nationality \"USA\".", "gold": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "pred": "SELECT T1.name FROM conductor AS T1 WHERE T1.nationality!= 'USA'", "tokens": ["select", "name", "from", "conductor", "where", "nationality", "!=", "\"USA\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What are the record companies of orchestras in descending order of years in which they were founded?", "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "pred": "SELECT T1.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id ORDER BY T1.year_of_founded DESC", "tokens": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "gold": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "pred": "SELECT T1.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id ORDER BY T1.year_of_founded DESC", "tokens": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What is the average attendance of shows?", "gold": "SELECT avg(Attendance) FROM SHOW", "pred": "SELECT AVG(T2.attendance) FROM show AS T1 INNER JOIN performance AS T2 ON T1.performance_id = T2.performance_id", "tokens": ["select", "avg", "(", "attendance", ")", "from", "show"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Return the average attendance across all shows.", "gold": "SELECT avg(Attendance) FROM SHOW", "pred": "SELECT AVG(T2.attendance) FROM performance AS T1 INNER JOIN show AS T2 ON T2.performance_id = T1.performance_id", "tokens": ["select", "avg", "(", "attendance", ")", "from", "show"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "pred": "SELECT MAX(T1.share) FROM performance AS T1 INNER JOIN show AS T2 ON T1.performance_id = T2.performance_id WHERE T1.type = 'Live final'", "tokens": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!=", "\"Live final\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "gold": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "pred": "SELECT MAX(T1.share) FROM performance AS T1 INNER JOIN show AS T2 ON T1.performance_id = T2.performance_id WHERE T1.type <> 'Live final'", "tokens": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!=", "\"Live final\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "orchestra", "question": "How many different nationalities do conductors have?", "gold": "SELECT count(DISTINCT Nationality) FROM conductor", "pred": "SELECT COUNT(DISTINCT T1.nationality) FROM conductor AS T1", "tokens": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Count the number of different nationalities of conductors.", "gold": "SELECT count(DISTINCT Nationality) FROM conductor", "pred": "SELECT COUNT(DISTINCT T1.nationality) FROM conductor AS T1", "tokens": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "List names of conductors in descending order of years of work.", "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "pred": "SELECT T1.name FROM conductor AS T1 INNER JOIN conductor AS T2 ON T1.year_of_work = T2.year_of_work ORDER BY T1.year_of_work DESC", "tokens": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What are the names of conductors, sorted descending by the number of years they have worked?", "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "pred": "SELECT T2.name FROM performance AS T1 INNER JOIN conductor AS T2 ON T1.orchestra_id = T2.conductor_id GROUP BY T2.name ORDER BY COUNT(T2.year_of_work) DESC", "tokens": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "List the name of the conductor with the most years of work.", "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "pred": "SELECT T2.name FROM conductor AS T1 INNER JOIN conductor AS T2 ON T1.year_of_work = T2.year_of_work ORDER BY T1.year_of_work DESC LIMIT 1", "tokens": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What is the name of the conductor who has worked the greatest number of years?", "gold": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "pred": "SELECT T1.name FROM conductor AS T1 INNER JOIN performance AS T2 ON T2.orchestra_id = T1.conductor_id", "tokens": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Show the names of conductors and the orchestras they have conducted.", "gold": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "pred": "SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T2.conductor_id = T1.conductor_id", "tokens": ["select", "t1.name", ",", "t2.orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "gold": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "pred": "SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id", "tokens": ["select", "t1.name", ",", "t2.orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Show the names of conductors that have conducted more than one orchestras.", "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "pred": "SELECT T2.name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.conductor_id HAVING COUNT(T1.conductor_id) > 1", "tokens": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "What are the names of conductors who have conducted at more than one orchestra?", "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "pred": "SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.conductor_id HAVING COUNT(T2.conductor_id) > 1", "tokens": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "Show the name of the conductor that has conducted the most number of orchestras.", "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.name ORDER BY COUNT(T2.orchestra_id) DESC LIMIT 1", "tokens": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "What is the name of the conductor who has conducted the most orchestras?", "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 1", "tokens": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "pred": "SELECT T2.name FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded > 2008", "tokens": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "where", "year_of_founded", ">", "2008"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "gold": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "pred": "SELECT T1.name FROM conductor AS T1 INNER JOIN orchestra AS T2 ON T1.conductor_id = T2.conductor_id WHERE T2.year_of_founded > 2008", "tokens": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "where", "year_of_founded", ">", "2008"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Please show the different record companies and the corresponding number of orchestras.", "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "pred": "SELECT DISTINCT T2.record_company, COUNT(T1.orchestra_id) FROM orchestra AS T1 INNER JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id GROUP BY T2.record_company", "tokens": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "How many orchestras does each record company manage?", "gold": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "pred": "SELECT COUNT(orchestra_id) FROM orchestra GROUP BY record_company", "tokens": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "Please show the record formats of orchestras in ascending order of count.", "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "pred": "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY COUNT(major_record_format) ASC", "tokens": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "What are the major record formats of orchestras, sorted by their frequency?", "gold": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "pred": "SELECT T2.major_record_format FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T2.major_record_format ORDER BY COUNT(T2.major_record_format) DESC", "tokens": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "List the record company shared by the most number of orchestras.", "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T2.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T2.record_company ORDER BY COUNT(T2.orchestra_id) DESC LIMIT 1", "tokens": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "What is the record company used by the greatest number of orchestras?", "gold": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY COUNT(orchestra_id) DESC LIMIT 1", "tokens": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "List the names of orchestras that have no performance.", "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "pred": "SELECT T2.orchestra FROM performance AS T1 INNER JOIN orchestra AS T2 ON T1.orchestra_id = T2.orchestra_id", "tokens": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What are the orchestras that do not have any performances?", "gold": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "pred": "SELECT T1.orchestra FROM orchestra AS T1 LEFT JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id WHERE T2.performance_id IS NULL", "tokens": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "pred": "SELECT DISTINCT T1.record_company FROM orchestra AS T1 INNER JOIN orchestra AS T2 ON T1.orchestra_id = T2.orchestra_id WHERE T1.year_of_founded < 2003 AND T2.year_of_founded > 2003", "tokens": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "2003", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "2003"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "orchestra", "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "gold": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "pred": "SELECT DISTINCT T1.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id WHERE T1.year_of_founded < 2003 INTERSECT SELECT DISTINCT T1.record_company FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id WHERE T1.year_of_founded > 2003", "tokens": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "2003", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "2003"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "pred": "SELECT COUNT(orchestra_id) FROM orchestra WHERE major_record_format = 'CD' INTERSECT SELECT COUNT(orchestra_id) FROM orchestra WHERE major_record_format = 'DVD'", "tokens": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "\"CD\"", "or", "major_record_format", "=", "\"DVD\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Count the number of orchestras that have CD or DVD as their record format.", "gold": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "pred": "SELECT COUNT(orchestra_id) FROM orchestra WHERE major_record_format = 'CD' OR major_record_format = 'DVD'", "tokens": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "\"CD\"", "or", "major_record_format", "=", "\"DVD\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "orchestra", "question": "Show the years in which orchestras that have given more than one performance are founded.", "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "pred": "SELECT T1.year_of_founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T1.year_of_founded HAVING COUNT(T2.performance_id) > 1", "tokens": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1.orchestra_id", "=", "t2.orchestra_id", "group", "by", "t2.orchestra_id", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "orchestra", "question": "What are years of founding for orchestras that have had more than a single performance?", "gold": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "pred": "SELECT T1.year_of_founded FROM orchestra AS T1 INNER JOIN performance AS T2 ON T1.orchestra_id = T2.orchestra_id GROUP BY T1.year_of_founded HAVING COUNT(T2.performance_id) > 1", "tokens": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1.orchestra_id", "=", "t2.orchestra_id", "group", "by", "t2.orchestra_id", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "How many high schoolers are there?", "gold": "SELECT count(*) FROM Highschooler", "pred": "SELECT COUNT(*) FROM highschooler", "tokens": ["select", "count", "(", "*", ")", "from", "highschooler"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "Count the number of high schoolers.", "gold": "SELECT count(*) FROM Highschooler", "pred": "SELECT COUNT(T1.id) FROM highschooler AS T1", "tokens": ["select", "count", "(", "*", ")", "from", "highschooler"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "Show the names and grades of each high schooler.", "gold": "SELECT name ,  grade FROM Highschooler", "pred": "SELECT T1.name, T1.grade FROM highschooler AS T1", "tokens": ["select", "name", ",", "grade", "from", "highschooler"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "What are the names and grades for each high schooler?", "gold": "SELECT name ,  grade FROM Highschooler", "pred": "SELECT T1.name, T1.grade FROM highschooler AS T1", "tokens": ["select", "name", ",", "grade", "from", "highschooler"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "Show all the grades of the high schoolers.", "gold": "SELECT grade FROM Highschooler", "pred": "SELECT T2.grade FROM highschooler AS T1 INNER JOIN highschooler AS T2 ON T1.id = T2.id", "tokens": ["select", "grade", "from", "highschooler"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 4, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "What is the grade of each high schooler?", "gold": "SELECT grade FROM Highschooler", "pred": "SELECT grade FROM highschooler", "tokens": ["select", "grade", "from", "highschooler"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 4, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "What grade is Kyle in?", "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "pred": "SELECT T2.grade FROM highschooler AS T1 INNER JOIN highschooler AS T2 ON T1.name = 'Kyle'", "tokens": ["select", "grade", "from", "highschooler", "where", "name", "=", "\"Kyle\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "Return the grade for the high schooler named Kyle.", "gold": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "pred": "SELECT T2.grade FROM highschooler AS T1 INNER JOIN highschooler AS T2 ON T1.id = T2.id WHERE T1.name = 'Kyle'", "tokens": ["select", "grade", "from", "highschooler", "where", "name", "=", "\"Kyle\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "Show the names of all high schoolers in grade 10.", "gold": "SELECT name FROM Highschooler WHERE grade  =  10", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade = 10", "tokens": ["select", "name", "from", "highschooler", "where", "grade", "=", "10"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "What are the names of all high schoolers in grade 10?", "gold": "SELECT name FROM Highschooler WHERE grade  =  10", "pred": "SELECT name FROM highschooler WHERE grade = 10", "tokens": ["select", "name", "from", "highschooler", "where", "grade", "=", "10"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "Show the ID of the high schooler named Kyle.", "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "pred": "SELECT T1.id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle'", "tokens": ["select", "id", "from", "highschooler", "where", "name", "=", "\"Kyle\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "What is Kyle's id?", "gold": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "pred": "SELECT T1.id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle'", "tokens": ["select", "id", "from", "highschooler", "where", "name", "=", "\"Kyle\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "How many high schoolers are there in grade 9 or 10?", "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "pred": "SELECT COUNT(*) FROM highschooler WHERE grade = 9 OR grade = 10", "tokens": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "9", "or", "grade", "=", "10"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "network_1", "question": "Count the number of high schoolers in grades 9 or 10.", "gold": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "pred": "SELECT COUNT(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade BETWEEN 9 AND 10", "tokens": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "9", "or", "grade", "=", "10"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 15, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "network_1", "question": "Show the number of high schoolers for each grade.", "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "pred": "SELECT T2.grade, COUNT(T1.id) FROM highschooler AS T1 INNER JOIN highschooler AS T2 ON T1.grade = T2.grade GROUP BY T2.grade", "tokens": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "How many high schoolers are in each grade?", "gold": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "pred": "SELECT grade FROM highschooler GROUP BY grade", "tokens": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Which grade has the most high schoolers?", "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(grade) DESC LIMIT 1", "tokens": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Return the grade that has the greatest number of high schoolers.", "gold": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(grade) DESC LIMIT 1", "tokens": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Show me all grades that have at least 4 students.", "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "pred": "SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(name) >= 4", "tokens": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">=", "4"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Which grades have 4 or more high schoolers?", "gold": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "pred": "SELECT DISTINCT T1.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.grade HAVING COUNT(T1.id) >= 4", "tokens": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">=", "4"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Show the student IDs and numbers of friends corresponding to each.", "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "pred": "SELECT student_id, COUNT(friend_id) FROM friend GROUP BY student_id", "tokens": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "How many friends does each student have?", "gold": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "pred": "SELECT T1.name, COUNT(T2.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name", "tokens": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Show the names of high school students and their corresponding number of friends.", "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "pred": "SELECT T1.name, COUNT(T2.student_id) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name", "tokens": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "What are the names of the high schoolers and how many friends does each have?", "gold": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "pred": "SELECT name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name", "tokens": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "What is the name of the high schooler who has the greatest number of friends?", "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "tokens": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Return the name of the high school student with the most friends.", "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name ORDER BY COUNT(T2.student_id) DESC LIMIT 1", "tokens": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Show the names of high schoolers who have at least 3 friends.", "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) >= 3", "tokens": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "3"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "What are the names of high schoolers who have 3 or more friends?", "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id GROUP BY T1.id HAVING COUNT(T2.friend_id) >= 3", "tokens": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "3"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Show the names of all of the high schooler Kyle's friends.", "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle'", "tokens": ["select", "t3.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "join", "highschooler", "as", "t3", "on", "t1.friend_id", "=", "t3.id", "where", "t2.name", "=", "\"Kyle\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "Return the names of friends of the high school student Kyle.", "gold": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "pred": "SELECT T2.name FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T1.friend_id = 1", "tokens": ["select", "t3.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "join", "highschooler", "as", "t3", "on", "t1.friend_id", "=", "t3.id", "where", "t2.name", "=", "\"Kyle\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "How many friends does the high school student Kyle have?", "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "pred": "SELECT COUNT(T2.name) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.name = 'Kyle'", "tokens": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"Kyle\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "Count the number of friends Kyle has.", "gold": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "pred": "SELECT SUM(CASE WHEN T2.name = 'Kyle' THEN 1 ELSE 0 END) FROM friend AS T1 INNER JOIN highschooler AS T2 ON T2.id = T1.friend_id WHERE T2.name = 'Kyle'", "tokens": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"Kyle\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "Show ids of all students who do not have any friends.", "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "pred": "SELECT id FROM highschooler EXCEPT SELECT T2.id FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.friend_id = T2.id", "tokens": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 0, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "What are the ids of high school students who do not have friends?", "gold": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "pred": "SELECT T1.id FROM highschooler AS T1 LEFT JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL", "tokens": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 0, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "Show names of all high school students who do not have any friends.", "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "pred": "SELECT T2.name FROM friend AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T1.friend_id IS NULL", "tokens": ["select", "name", "from", "highschooler", "except", "select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "What are the names of students who have no friends?", "gold": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.friend_id IS NULL", "tokens": ["select", "name", "from", "highschooler", "except", "select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "pred": "SELECT T1.id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.friend_id IN ( SELECT T3.id FROM highschooler AS T3 INNER JOIN likes AS T4 ON T3.id = T4.liked_id GROUP BY T4.liked_id HAVING COUNT(T4.liked_id) > 1 )", "tokens": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 0, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "What are the ids of students who both have friends and are liked?", "gold": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "pred": "SELECT T1.id FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T3.student_id = T2.student_id", "tokens": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 0, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "Show name of all students who have some friends and also are liked by someone else.", "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INTERSECT SELECT T1.name FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.liked_id", "tokens": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "intersect", "select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.liked_id", "=", "t2.id"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 29, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "What are the names of high schoolers who both have friends and are liked?", "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id INNER JOIN likes AS T3 ON T1.id = T3.student_id", "tokens": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "intersect", "select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.liked_id", "=", "t2.id"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 29, "num_table_aliases": 2, "num_joins": 2, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "Count the number of likes for each student id.", "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "pred": "SELECT T2.student_id FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id", "tokens": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "How many likes correspond to each student id?", "gold": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "pred": "SELECT T1.student_id, COUNT(T1.liked_id) FROM likes AS T1 GROUP BY T1.student_id", "tokens": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name", "tokens": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "What are the names of high schoolers who have likes, and how many likes does each have?", "gold": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "pred": "SELECT T1.name, COUNT(T2.student_id) FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name", "tokens": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "What is the name of the high schooler who has the greatest number of likes?", "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM likes GROUP BY student_id ORDER BY COUNT(student_id) DESC LIMIT 1 )", "tokens": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Give the name of the student with the most likes.", "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.name FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY COUNT(T1.student_id) DESC LIMIT 1", "tokens": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Show the names of students who have at least 2 likes.", "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) >= 2", "tokens": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "What are the names of students who have 2 or more likes?", "gold": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "pred": "SELECT name FROM highschooler AS T1 INNER JOIN likes AS T2 ON T1.id = T2.student_id GROUP BY T1.name HAVING COUNT(T2.student_id) >= 2", "tokens": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "network_1", "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 GROUP BY T1.name HAVING COUNT(T2.student_id) >= 2", "tokens": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.grade", ">", "5", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "network_1", "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "gold": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "pred": "SELECT T1.name FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T1.grade > 5 GROUP BY T1.name HAVING COUNT(T2.student_id) = 2", "tokens": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.grade", ">", "5", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "network_1", "question": "How many likes does Kyle have?", "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "pred": "SELECT COUNT(T1.liked_id) FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = 'Kyle'", "tokens": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"Kyle\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "Return the number of likes that the high schooler named Kyle has.", "gold": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "pred": "SELECT COUNT(liked_id) FROM likes AS T1 INNER JOIN highschooler AS T2 ON T1.liked_id = T2.id WHERE T2.name = 'Kyle'", "tokens": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"Kyle\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "Find the average grade of all students who have some friends.", "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "pred": "SELECT AVG(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id", "tokens": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "What is the average grade of students who have friends?", "gold": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "pred": "SELECT AVG(T1.grade) FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id", "tokens": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "network_1", "question": "Find the minimum grade of students who have no friends.", "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "pred": "SELECT T2.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.friend_id IS NULL", "tokens": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 27, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "network_1", "question": "What is the lowest grade of students who do not have any friends?", "gold": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "pred": "SELECT T1.grade FROM highschooler AS T1 INNER JOIN friend AS T2 ON T1.id = T2.student_id WHERE T2.student_id IS NULL", "tokens": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 27, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Which states have both owners and professionals living there?", "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "pred": "SELECT DISTINCT T1.state FROM owners AS T1 INTERSECT SELECT DISTINCT T1.state FROM professionals AS T1", "tokens": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 0, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Find the states where both owners and professionals live.", "gold": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "pred": "SELECT DISTINCT T1.state FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.state = T2.state", "tokens": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 9, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 0, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What is the average age of the dogs who have gone through any treatments?", "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "pred": "SELECT AVG(T1.age) FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id", "tokens": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Find the average age of the dogs who went through treatments.", "gold": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "pred": "SELECT AVG(T2.age) FROM treatments AS T1 INNER JOIN dogs AS T2 ON T2.dog_id = T1.dog_id", "tokens": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "pred": "SELECT T1.professional_id, T1.last_name, T1.cell_number FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T1.state = 'Indiana'", "tokens": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "\"Indiana\"", "union", "select", "t1.professional_id", ",", "t1.last_name", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">", "2"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 41, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 3, "num_components_2": 1, "num_agg": 1, "num_select_cols": 6, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "gold": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "pred": "SELECT T2.professional_id, T2.last_name, T2.cell_number FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.owner_id = T2.professional_id WHERE T1.state = 'IN'", "tokens": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "\"Indiana\"", "union", "select", "t1.professional_id", ",", "t1.last_name", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">", "2"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 41, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 3, "num_components_2": 1, "num_agg": 1, "num_select_cols": 6, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "pred": "SELECT T1.name FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment <= 1000", "tokens": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "gold": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "pred": "SELECT T1.name FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.cost_of_treatment <= 1000", "tokens": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Which first names are used for professionals or owners but are not used as dog names?", "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "pred": "SELECT DISTINCT T1.first_name FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.owner_id = T2.professional_id WHERE T1.first_name NOT IN (SELECT T3.first_name FROM dogs AS T3)", "tokens": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 2, "num_joins": 0, "num_components_1": 0, "num_components_2": 2, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Find the first names that are used for professionals or owners but are not used as dog names.", "gold": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "pred": "SELECT DISTINCT T1.first_name FROM owners AS T1 INNER JOIN professionals AS T2 ON T1.owner_id = T2.professional_id WHERE T1.first_name NOT IN ( SELECT T3.first_name FROM dogs AS T3 )", "tokens": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 2, "num_joins": 0, "num_components_1": 0, "num_components_2": 2, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "pred": "SELECT T1.professional_id, T1.role_code, T1.email_address FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id", "tokens": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1.professional_id", ",", "t1.role_code", ",", "t1.email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 27, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 6, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "gold": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "pred": "SELECT T2.professional_id, T2.role_code, T2.email_address FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL", "tokens": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1.professional_id", ",", "t1.role_code", ",", "t1.email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 27, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 6, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Which owner owns the most dogs? List the owner id, first name and last name.", "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.owner_id, T1.first_name, T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.owner_id) DESC LIMIT 1", "tokens": ["select", "t1.owner_id", ",", "t2.first_name", ",", "t2.last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 30, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Return the owner id, first name and last name of the owner who has the most dogs.", "gold": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.owner_id, T1.first_name, T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id, T1.first_name, T1.last_name ORDER BY COUNT(T2.dog_id) DESC LIMIT 1", "tokens": ["select", "t1.owner_id", ",", "t2.first_name", ",", "t2.last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 30, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "gold": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "pred": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(T1.professional_id) > 1", "tokens": ["select", "t1.professional_id", ",", "t1.role_code", ",", "t1.first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "gold": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "pred": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.role_code, T1.first_name HAVING COUNT(T2.treatment_id) >= 2", "tokens": ["select", "t1.professional_id", ",", "t1.role_code", ",", "t1.first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 28, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "What is the name of the breed with the most dogs?", "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.breed_name FROM dogs AS T1 INNER JOIN breeds AS T2 ON T1.breed_code = T2.breed_code GROUP BY T2.breed_name ORDER BY COUNT(T1.dog_id) DESC LIMIT 1", "tokens": ["select", "t1.breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.breed_code", "=", "t2.breed_code", "group", "by", "t1.breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Which breed do the most dogs have? Give me the breed name.", "gold": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.breed_name FROM breeds AS T1 INNER JOIN dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(T1.breed_name) DESC LIMIT 1", "tokens": ["select", "t1.breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.breed_code", "=", "t2.breed_code", "group", "by", "t1.breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T2.owner_id, T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T2.owner_id ORDER BY COUNT(T3.treatment_id) DESC LIMIT 1", "tokens": ["select", "t1.owner_id", ",", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 36, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "gold": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "pred": "SELECT T1.owner_id, T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1", "tokens": ["select", "t1.owner_id", ",", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 36, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "What is the description of the treatment type that costs the least money in total?", "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "pred": "SELECT T1.treatment_type_description FROM treatment_types AS T1 INNER JOIN treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1", "tokens": ["select", "t1.treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", "group", "by", "t1.treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Give me the description of the treatment type whose total cost is the lowest.", "gold": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "pred": "SELECT T1.treatment_type_description FROM treatment_types AS T1 INNER JOIN treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T2.treatment_type_code ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1", "tokens": ["select", "t1.treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", "group", "by", "t1.treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "pred": "SELECT T1.owner_id, T1.zip_code FROM owners AS T1 INNER JOIN charges AS T2 ON T1.owner_id = T2.charge_id WHERE T2.charge_type = 'Adoption Fee' GROUP BY T1.owner_id, T1.zip_code ORDER BY SUM(T2.charge_amount) DESC LIMIT 1", "tokens": ["select", "t1.owner_id", ",", "t1.zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "sum", "(", "t3.cost_of_treatment", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 36, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "gold": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "pred": "SELECT T2.owner_id, T2.zip_code FROM ( SELECT T1.owner_id, SUM(T1.cost_of_treatment) AS total_spent FROM treatments AS T1 INNER JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.owner_id ORDER BY total_spent DESC LIMIT 1 ) AS T1 INNER JOIN owners AS T2 ON T1.owner_id = T2.owner_id", "tokens": ["select", "t1.owner_id", ",", "t1.zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "sum", "(", "t3.cost_of_treatment", ")", "desc", "limit", "1"], "hardness": "extra", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 36, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 4, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "pred": "SELECT T1.professional_id, T1.cell_number FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.cell_number HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2", "tokens": ["select", "t1.professional_id", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "gold": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "pred": "SELECT T1.professional_id, T1.cell_number FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T1.cell_number HAVING COUNT(T2.treatment_type_code) >= 2", "tokens": ["select", "t1.professional_id", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "pred": "SELECT T1.first_name, T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN treatments AS T3 ON T2.dog_id = T3.dog_id WHERE T3.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments )", "tokens": ["select", "distinct", "t1.first_name", ",", "t1.last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 25, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "gold": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "pred": "SELECT T1.first_name, T1.last_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < ( SELECT AVG(cost_of_treatment) FROM treatments )", "tokens": ["select", "distinct", "t1.first_name", ",", "t1.last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 25, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List the date of each treatment, together with the first name of the professional who operated it.", "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "pred": "SELECT T1.date_of_treatment, T2.first_name FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id", "tokens": ["select", "t1.date_of_treatment", ",", "t2.first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are the date and the operating professional's first name of each treatment?", "gold": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "pred": "SELECT T2.date_of_treatment, T3.first_name FROM treatments AS T1 INNER JOIN dogs AS T2 ON T2.dog_id = T1.dog_id INNER JOIN professionals AS T3 ON T3.professional_id = T1.professional_id", "tokens": ["select", "t1.date_of_treatment", ",", "t2.first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List the cost of each treatment and the corresponding treatment type description.", "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "pred": "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM treatments AS T1 INNER JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "tokens": ["select", "t1.cost_of_treatment", ",", "t2.treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are the cost and treatment type description of each treatment?", "gold": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "pred": "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM treatments AS T1 INNER JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "tokens": ["select", "t1.cost_of_treatment", ",", "t2.treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List each owner's first name, last name, and the size of his for her dog.", "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "pred": "SELECT T1.first_name, T1.last_name, T2.size_description FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id", "tokens": ["select", "t1.first_name", ",", "t1.last_name", ",", "t2.size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are each owner's first name, last name, and the size of their dog?", "gold": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "pred": "SELECT T1.first_name, T1.last_name, T3.size_description FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN sizes AS T3 ON T2.size_code = T3.size_code", "tokens": ["select", "t1.first_name", ",", "t1.last_name", ",", "t2.size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List pairs of the owner's first name and the dogs's name.", "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "pred": "SELECT T1.first_name, T2.name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id", "tokens": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are each owner's first name and their dogs's name?", "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "pred": "SELECT T1.first_name, T3.name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id INNER JOIN breeds AS T3 ON T2.breed_code = T3.breed_code", "tokens": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "pred": "SELECT T1.name FROM dogs AS T1 INNER JOIN breeds AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.breed_name DESC LIMIT 1", "tokens": ["select", "t1.name", ",", "t2.date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", "where", "t1.breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ")"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 37, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 5, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "gold": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "pred": "SELECT T1.name FROM dogs AS T1 INNER JOIN breeds AS T2 ON T1.breed_code = T2.breed_code WHERE T2.breed_name = 'Rare Breed'", "tokens": ["select", "t1.name", ",", "t2.date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", "where", "t1.breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ")"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 37, "num_table_aliases": 3, "num_joins": 1, "num_components_1": 5, "num_components_2": 0, "num_agg": 1, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 1}}
{"db_id": "dog_kennels", "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "pred": "SELECT T1.first_name, T2.name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA'", "tokens": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t1.state", "=", "\"Virginia\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Find the first names of owners living in Virginia and the names of dogs they own.", "gold": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "pred": "SELECT T1.first_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'VA'", "tokens": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t1.state", "=", "\"Virginia\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 20, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "pred": "SELECT T1.date_arrived, T1.date_departed FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id", "tokens": ["select", "distinct", "t1.date_arrived", ",", "t1.date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Find the arriving date and the departing date of the dogs that received a treatment.", "gold": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "pred": "SELECT T2.date_arrived, T2.date_departed FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id", "tokens": ["select", "distinct", "t1.date_arrived", ",", "t1.date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List the last name of the owner owning the youngest dog.", "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "pred": "SELECT T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.age LIMIT 1", "tokens": ["select", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t2.age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Who owns the youngest dog? Give me his or her last name.", "gold": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "pred": "SELECT T1.last_name FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id ORDER BY T2.date_of_birth DESC LIMIT 1", "tokens": ["select", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t2.age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 26, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "pred": "SELECT T1.email_address FROM professionals AS T1 INNER JOIN state AS T2 ON T1.state = T2.state WHERE T2.state IN ('HI', 'WI')", "tokens": ["select", "email_address", "from", "professionals", "where", "state", "=", "\"Hawaii\"", "or", "state", "=", "\"Wisconsin\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "gold": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "pred": "SELECT T2.email_address FROM professionals AS T1 INNER JOIN owners AS T2 ON T1.professional_id = T2.owner_id WHERE T2.state = 'HI' OR T2.state = 'WI'", "tokens": ["select", "email_address", "from", "professionals", "where", "state", "=", "\"Hawaii\"", "or", "state", "=", "\"Wisconsin\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are the arriving date and the departing date of all the dogs?", "gold": "SELECT date_arrived ,  date_departed FROM Dogs", "pred": "SELECT T2.date_arrived FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id", "tokens": ["select", "date_arrived", ",", "date_departed", "from", "dogs"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List the arrival date and the departure date for all the dogs.", "gold": "SELECT date_arrived ,  date_departed FROM Dogs", "pred": "SELECT T1.date_arrived FROM dogs AS T1 LEFT JOIN dogs AS T2 ON T1.dog_id = T2.dog_id WHERE T2.date_departed IS NULL", "tokens": ["select", "date_arrived", ",", "date_departed", "from", "dogs"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "How many dogs went through any treatments?", "gold": "SELECT count(DISTINCT dog_id) FROM Treatments", "pred": "SELECT COUNT(DISTINCT T1.dog_id) FROM treatments AS T1", "tokens": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Count the number of dogs that went through a treatment.", "gold": "SELECT count(DISTINCT dog_id) FROM Treatments", "pred": "SELECT COUNT(T2.dog_id) FROM dogs AS T1 INNER JOIN treatments AS T2 ON T1.dog_id = T2.dog_id", "tokens": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "How many professionals have performed any treatment to dogs?", "gold": "SELECT count(DISTINCT professional_id) FROM Treatments", "pred": "SELECT COUNT(DISTINCT T1.professional_id) FROM treatments AS T1", "tokens": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Find the number of professionals who have ever treated dogs.", "gold": "SELECT count(DISTINCT professional_id) FROM Treatments", "pred": "SELECT COUNT(DISTINCT T1.professional_id) FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id", "tokens": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "pred": "SELECT DISTINCT T1.role_code, T1.street, T1.city, T1.state FROM professionals AS T1 INNER JOIN `city` AS T2 ON T1.city = T2.city WHERE T2.city LIKE '%West%'", "tokens": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "\"%West%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 4, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "gold": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "pred": "SELECT T2.role_code, T2.street, T2.city, T2.state FROM professionals AS T1 INNER JOIN professionals AS T2 ON T1.zip_code = T2.zip_code WHERE T1.city LIKE '%West%'", "tokens": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "\"%West%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 4, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "pred": "SELECT T1.first_name, T1.last_name, T1.email_address FROM owners AS T1 INNER JOIN dog_kennels.dog_kennels.owners AS T2 ON T1.owner_id = T2.owner_id WHERE T2.state LIKE '%North%'", "tokens": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "\"%North%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "gold": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "pred": "SELECT T1.first_name, T1.last_name, T1.email_address FROM owners AS T1 INNER JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state LIKE '%North%'", "tokens": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "\"%North%\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "How many dogs have an age below the average?", "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "pred": "SELECT COUNT(dog_id) FROM dogs WHERE STRFTIME('%Y', date_of_birth) < ( SELECT STRFTIME('%Y', date_of_birth) FROM dogs GROUP BY date_of_birth ORDER BY COUNT(date_of_birth) DESC LIMIT 1 )", "tokens": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Count the number of dogs of an age below the average.", "gold": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "pred": "SELECT COUNT(dog_id) FROM dogs WHERE STRFTIME('%J', date_of_birth) < ( SELECT AVG(STRFTIME('%J', date_of_birth)) FROM dogs )", "tokens": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 2, "num_select_cols": 2, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "How much does the most recent treatment cost?", "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "pred": "SELECT MAX(T1.cost_of_treatment) FROM treatments AS T1", "tokens": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Show me the cost of the most recently performed treatment.", "gold": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "pred": "SELECT MAX(cost_of_treatment) FROM treatments", "tokens": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "How many dogs have not gone through any treatment?", "gold": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "pred": "SELECT COUNT(dog_id) FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments )", "tokens": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Tell me the number of dogs that have not received any treatment .", "gold": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "pred": "SELECT COUNT(T1.dog_id) FROM dogs AS T1 LEFT JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T2.dog_id IS NULL", "tokens": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "How many owners temporarily do not have any dogs?", "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "pred": "SELECT COUNT(owner_id) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)", "tokens": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Find the number of owners who do not own any dogs at this moment.", "gold": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "pred": "SELECT COUNT(owner_id) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)", "tokens": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "How many professionals did not operate any treatment on dogs?", "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "pred": "SELECT COUNT(professional_id) FROM professionals EXCEPT SELECT T2.professional_id FROM treatments AS T1 INNER JOIN professionals AS T2 ON T1.professional_id = T2.professional_id", "tokens": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Find the number of professionals who have not treated any dogs.", "gold": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "pred": "SELECT COUNT(T1.professional_id) FROM professionals AS T1 LEFT JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.professional_id IS NULL", "tokens": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "pred": "SELECT T2.name, T2.age, T2.weight FROM breeds AS T1 INNER JOIN dogs AS T2 ON T1.breed_code = T2.breed_code WHERE T2.abandoned_yn = '1'", "tokens": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "gold": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "pred": "SELECT T1.name, T1.age, T1.weight FROM dogs AS T1 INNER JOIN sizes AS T2 ON T1.size_code = T2.size_code WHERE T1.abandoned_yn = '1'", "tokens": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What is the average age of all the dogs?", "gold": "SELECT avg(age) FROM Dogs", "pred": "SELECT CAST(SUM(T2.age) AS REAL) / COUNT(T2.dog_id) FROM dogs AS T2", "tokens": ["select", "avg", "(", "age", ")", "from", "dogs"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Compute the average age of all the dogs.", "gold": "SELECT avg(age) FROM Dogs", "pred": "SELECT CAST(SUM(CAST(REPLACE(SUBSTR(T2.age, 1, INSTR(T2.age, '-') - 1), 'years', '') AS REAL)) + 0) AS REAL) / COUNT(T2.dog_id) FROM dogs AS T2 INNER JOIN breeds AS T3 ON T2.breed_code = T3.breed_code", "tokens": ["select", "avg", "(", "age", ")", "from", "dogs"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What is the age of the oldest dog?", "gold": "SELECT max(age) FROM Dogs", "pred": "SELECT T2.age FROM breeds AS T1 INNER JOIN dogs AS T2 ON T1.breed_code = T2.breed_code ORDER BY T2.age DESC LIMIT 1", "tokens": ["select", "max", "(", "age", ")", "from", "dogs"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Tell me the age of the oldest dog.", "gold": "SELECT max(age) FROM Dogs", "pred": "SELECT MAX(T1.age) FROM dogs AS T1", "tokens": ["select", "max", "(", "age", ")", "from", "dogs"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "How much does each charge type costs? List both charge type and amount.", "gold": "SELECT charge_type ,  charge_amount FROM Charges", "pred": "SELECT T1.charge_type, T1.charge_amount FROM charges AS T1 GROUP BY T1.charge_type", "tokens": ["select", "charge_type", ",", "charge_amount", "from", "charges"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List each charge type and its amount.", "gold": "SELECT charge_type ,  charge_amount FROM Charges", "pred": "SELECT T1.charge_type, T1.charge_amount FROM charges AS T1", "tokens": ["select", "charge_type", ",", "charge_amount", "from", "charges"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "How much does the most expensive charge type costs?", "gold": "SELECT max(charge_amount) FROM Charges", "pred": "SELECT T1.charge_amount FROM charges AS T1 INNER JOIN ( SELECT charge_type, MAX(charge_amount) AS max_charge_amount FROM charges GROUP BY charge_type ) AS T2 ON T1.charge_type = T2.charge_type WHERE T1.charge_amount = T2.max_charge_amount", "tokens": ["select", "max", "(", "charge_amount", ")", "from", "charges"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What is the charge amount of the most expensive charge type?", "gold": "SELECT max(charge_amount) FROM Charges", "pred": "SELECT T1.charge_amount FROM charges AS T1 INNER JOIN ( SELECT charge_type, MAX(charge_amount) AS max_charge_amount FROM charges GROUP BY charge_type ) AS T2 ON T1.charge_type = T2.charge_type AND T1.charge_amount = T2.max_charge_amount", "tokens": ["select", "max", "(", "charge_amount", ")", "from", "charges"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List the email, cell phone and home phone of all the professionals.", "gold": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "pred": "SELECT email_address, cell_number, home_phone FROM professionals", "tokens": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are the email, cell phone and home phone of each professional?", "gold": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "pred": "SELECT email_address FROM professionals", "tokens": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 3, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are all the possible breed type and size type combinations?", "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "pred": "SELECT DISTINCT T1.breed_name, T2.size_description FROM breeds AS T1 INNER JOIN sizes AS T2 ON T1.breed_code = T2.size_code", "tokens": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "Find the distinct breed type and size type combinations for dogs.", "gold": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "pred": "SELECT DISTINCT T1.breed_name, T3.size_description FROM breeds AS T1 INNER JOIN dogs AS T2 ON T1.breed_code = T2.breed_code INNER JOIN sizes AS T3 ON T2.size_code = T3.size_code", "tokens": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "List the first name of all the professionals along with the description of the treatment they have done.", "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "pred": "SELECT T1.first_name FROM professionals AS T1 INNER JOIN treatments AS T2 ON T1.professional_id = T2.professional_id INNER JOIN treatment_types AS T3 ON T3.treatment_type_code = T2.treatment_type_code", "tokens": ["select", "distinct", "t1.first_name", ",", "t3.treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "join", "treatment_types", "as", "t3", "on", "t2.treatment_type_code", "=", "t3.treatment_type_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 25, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "dog_kennels", "question": "What are each professional's first name and description of the treatment they have performed?", "gold": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "pred": "SELECT T1.first_name, T2.treatment_type_description FROM professionals AS T1 INNER JOIN treatment_types AS T2 ON T1.professional_id = T2.treatment_type_code", "tokens": ["select", "distinct", "t1.first_name", ",", "t3.treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "join", "treatment_types", "as", "t3", "on", "t2.treatment_type_code", "=", "t3.treatment_type_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 25, "num_table_aliases": 3, "num_joins": 2, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "How many singers are there?", "gold": "SELECT count(*) FROM singer", "pred": "SELECT COUNT(*) FROM singer", "tokens": ["select", "count", "(", "*", ")", "from", "singer"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "What is the count of singers?", "gold": "SELECT count(*) FROM singer", "pred": "SELECT COUNT(name) FROM singer", "tokens": ["select", "count", "(", "*", ")", "from", "singer"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "List the name of singers in ascending order of net worth.", "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "pred": "SELECT T1.name FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id", "tokens": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "What are the names of singers ordered by ascending net worth?", "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "pred": "SELECT name FROM singer ORDER BY net_worth_millions", "tokens": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": true, "num_order_attributes": 1, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "What are the birth year and citizenship of singers?", "gold": "SELECT Birth_Year ,  Citizenship FROM singer", "pred": "SELECT DISTINCT T1.birth_year, T1.citizenship FROM singer AS T1", "tokens": ["select", "birth_year", ",", "citizenship", "from", "singer"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "What are the birth years and citizenships of the singers?", "gold": "SELECT Birth_Year ,  Citizenship FROM singer", "pred": "SELECT T1.birth_year, T1.citizenship FROM singer AS T1", "tokens": ["select", "birth_year", ",", "citizenship", "from", "singer"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 6, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "List the name of singers whose citizenship is not \"France\".", "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "pred": "SELECT name FROM singer WHERE citizenship!= 'France'", "tokens": ["select", "name", "from", "singer", "where", "citizenship", "!=", "\"France\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "singer", "question": "What are the names of the singers who are not French citizens?", "gold": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "pred": "SELECT T2.name FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T1.citizenship!= 'French'", "tokens": ["select", "name", "from", "singer", "where", "citizenship", "!=", "\"France\""], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 8, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "singer", "question": "Show the name of singers whose birth year is either 1948 or 1949?", "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "pred": "SELECT T1.name FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T1.birth_year = 1948 OR T1.birth_year = 1949", "tokens": ["select", "name", "from", "singer", "where", "birth_year", "=", "1948", "or", "birth_year", "=", "1949"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "singer", "question": "What are the names of the singers whose birth years are either 1948 or 1949?", "gold": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "pred": "SELECT T1.name FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T1.birth_year = 1948", "tokens": ["select", "name", "from", "singer", "where", "birth_year", "=", "1948", "or", "birth_year", "=", "1949"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "singer", "question": "What is the name of the singer with the largest net worth?", "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "pred": "SELECT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id ORDER BY T2.net_worth_millions DESC LIMIT 1", "tokens": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "What is the name of the singer who is worth the most?", "gold": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "pred": "SELECT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id ORDER BY T2.net_worth_millions DESC LIMIT 1", "tokens": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 10, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "Show different citizenship of singers and the number of singers of each citizenship.", "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "pred": "SELECT DISTINCT T2.citizenship, COUNT(T2.citizenship) FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.citizenship", "tokens": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "singer", "question": "For each citizenship, how many singers are from that country?", "gold": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "pred": "SELECT COUNT(T1.citizenship) FROM singer AS T1 GROUP BY T1.citizenship", "tokens": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "singer", "question": "Please show the most common citizenship of singers.", "gold": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "pred": "SELECT T2.citizenship FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.citizenship ORDER BY COUNT(T1.singer_id) DESC LIMIT 1", "tokens": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "singer", "question": "What is the most common singer citizenship ?", "gold": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "pred": "SELECT T2.citizenship FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.citizenship ORDER BY COUNT(T2.citizenship) DESC LIMIT 1", "tokens": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1"], "hardness": "hard", "sql_features": {"has_subquery": false, "has_limit": true, "has_order_by": true, "num_order_attributes": 1, "query_length": 16, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 3, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "singer", "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "pred": "SELECT T1.citizenship, MAX(T2.net_worth_millions) FROM singer AS T1 INNER JOIN singer AS T2 ON T1.citizenship = T2.citizenship GROUP BY T1.citizenship", "tokens": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "singer", "question": "For each citizenship, what is the maximum net worth?", "gold": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "pred": "SELECT T2.citizenship, MAX(T1.net_worth_millions) FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.citizenship", "tokens": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 12, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "singer", "question": "Show titles of songs and names of singers.", "gold": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "pred": "SELECT T1.title, T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id", "tokens": ["select", "t2.title", ",", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "What are the song titles and singer names?", "gold": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "pred": "SELECT T1.title FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id", "tokens": ["select", "t2.title", ",", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 16, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "Show distinct names of singers that have songs with sales more than 300000.", "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "pred": "SELECT DISTINCT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id WHERE T1.sales > 300000", "tokens": ["select", "distinct", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "where", "t2.sales", ">", "300000"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "singer", "question": "what are the different names of the singers that have sales more than 300000?", "gold": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "pred": "SELECT DISTINCT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id WHERE T1.sales > 300000", "tokens": ["select", "distinct", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "where", "t2.sales", ">", "300000"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 19, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "singer", "question": "Show the names of singers that have more than one song.", "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "pred": "SELECT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.name HAVING COUNT(T2.name) > 1", "tokens": ["select", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "singer", "question": "What are the names of the singers that have more than one songs?", "gold": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "pred": "SELECT T2.name FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.name HAVING COUNT(T1.song_id) > 1", "tokens": ["select", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "1"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 24, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "singer", "question": "Show the names of singers and the total sales of their songs.", "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "pred": "SELECT T1.name, SUM(T2.sales) FROM singer AS T1 INNER JOIN song AS T2 ON T1.singer_id = T2.singer_id GROUP BY T1.name", "tokens": ["select", "t1.name", ",", "sum", "(", "t2.sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "singer", "question": "For each singer name, what is the total sales for their songs?", "gold": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "pred": "SELECT T2.name, SUM(T1.sales) FROM song AS T1 INNER JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.name", "tokens": ["select", "t1.name", ",", "sum", "(", "t2.sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 22, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 1, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "singer", "question": "List the name of singers that do not have any song.", "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "pred": "SELECT T1.name FROM singer AS T1 LEFT JOIN song AS T2 ON T1.singer_id = T2.singer_id WHERE T2.song_id IS NULL", "tokens": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "What is the sname of every sing that does not have any song?", "gold": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "pred": "SELECT DISTINCT T2.name FROM song AS T1 LEFT JOIN singer AS T2 ON T1.singer_id = T2.singer_id WHERE T1.song_id IS NULL", "tokens": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")"], "hardness": "medium", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 14, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 0, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "singer", "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "pred": "SELECT T2.citizenship FROM singer AS T1 INNER JOIN singer AS T2 ON T1.citizenship = T2.citizenship WHERE T1.birth_year < 1945 AND T1.birth_year > 1955", "tokens": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "1945", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "1955"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "singer", "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "gold": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "pred": "SELECT T1.citizenship FROM singer AS T1 INNER JOIN singer AS T2 ON T1.citizenship = T2.citizenship WHERE T1.birth_year < 1945 AND T1.birth_year > 1955", "tokens": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "1945", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "1955"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 2, "num_group_by": 0}}
{"db_id": "real_estate_properties", "question": "How many available features are there in total?", "gold": "SELECT count(*) FROM Other_Available_Features", "pred": "SELECT COUNT(feature_id) FROM other_available_features", "tokens": ["select", "count", "(", "*", ")", "from", "other_available_features"], "hardness": "easy", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 7, "num_table_aliases": 0, "num_joins": 0, "num_components_1": 0, "num_components_2": 0, "num_agg": 1, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 0}}
{"db_id": "real_estate_properties", "question": "What is the feature type name of feature AirCon?", "gold": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "pred": "SELECT T2.feature_type_name FROM other_available_features AS T1 INNER JOIN ref_feature_types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = 'AirCon'", "tokens": ["select", "t2.feature_type_name", "from", "other_available_features", "as", "t1", "join", "ref_feature_types", "as", "t2", "on", "t1.feature_type_code", "=", "t2.feature_type_code", "where", "t1.feature_name", "=", "\"AirCon\""], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 18, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 1, "num_group_by": 0}}
{"db_id": "real_estate_properties", "question": "Show the property type descriptions of properties belonging to that code.", "gold": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "pred": "SELECT T1.property_type_description FROM ref_property_types AS T1 INNER JOIN properties AS T2 ON T1.property_type_code = T2.property_type_code", "tokens": ["select", "t2.property_type_description", "from", "properties", "as", "t1", "join", "ref_property_types", "as", "t2", "on", "t1.property_type_code", "=", "t2.property_type_code", "group", "by", "t1.property_type_code"], "hardness": "medium", "sql_features": {"has_subquery": false, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 17, "num_table_aliases": 2, "num_joins": 1, "num_components_1": 2, "num_components_2": 0, "num_agg": 0, "num_select_cols": 1, "num_where_conditions": 0, "num_group_by": 1}}
{"db_id": "real_estate_properties", "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "gold": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "pred": "SELECT T2.property_name FROM ref_property_types AS T1 INNER JOIN properties AS T2 ON T1.property_type_code = T2.property_type_code WHERE T1.property_type_description = 'House' OR T1.property_type_description = 'Apartment' AND T2.room_count > 1", "tokens": ["select", "property_name", "from", "properties", "where", "property_type_code", "=", "\"House\"", "union", "select", "property_name", "from", "properties", "where", "property_type_code", "=", "\"Apartment\"", "and", "room_count", ">", "1"], "hardness": "extra", "sql_features": {"has_subquery": true, "has_limit": false, "has_order_by": false, "num_order_attributes": 0, "query_length": 21, "num_table_aliases": 1, "num_joins": 0, "num_components_1": 1, "num_components_2": 1, "num_agg": 0, "num_select_cols": 2, "num_where_conditions": 3, "num_group_by": 0}}
