{
  "perpetrator": {
    "ddl_string": "CREATE TABLE perpetrator (Perpetrator_ID INTEGER, People_ID INTEGER, Date TEXT, Year INTEGER, Location TEXT, Country TEXT, Killed INTEGER, Injured INTEGER, PRIMARY KEY (Perpetrator_ID));\nCREATE TABLE people (People_ID INTEGER, Name TEXT, Height INTEGER, Weight INTEGER, Home Town TEXT, PRIMARY KEY (People_ID));\nFOREIGN KEY (perpetrator.People_ID) REFERENCES people (People_ID);",
    "schema_complexity": [
      13,
      1
    ]
  },
  "college_2": {
    "ddl_string": "CREATE TABLE classroom (building TEXT, room_number TEXT, capacity INTEGER, PRIMARY KEY (building));\nCREATE TABLE department (dept_name TEXT, building TEXT, budget INTEGER, PRIMARY KEY (dept_name));\nCREATE TABLE course (course_id TEXT, title TEXT, dept_name TEXT, credits INTEGER, PRIMARY KEY (course_id));\nCREATE TABLE instructor (ID TEXT, name TEXT, dept_name TEXT, salary INTEGER, PRIMARY KEY (ID));\nCREATE TABLE section (course_id TEXT, sec_id TEXT, semester TEXT, year INTEGER, building TEXT, room_number TEXT, time_slot_id TEXT, PRIMARY KEY (course_id));\nCREATE TABLE teaches (ID TEXT, course_id TEXT, sec_id TEXT, semester TEXT, year INTEGER, PRIMARY KEY (ID));\nCREATE TABLE student (ID TEXT, name TEXT, dept_name TEXT, tot_cred INTEGER, PRIMARY KEY (ID));\nCREATE TABLE takes (ID TEXT, course_id TEXT, sec_id TEXT, semester TEXT, year INTEGER, grade TEXT, PRIMARY KEY (ID));\nCREATE TABLE advisor (s_ID TEXT, i_ID TEXT, PRIMARY KEY (s_ID));\nCREATE TABLE time_slot (time_slot_id TEXT, day TEXT, start_hr INTEGER, start_min INTEGER, end_hr INTEGER, end_min INTEGER, PRIMARY KEY (time_slot_id));\nCREATE TABLE prereq (course_id TEXT, prereq_id TEXT, PRIMARY KEY (course_id));\nFOREIGN KEY (course.dept_name) REFERENCES department (dept_name);\nFOREIGN KEY (instructor.dept_name) REFERENCES department (dept_name);\nFOREIGN KEY (section.building) REFERENCES classroom (building);\nFOREIGN KEY (section.room_number) REFERENCES classroom (room_number);\nFOREIGN KEY (section.course_id) REFERENCES course (course_id);\nFOREIGN KEY (teaches.ID) REFERENCES instructor (ID);\nFOREIGN KEY (teaches.course_id) REFERENCES section (course_id);\nFOREIGN KEY (teaches.sec_id) REFERENCES section (sec_id);\nFOREIGN KEY (teaches.semester) REFERENCES section (semester);\nFOREIGN KEY (teaches.year) REFERENCES section (year);\nFOREIGN KEY (student.dept_name) REFERENCES department (dept_name);\nFOREIGN KEY (takes.ID) REFERENCES student (ID);\nFOREIGN KEY (takes.course_id) REFERENCES section (course_id);\nFOREIGN KEY (takes.sec_id) REFERENCES section (sec_id);\nFOREIGN KEY (takes.semester) REFERENCES section (semester);\nFOREIGN KEY (takes.year) REFERENCES section (year);\nFOREIGN KEY (advisor.s_ID) REFERENCES student (ID);\nFOREIGN KEY (advisor.i_ID) REFERENCES instructor (ID);\nFOREIGN KEY (prereq.prereq_id) REFERENCES course (course_id);\nFOREIGN KEY (prereq.course_id) REFERENCES course (course_id);",
    "schema_complexity": [
      46,
      20
    ]
  },
  "flight_company": {
    "ddl_string": "CREATE TABLE airport (id INTEGER, City TEXT, Country TEXT, IATA TEXT, ICAO TEXT, name TEXT, PRIMARY KEY (id));\nCREATE TABLE operate_company (id INTEGER, name TEXT, Type TEXT, Principal_activities TEXT, Incorporated_in TEXT, Group_Equity_Shareholding INTEGER, PRIMARY KEY (id));\nCREATE TABLE flight (id INTEGER, Vehicle_Flight_number TEXT, Date TEXT, Pilot TEXT, Velocity INTEGER, Altitude INTEGER, airport_id INTEGER, company_id INTEGER, PRIMARY KEY (id));\nFOREIGN KEY (flight.company_id) REFERENCES operate_company (id);\nFOREIGN KEY (flight.airport_id) REFERENCES airport (id);",
    "schema_complexity": [
      20,
      2
    ]
  },
  "icfp_1": {
    "ddl_string": "CREATE TABLE Inst (instID INTEGER, name TEXT, country TEXT, PRIMARY KEY (instID));\nCREATE TABLE Authors (authID INTEGER, lname TEXT, fname TEXT, PRIMARY KEY (authID));\nCREATE TABLE Papers (paperID INTEGER, title TEXT, PRIMARY KEY (paperID));\nCREATE TABLE Authorship (authID INTEGER, instID INTEGER, paperID INTEGER, authOrder INTEGER, PRIMARY KEY (authID));\nFOREIGN KEY (Authorship.paperID) REFERENCES Papers (paperID);\nFOREIGN KEY (Authorship.instID) REFERENCES Inst (instID);\nFOREIGN KEY (Authorship.authID) REFERENCES Authors (authID);",
    "schema_complexity": [
      12,
      3
    ]
  },
  "body_builder": {
    "ddl_string": "CREATE TABLE body_builder (Body_Builder_ID INTEGER, People_ID INTEGER, Snatch INTEGER, Clean_Jerk INTEGER, Total INTEGER, PRIMARY KEY (Body_Builder_ID));\nCREATE TABLE people (People_ID INTEGER, Name TEXT, Height INTEGER, Weight INTEGER, Birth_Date TEXT, Birth_Place TEXT, PRIMARY KEY (People_ID));\nFOREIGN KEY (body_builder.People_ID) REFERENCES people (People_ID);",
    "schema_complexity": [
      11,
      1
    ]
  },
  "storm_record": {
    "ddl_string": "CREATE TABLE storm (Storm_ID INTEGER, Name TEXT, Dates_active TEXT, Max_speed INTEGER, Damage_millions_USD INTEGER, Number_Deaths INTEGER, PRIMARY KEY (Storm_ID));\nCREATE TABLE region (Region_id INTEGER, Region_code TEXT, Region_name TEXT, PRIMARY KEY (Region_id));\nCREATE TABLE affected_region (Region_id INTEGER, Storm_ID INTEGER, Number_city_affected INTEGER, PRIMARY KEY (Region_id));\nFOREIGN KEY (affected_region.Storm_ID) REFERENCES storm (Storm_ID);\nFOREIGN KEY (affected_region.Region_id) REFERENCES region (Region_id);",
    "schema_complexity": [
      12,
      2
    ]
  },
  "pilot_record": {
    "ddl_string": "CREATE TABLE aircraft (Aircraft_ID INTEGER, Order_Year INTEGER, Manufacturer TEXT, Model TEXT, Fleet_Series TEXT, Powertrain TEXT, Fuel_Propulsion TEXT, PRIMARY KEY (Aircraft_ID));\nCREATE TABLE pilot (Pilot_ID INTEGER, Pilot_name TEXT, Rank INTEGER, Age INTEGER, Nationality TEXT, Position TEXT, Join_Year INTEGER, Team TEXT, PRIMARY KEY (Pilot_ID));\nCREATE TABLE pilot_record (Record_ID INTEGER, Pilot_ID INTEGER, Aircraft_ID INTEGER, Date TEXT, PRIMARY KEY (Pilot_ID));\nFOREIGN KEY (pilot_record.Aircraft_ID) REFERENCES aircraft (Aircraft_ID);\nFOREIGN KEY (pilot_record.Pilot_ID) REFERENCES pilot (Pilot_ID);",
    "schema_complexity": [
      19,
      2
    ]
  },
  "race_track": {
    "ddl_string": "CREATE TABLE race (Race_ID INTEGER, Name TEXT, Class TEXT, Date TEXT, Track_ID TEXT, PRIMARY KEY (Race_ID));\nCREATE TABLE track (Track_ID INTEGER, Name TEXT, Location TEXT, Seating INTEGER, Year_Opened INTEGER, PRIMARY KEY (Track_ID));\nFOREIGN KEY (race.Track_ID) REFERENCES track (Track_ID);",
    "schema_complexity": [
      10,
      1
    ]
  },
  "academic": {
    "ddl_string": "CREATE TABLE author (aid INTEGER, homepage TEXT, name TEXT, oid INTEGER, PRIMARY KEY (aid));\nCREATE TABLE conference (cid INTEGER, homepage TEXT, name TEXT, PRIMARY KEY (cid));\nCREATE TABLE domain (did INTEGER, name TEXT, PRIMARY KEY (did));\nCREATE TABLE domain_author (aid INTEGER, did INTEGER, PRIMARY KEY (did));\nCREATE TABLE domain_conference (cid INTEGER, did INTEGER, PRIMARY KEY (did));\nCREATE TABLE journal (homepage TEXT, jid INTEGER, name TEXT, PRIMARY KEY (jid));\nCREATE TABLE domain_journal (did INTEGER, jid INTEGER, PRIMARY KEY (did));\nCREATE TABLE keyword (keyword TEXT, kid INTEGER, PRIMARY KEY (kid));\nCREATE TABLE domain_keyword (did INTEGER, kid INTEGER, PRIMARY KEY (did));\nCREATE TABLE publication (abstract TEXT, cid TEXT, citation_num INTEGER, jid INTEGER, pid INTEGER, reference_num INTEGER, title TEXT, year INTEGER, PRIMARY KEY (pid));\nCREATE TABLE domain_publication (did INTEGER, pid INTEGER, PRIMARY KEY (did));\nCREATE TABLE organization (continent TEXT, homepage TEXT, name TEXT, oid INTEGER, PRIMARY KEY (oid));\nCREATE TABLE publication_keyword (pid INTEGER, kid INTEGER, PRIMARY KEY (kid));\nCREATE TABLE writes (aid INTEGER, pid INTEGER, PRIMARY KEY (aid));\nCREATE TABLE cite (cited INTEGER, citing INTEGER);\nFOREIGN KEY (domain_author.did) REFERENCES domain (did);\nFOREIGN KEY (domain_author.aid) REFERENCES author (aid);\nFOREIGN KEY (domain_conference.did) REFERENCES domain (did);\nFOREIGN KEY (domain_conference.cid) REFERENCES conference (cid);\nFOREIGN KEY (domain_journal.did) REFERENCES domain (did);\nFOREIGN KEY (domain_journal.jid) REFERENCES journal (jid);\nFOREIGN KEY (domain_keyword.did) REFERENCES domain (did);\nFOREIGN KEY (domain_keyword.kid) REFERENCES keyword (kid);\nFOREIGN KEY (publication.cid) REFERENCES conference (cid);\nFOREIGN KEY (publication.jid) REFERENCES journal (jid);\nFOREIGN KEY (domain_publication.did) REFERENCES domain (did);\nFOREIGN KEY (domain_publication.pid) REFERENCES publication (pid);\nFOREIGN KEY (publication_keyword.kid) REFERENCES keyword (kid);\nFOREIGN KEY (publication_keyword.pid) REFERENCES publication (pid);\nFOREIGN KEY (writes.aid) REFERENCES author (aid);\nFOREIGN KEY (writes.pid) REFERENCES publication (pid);\nFOREIGN KEY (cite.citing) REFERENCES publication (pid);\nFOREIGN KEY (cite.cited) REFERENCES publication (pid);",
    "schema_complexity": [
      42,
      18
    ]
  },
  "department_store": {
    "ddl_string": "CREATE TABLE Addresses (address_id INTEGER, address_details TEXT, PRIMARY KEY (address_id));\nCREATE TABLE Staff (staff_id INTEGER, staff_gender TEXT, staff_name TEXT, PRIMARY KEY (staff_id));\nCREATE TABLE Suppliers (supplier_id INTEGER, supplier_name TEXT, supplier_phone TEXT, PRIMARY KEY (supplier_id));\nCREATE TABLE Department_Store_Chain (dept_store_chain_id INTEGER, dept_store_chain_name TEXT, PRIMARY KEY (dept_store_chain_id));\nCREATE TABLE Customers (customer_id INTEGER, payment_method_code TEXT, customer_code TEXT, customer_name TEXT, customer_address TEXT, customer_phone TEXT, customer_email TEXT, PRIMARY KEY (customer_id));\nCREATE TABLE Products (product_id INTEGER, product_type_code TEXT, product_name TEXT, product_price INTEGER, PRIMARY KEY (product_id));\nCREATE TABLE Supplier_Addresses (supplier_id INTEGER, address_id INTEGER, date_from OTHERS, date_to OTHERS, PRIMARY KEY (supplier_id));\nCREATE TABLE Customer_Addresses (customer_id INTEGER, address_id INTEGER, date_from OTHERS, date_to OTHERS, PRIMARY KEY (customer_id));\nCREATE TABLE Customer_Orders (order_id INTEGER, customer_id INTEGER, order_status_code TEXT, order_date OTHERS, PRIMARY KEY (order_id));\nCREATE TABLE Department_Stores (dept_store_id INTEGER, dept_store_chain_id INTEGER, store_name TEXT, store_address TEXT, store_phone TEXT, store_email TEXT, PRIMARY KEY (dept_store_id));\nCREATE TABLE Departments (department_id INTEGER, dept_store_id INTEGER, department_name TEXT, PRIMARY KEY (department_id));\nCREATE TABLE Order_Items (order_item_id INTEGER, order_id INTEGER, product_id INTEGER, PRIMARY KEY (order_item_id));\nCREATE TABLE Product_Suppliers (product_id INTEGER, supplier_id INTEGER, date_supplied_from OTHERS, date_supplied_to OTHERS, total_amount_purchased TEXT, total_value_purchased INTEGER, PRIMARY KEY (product_id));\nCREATE TABLE Staff_Department_Assignments (staff_id INTEGER, department_id INTEGER, date_assigned_from OTHERS, job_title_code TEXT, date_assigned_to OTHERS, PRIMARY KEY (staff_id));\nFOREIGN KEY (Supplier_Addresses.supplier_id) REFERENCES Suppliers (supplier_id);\nFOREIGN KEY (Supplier_Addresses.address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Customer_Addresses.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Customer_Addresses.address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Customer_Orders.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Department_Stores.dept_store_chain_id) REFERENCES Department_Store_Chain (dept_store_chain_id);\nFOREIGN KEY (Departments.dept_store_id) REFERENCES Department_Stores (dept_store_id);\nFOREIGN KEY (Order_Items.product_id) REFERENCES Products (product_id);\nFOREIGN KEY (Order_Items.order_id) REFERENCES Customer_Orders (order_id);\nFOREIGN KEY (Product_Suppliers.product_id) REFERENCES Products (product_id);\nFOREIGN KEY (Product_Suppliers.supplier_id) REFERENCES Suppliers (supplier_id);\nFOREIGN KEY (Staff_Department_Assignments.staff_id) REFERENCES Staff (staff_id);\nFOREIGN KEY (Staff_Department_Assignments.department_id) REFERENCES Departments (department_id);",
    "schema_complexity": [
      56,
      13
    ]
  },
  "music_4": {
    "ddl_string": "CREATE TABLE artist (Artist_ID INTEGER, Artist TEXT, Age INTEGER, Famous_Title TEXT, Famous_Release_date TEXT, PRIMARY KEY (Artist_ID));\nCREATE TABLE volume (Volume_ID INTEGER, Volume_Issue TEXT, Issue_Date TEXT, Weeks_on_Top INTEGER, Song TEXT, Artist_ID INTEGER, PRIMARY KEY (Volume_ID));\nCREATE TABLE music_festival (ID INTEGER, Music_Festival TEXT, Date_of_ceremony TEXT, Category TEXT, Volume INTEGER, Result TEXT, PRIMARY KEY (ID));\nFOREIGN KEY (volume.Artist_ID) REFERENCES artist (Artist_ID);\nFOREIGN KEY (music_festival.Volume) REFERENCES volume (Volume_ID);",
    "schema_complexity": [
      17,
      2
    ]
  },
  "insurance_fnol": {
    "ddl_string": "CREATE TABLE Customers (Customer_ID INTEGER, Customer_name TEXT, PRIMARY KEY (Customer_ID));\nCREATE TABLE Services (Service_ID INTEGER, Service_name TEXT, PRIMARY KEY (Service_ID));\nCREATE TABLE Available_Policies (Policy_ID INTEGER, policy_type_code TEXT, Customer_Phone TEXT, PRIMARY KEY (Policy_ID));\nCREATE TABLE Customers_Policies (Customer_ID INTEGER, Policy_ID INTEGER, Date_Opened OTHERS, Date_Closed OTHERS, PRIMARY KEY (Customer_ID));\nCREATE TABLE First_Notification_of_Loss (FNOL_ID INTEGER, Customer_ID INTEGER, Policy_ID INTEGER, Service_ID INTEGER, PRIMARY KEY (FNOL_ID));\nCREATE TABLE Claims (Claim_ID INTEGER, FNOL_ID INTEGER, Effective_Date OTHERS, PRIMARY KEY (Claim_ID));\nCREATE TABLE Settlements (Settlement_ID INTEGER, Claim_ID INTEGER, Effective_Date OTHERS, Settlement_Amount INTEGER, PRIMARY KEY (Settlement_ID));\nFOREIGN KEY (Customers_Policies.Policy_ID) REFERENCES Available_Policies (Policy_ID);\nFOREIGN KEY (Customers_Policies.Customer_ID) REFERENCES Customers (Customer_ID);\nFOREIGN KEY (First_Notification_of_Loss.Customer_ID) REFERENCES Customers_Policies (Customer_ID);\nFOREIGN KEY (First_Notification_of_Loss.Policy_ID) REFERENCES Customers_Policies (Policy_ID);\nFOREIGN KEY (First_Notification_of_Loss.Service_ID) REFERENCES Services (Service_ID);\nFOREIGN KEY (Claims.FNOL_ID) REFERENCES First_Notification_of_Loss (FNOL_ID);\nFOREIGN KEY (Settlements.Claim_ID) REFERENCES Claims (Claim_ID);",
    "schema_complexity": [
      22,
      7
    ]
  },
  "cinema": {
    "ddl_string": "CREATE TABLE film (Film_ID INTEGER, Rank_in_series INTEGER, Number_in_season INTEGER, Title TEXT, Directed_by TEXT, Original_air_date TEXT, Production_code TEXT, PRIMARY KEY (Film_ID));\nCREATE TABLE cinema (Cinema_ID INTEGER, Name TEXT, Openning_year INTEGER, Capacity INTEGER, Location TEXT, PRIMARY KEY (Cinema_ID));\nCREATE TABLE schedule (Cinema_ID INTEGER, Film_ID INTEGER, Date TEXT, Show_times_per_day INTEGER, Price INTEGER, PRIMARY KEY (Cinema_ID));\nFOREIGN KEY (schedule.Cinema_ID) REFERENCES cinema (Cinema_ID);\nFOREIGN KEY (schedule.Film_ID) REFERENCES film (Film_ID);",
    "schema_complexity": [
      17,
      2
    ]
  },
  "decoration_competition": {
    "ddl_string": "CREATE TABLE college (College_ID INTEGER, Name TEXT, Leader_Name TEXT, College_Location TEXT, PRIMARY KEY (College_ID));\nCREATE TABLE member (Member_ID INTEGER, Name TEXT, Country TEXT, College_ID INTEGER, PRIMARY KEY (Member_ID));\nCREATE TABLE round (Round_ID INTEGER, Member_ID INTEGER, Decoration_Theme TEXT, Rank_in_Round INTEGER, PRIMARY KEY (Member_ID));\nFOREIGN KEY (member.College_ID) REFERENCES college (College_ID);\nFOREIGN KEY (round.Member_ID) REFERENCES member (Member_ID);",
    "schema_complexity": [
      12,
      2
    ]
  },
  "phone_market": {
    "ddl_string": "CREATE TABLE phone (Name TEXT, Phone_ID INTEGER, Memory_in_G INTEGER, Carrier TEXT, Price INTEGER, PRIMARY KEY (Phone_ID));\nCREATE TABLE market (Market_ID INTEGER, District TEXT, Num_of_employees INTEGER, Num_of_shops INTEGER, Ranking INTEGER, PRIMARY KEY (Market_ID));\nCREATE TABLE phone_market (Market_ID INTEGER, Phone_ID TEXT, Num_of_stock INTEGER, PRIMARY KEY (Market_ID));\nFOREIGN KEY (phone_market.Phone_ID) REFERENCES phone (Phone_ID);\nFOREIGN KEY (phone_market.Market_ID) REFERENCES market (Market_ID);",
    "schema_complexity": [
      13,
      2
    ]
  },
  "store_product": {
    "ddl_string": "CREATE TABLE product (product_id INTEGER, product TEXT, dimensions TEXT, dpi INTEGER, pages_per_minute_color INTEGER, max_page_size TEXT, interface TEXT, PRIMARY KEY (product_id));\nCREATE TABLE store (Store_ID INTEGER, Store_Name TEXT, Type TEXT, Area_size INTEGER, Number_of_product_category INTEGER, Ranking INTEGER, PRIMARY KEY (Store_ID));\nCREATE TABLE district (District_ID INTEGER, District_name TEXT, Headquartered_City TEXT, City_Population INTEGER, City_Area INTEGER, PRIMARY KEY (District_ID));\nCREATE TABLE store_product (Store_ID INTEGER, Product_ID INTEGER, PRIMARY KEY (Store_ID));\nCREATE TABLE store_district (Store_ID INTEGER, District_ID INTEGER, PRIMARY KEY (Store_ID));\nFOREIGN KEY (store_product.Store_ID) REFERENCES store (Store_ID);\nFOREIGN KEY (store_district.District_ID) REFERENCES district (District_ID);\nFOREIGN KEY (store_district.Store_ID) REFERENCES store (Store_ID);",
    "schema_complexity": [
      22,
      3
    ]
  },
  "assets_maintenance": {
    "ddl_string": "CREATE TABLE Third_Party_Companies (company_id INTEGER, company_type TEXT, company_name TEXT, company_address TEXT, other_company_details TEXT, PRIMARY KEY (company_id));\nCREATE TABLE Maintenance_Contracts (maintenance_contract_id INTEGER, maintenance_contract_company_id INTEGER, contract_start_date OTHERS, contract_end_date OTHERS, other_contract_details TEXT, PRIMARY KEY (maintenance_contract_id));\nCREATE TABLE Parts (part_id INTEGER, part_name TEXT, chargeable_yn TEXT, chargeable_amount TEXT, other_part_details TEXT, PRIMARY KEY (part_id));\nCREATE TABLE Skills (skill_id INTEGER, skill_code TEXT, skill_description TEXT, PRIMARY KEY (skill_id));\nCREATE TABLE Staff (staff_id INTEGER, staff_name TEXT, gender TEXT, other_staff_details TEXT, PRIMARY KEY (staff_id));\nCREATE TABLE Assets (asset_id INTEGER, maintenance_contract_id INTEGER, supplier_company_id INTEGER, asset_details TEXT, asset_make TEXT, asset_model TEXT, asset_acquired_date OTHERS, asset_disposed_date OTHERS, other_asset_details TEXT, PRIMARY KEY (asset_id));\nCREATE TABLE Asset_Parts (asset_id INTEGER, part_id INTEGER);\nCREATE TABLE Maintenance_Engineers (engineer_id INTEGER, company_id INTEGER, first_name TEXT, last_name TEXT, other_details TEXT, PRIMARY KEY (engineer_id));\nCREATE TABLE Engineer_Skills (engineer_id INTEGER, skill_id INTEGER);\nCREATE TABLE Fault_Log (fault_log_entry_id INTEGER, asset_id INTEGER, recorded_by_staff_id INTEGER, fault_log_entry_datetime OTHERS, fault_description TEXT, other_fault_details TEXT, PRIMARY KEY (fault_log_entry_id));\nCREATE TABLE Engineer_Visits (engineer_visit_id INTEGER, contact_staff_id INTEGER, engineer_id INTEGER, fault_log_entry_id INTEGER, fault_status TEXT, visit_start_datetime OTHERS, visit_end_datetime OTHERS, other_visit_details TEXT, PRIMARY KEY (engineer_visit_id));\nCREATE TABLE Part_Faults (part_fault_id INTEGER, part_id INTEGER, fault_short_name TEXT, fault_description TEXT, other_fault_details TEXT, PRIMARY KEY (part_fault_id));\nCREATE TABLE Fault_Log_Parts (fault_log_entry_id INTEGER, part_fault_id INTEGER, fault_status TEXT);\nCREATE TABLE Skills_Required_To_Fix (part_fault_id INTEGER, skill_id INTEGER);\nFOREIGN KEY (Maintenance_Contracts.maintenance_contract_company_id) REFERENCES Third_Party_Companies (company_id);\nFOREIGN KEY (Assets.supplier_company_id) REFERENCES Third_Party_Companies (company_id);\nFOREIGN KEY (Assets.maintenance_contract_id) REFERENCES Maintenance_Contracts (maintenance_contract_id);\nFOREIGN KEY (Asset_Parts.asset_id) REFERENCES Assets (asset_id);\nFOREIGN KEY (Asset_Parts.part_id) REFERENCES Parts (part_id);\nFOREIGN KEY (Maintenance_Engineers.company_id) REFERENCES Third_Party_Companies (company_id);\nFOREIGN KEY (Engineer_Skills.skill_id) REFERENCES Skills (skill_id);\nFOREIGN KEY (Engineer_Skills.engineer_id) REFERENCES Maintenance_Engineers (engineer_id);\nFOREIGN KEY (Fault_Log.recorded_by_staff_id) REFERENCES Staff (staff_id);\nFOREIGN KEY (Fault_Log.asset_id) REFERENCES Assets (asset_id);\nFOREIGN KEY (Engineer_Visits.contact_staff_id) REFERENCES Staff (staff_id);\nFOREIGN KEY (Engineer_Visits.engineer_id) REFERENCES Maintenance_Engineers (engineer_id);\nFOREIGN KEY (Engineer_Visits.fault_log_entry_id) REFERENCES Fault_Log (fault_log_entry_id);\nFOREIGN KEY (Part_Faults.part_id) REFERENCES Parts (part_id);\nFOREIGN KEY (Fault_Log_Parts.fault_log_entry_id) REFERENCES Fault_Log (fault_log_entry_id);\nFOREIGN KEY (Fault_Log_Parts.part_fault_id) REFERENCES Part_Faults (part_fault_id);\nFOREIGN KEY (Skills_Required_To_Fix.skill_id) REFERENCES Skills (skill_id);\nFOREIGN KEY (Skills_Required_To_Fix.part_fault_id) REFERENCES Part_Faults (part_fault_id);",
    "schema_complexity": [
      64,
      18
    ]
  },
  "student_assessment": {
    "ddl_string": "CREATE TABLE Addresses (address_id INTEGER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY (address_id));\nCREATE TABLE People (person_id INTEGER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY (person_id));\nCREATE TABLE Students (student_id INTEGER, student_details TEXT, PRIMARY KEY (student_id));\nCREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY (course_id));\nCREATE TABLE People_Addresses (person_address_id INTEGER, person_id INTEGER, address_id INTEGER, date_from OTHERS, date_to OTHERS, PRIMARY KEY (person_address_id));\nCREATE TABLE Student_Course_Registrations (student_id INTEGER, course_id INTEGER, registration_date OTHERS, PRIMARY KEY (student_id));\nCREATE TABLE Student_Course_Attendance (student_id INTEGER, course_id INTEGER, date_of_attendance OTHERS, PRIMARY KEY (student_id));\nCREATE TABLE Candidates (candidate_id INTEGER, candidate_details TEXT, PRIMARY KEY (candidate_id));\nCREATE TABLE Candidate_Assessments (candidate_id INTEGER, qualification TEXT, assessment_date OTHERS, asessment_outcome_code TEXT, PRIMARY KEY (candidate_id));\nFOREIGN KEY (Students.student_id) REFERENCES People (person_id);\nFOREIGN KEY (People_Addresses.address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (People_Addresses.person_id) REFERENCES People (person_id);\nFOREIGN KEY (Student_Course_Registrations.course_id) REFERENCES Courses (course_id);\nFOREIGN KEY (Student_Course_Registrations.student_id) REFERENCES Students (student_id);\nFOREIGN KEY (Student_Course_Attendance.student_id) REFERENCES Student_Course_Registrations (student_id);\nFOREIGN KEY (Student_Course_Attendance.course_id) REFERENCES Student_Course_Registrations (course_id);\nFOREIGN KEY (Candidates.candidate_id) REFERENCES People (person_id);\nFOREIGN KEY (Candidate_Assessments.candidate_id) REFERENCES Candidates (candidate_id);",
    "schema_complexity": [
      38,
      9
    ]
  },
  "dog_kennels": {
    "ddl_string": "CREATE TABLE Breeds (breed_code TEXT, breed_name TEXT, PRIMARY KEY (breed_code));\nCREATE TABLE Charges (charge_id INTEGER, charge_type TEXT, charge_amount INTEGER, PRIMARY KEY (charge_id));\nCREATE TABLE Sizes (size_code TEXT, size_description TEXT, PRIMARY KEY (size_code));\nCREATE TABLE Treatment_Types (treatment_type_code TEXT, treatment_type_description TEXT, PRIMARY KEY (treatment_type_code));\nCREATE TABLE Owners (owner_id INTEGER, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY (owner_id));\nCREATE TABLE Dogs (dog_id INTEGER, owner_id INTEGER, abandoned_yn TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth OTHERS, gender TEXT, weight TEXT, date_arrived OTHERS, date_adopted OTHERS, date_departed OTHERS, PRIMARY KEY (dog_id));\nCREATE TABLE Professionals (professional_id INTEGER, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT, PRIMARY KEY (professional_id));\nCREATE TABLE Treatments (treatment_id INTEGER, dog_id INTEGER, professional_id INTEGER, treatment_type_code TEXT, date_of_treatment OTHERS, cost_of_treatment INTEGER, PRIMARY KEY (treatment_id));\nFOREIGN KEY (Dogs.owner_id) REFERENCES Owners (owner_id);\nFOREIGN KEY (Dogs.size_code) REFERENCES Sizes (size_code);\nFOREIGN KEY (Dogs.breed_code) REFERENCES Breeds (breed_code);\nFOREIGN KEY (Treatments.dog_id) REFERENCES Dogs (dog_id);\nFOREIGN KEY (Treatments.professional_id) REFERENCES Professionals (professional_id);\nFOREIGN KEY (Treatments.treatment_type_code) REFERENCES Treatment_Types (treatment_type_code);",
    "schema_complexity": [
      49,
      6
    ]
  },
  "music_1": {
    "ddl_string": "CREATE TABLE genre (g_name TEXT, rating TEXT, most_popular_in TEXT, PRIMARY KEY (g_name));\nCREATE TABLE artist (artist_name TEXT, country TEXT, gender TEXT, preferred_genre TEXT, PRIMARY KEY (artist_name));\nCREATE TABLE files (f_id INTEGER, artist_name TEXT, file_size TEXT, duration TEXT, formats TEXT, PRIMARY KEY (f_id));\nCREATE TABLE song (song_name TEXT, artist_name TEXT, country TEXT, f_id INTEGER, genre_is TEXT, rating INTEGER, languages TEXT, releasedate OTHERS, resolution INTEGER, PRIMARY KEY (song_name));\nFOREIGN KEY (artist.preferred_genre) REFERENCES genre (g_name);\nFOREIGN KEY (files.artist_name) REFERENCES artist (artist_name);\nFOREIGN KEY (song.genre_is) REFERENCES genre (g_name);\nFOREIGN KEY (song.f_id) REFERENCES files (f_id);\nFOREIGN KEY (song.artist_name) REFERENCES artist (artist_name);",
    "schema_complexity": [
      21,
      5
    ]
  },
  "company_employee": {
    "ddl_string": "CREATE TABLE people (People_ID INTEGER, Age INTEGER, Name TEXT, Nationality TEXT, Graduation_College TEXT, PRIMARY KEY (People_ID));\nCREATE TABLE company (Company_ID INTEGER, Name TEXT, Headquarters TEXT, Industry TEXT, Sales_in_Billion INTEGER, Profits_in_Billion INTEGER, Assets_in_Billion INTEGER, Market_Value_in_Billion INTEGER, PRIMARY KEY (Company_ID));\nCREATE TABLE employment (Company_ID INTEGER, People_ID INTEGER, Year_working INTEGER, PRIMARY KEY (Company_ID));\nFOREIGN KEY (employment.People_ID) REFERENCES people (People_ID);\nFOREIGN KEY (employment.Company_ID) REFERENCES company (Company_ID);",
    "schema_complexity": [
      16,
      2
    ]
  },
  "farm": {
    "ddl_string": "CREATE TABLE city (City_ID INTEGER, Official_Name TEXT, Status TEXT, Area_km_2 INTEGER, Population INTEGER, Census_Ranking TEXT, PRIMARY KEY (City_ID));\nCREATE TABLE farm (Farm_ID INTEGER, Year INTEGER, Total_Horses INTEGER, Working_Horses INTEGER, Total_Cattle INTEGER, Oxen INTEGER, Bulls INTEGER, Cows INTEGER, Pigs INTEGER, Sheep_and_Goats INTEGER, PRIMARY KEY (Farm_ID));\nCREATE TABLE farm_competition (Competition_ID INTEGER, Year INTEGER, Theme TEXT, Host_city_ID INTEGER, Hosts TEXT, PRIMARY KEY (Competition_ID));\nCREATE TABLE competition_record (Competition_ID INTEGER, Farm_ID INTEGER, Rank INTEGER, PRIMARY KEY (Competition_ID));\nFOREIGN KEY (farm_competition.Host_city_ID) REFERENCES city (City_ID);\nFOREIGN KEY (competition_record.Farm_ID) REFERENCES farm (Farm_ID);\nFOREIGN KEY (competition_record.Competition_ID) REFERENCES farm_competition (Competition_ID);",
    "schema_complexity": [
      24,
      3
    ]
  },
  "solvency_ii": {
    "ddl_string": "CREATE TABLE Addresses (Address_ID INTEGER, address_details TEXT, PRIMARY KEY (Address_ID));\nCREATE TABLE Locations (Location_ID INTEGER, Other_Details TEXT, PRIMARY KEY (Location_ID));\nCREATE TABLE Products (Product_ID INTEGER, Product_Type_Code TEXT, Product_Name TEXT, Product_Price INTEGER, PRIMARY KEY (Product_ID));\nCREATE TABLE Parties (Party_ID INTEGER, Party_Details TEXT, PRIMARY KEY (Party_ID));\nCREATE TABLE Assets (Asset_ID INTEGER, Other_Details TEXT, PRIMARY KEY (Asset_ID));\nCREATE TABLE Channels (Channel_ID INTEGER, Other_Details TEXT, PRIMARY KEY (Channel_ID));\nCREATE TABLE Finances (Finance_ID INTEGER, Other_Details TEXT, PRIMARY KEY (Finance_ID));\nCREATE TABLE Events (Event_ID INTEGER, Address_ID INTEGER, Channel_ID INTEGER, Event_Type_Code TEXT, Finance_ID INTEGER, Location_ID INTEGER, PRIMARY KEY (Event_ID));\nCREATE TABLE Products_in_Events (Product_in_Event_ID INTEGER, Event_ID INTEGER, Product_ID INTEGER, PRIMARY KEY (Product_in_Event_ID));\nCREATE TABLE Parties_in_Events (Party_ID INTEGER, Event_ID INTEGER, Role_Code TEXT, PRIMARY KEY (Party_ID));\nCREATE TABLE Agreements (Document_ID INTEGER, Event_ID INTEGER, PRIMARY KEY (Document_ID));\nCREATE TABLE Assets_in_Events (Asset_ID INTEGER, Event_ID INTEGER, PRIMARY KEY (Asset_ID));\nFOREIGN KEY (Events.Finance_ID) REFERENCES Finances (Finance_ID);\nFOREIGN KEY (Events.Address_ID) REFERENCES Addresses (Address_ID);\nFOREIGN KEY (Events.Location_ID) REFERENCES Locations (Location_ID);\nFOREIGN KEY (Products_in_Events.Product_ID) REFERENCES Products (Product_ID);\nFOREIGN KEY (Products_in_Events.Event_ID) REFERENCES Events (Event_ID);\nFOREIGN KEY (Parties_in_Events.Event_ID) REFERENCES Events (Event_ID);\nFOREIGN KEY (Parties_in_Events.Party_ID) REFERENCES Parties (Party_ID);\nFOREIGN KEY (Agreements.Event_ID) REFERENCES Events (Event_ID);\nFOREIGN KEY (Assets_in_Events.Event_ID) REFERENCES Events (Event_ID);",
    "schema_complexity": [
      32,
      9
    ]
  },
  "city_record": {
    "ddl_string": "CREATE TABLE city (City_ID INTEGER, City TEXT, Hanzi TEXT, Hanyu_Pinyin TEXT, Regional_Population INTEGER, GDP INTEGER, PRIMARY KEY (City_ID));\nCREATE TABLE match (Match_ID INTEGER, Date TEXT, Venue TEXT, Score TEXT, Result TEXT, Competition TEXT, PRIMARY KEY (Match_ID));\nCREATE TABLE temperature (City_ID INTEGER, Jan INTEGER, Feb INTEGER, Mar INTEGER, Apr INTEGER, Jun INTEGER, Jul INTEGER, Aug INTEGER, Sep INTEGER, Oct INTEGER, Nov INTEGER, Dec INTEGER, PRIMARY KEY (City_ID));\nCREATE TABLE hosting_city (Year INTEGER, Match_ID INTEGER, Host_City TEXT, PRIMARY KEY (Year));\nFOREIGN KEY (temperature.City_ID) REFERENCES city (City_ID);\nFOREIGN KEY (hosting_city.Match_ID) REFERENCES match (Match_ID);\nFOREIGN KEY (hosting_city.Host_City) REFERENCES city (City_ID);",
    "schema_complexity": [
      27,
      3
    ]
  },
  "swimming": {
    "ddl_string": "CREATE TABLE swimmer (ID INTEGER, name TEXT, Nationality TEXT, meter_100 INTEGER, meter_200 TEXT, meter_300 TEXT, meter_400 TEXT, meter_500 TEXT, meter_600 TEXT, meter_700 TEXT, Time TEXT, PRIMARY KEY (ID));\nCREATE TABLE stadium (ID INTEGER, name TEXT, Capacity INTEGER, City TEXT, Country TEXT, Opening_year INTEGER, PRIMARY KEY (ID));\nCREATE TABLE event (ID INTEGER, Name TEXT, Stadium_ID INTEGER, Year TEXT, PRIMARY KEY (ID));\nCREATE TABLE record (ID INTEGER, Result TEXT, Swimmer_ID INTEGER, Event_ID INTEGER, PRIMARY KEY (Swimmer_ID));\nFOREIGN KEY (event.Stadium_ID) REFERENCES stadium (ID);\nFOREIGN KEY (record.Swimmer_ID) REFERENCES swimmer (ID);\nFOREIGN KEY (record.Event_ID) REFERENCES event (ID);",
    "schema_complexity": [
      25,
      3
    ]
  },
  "flight_2": {
    "ddl_string": "CREATE TABLE airlines (uid INTEGER, Airline TEXT, Abbreviation TEXT, Country TEXT, PRIMARY KEY (uid));\nCREATE TABLE airports (City TEXT, AirportCode TEXT, AirportName TEXT, Country TEXT, CountryAbbrev TEXT, PRIMARY KEY (AirportCode));\nCREATE TABLE flights (Airline INTEGER, FlightNo INTEGER, SourceAirport TEXT, DestAirport TEXT, PRIMARY KEY (Airline));\nFOREIGN KEY (flights.DestAirport) REFERENCES airports (AirportCode);\nFOREIGN KEY (flights.SourceAirport) REFERENCES airports (AirportCode);",
    "schema_complexity": [
      13,
      2
    ]
  },
  "election": {
    "ddl_string": "CREATE TABLE county (County_Id INTEGER, County_name TEXT, Population INTEGER, Zip_code TEXT, PRIMARY KEY (County_Id));\nCREATE TABLE party (Party_ID INTEGER, Year INTEGER, Party TEXT, Governor TEXT, Lieutenant_Governor TEXT, Comptroller TEXT, Attorney_General TEXT, US_Senate TEXT, PRIMARY KEY (Party_ID));\nCREATE TABLE election (Election_ID INTEGER, Counties_Represented TEXT, District INTEGER, Delegate TEXT, Party INTEGER, First_Elected INTEGER, Committee TEXT, PRIMARY KEY (Election_ID));\nFOREIGN KEY (election.District) REFERENCES county (County_Id);\nFOREIGN KEY (election.Party) REFERENCES party (Party_ID);",
    "schema_complexity": [
      19,
      2
    ]
  },
  "manufactory_1": {
    "ddl_string": "CREATE TABLE Manufacturers (Code INTEGER, Name TEXT, Headquarter TEXT, Founder TEXT, Revenue INTEGER, PRIMARY KEY (Code));\nCREATE TABLE Products (Code INTEGER, Name TEXT, Price INTEGER, Manufacturer INTEGER, PRIMARY KEY (Code));\nFOREIGN KEY (Products.Manufacturer) REFERENCES Manufacturers (Code);",
    "schema_complexity": [
      9,
      1
    ]
  },
  "debate": {
    "ddl_string": "CREATE TABLE people (People_ID INTEGER, District TEXT, Name TEXT, Party TEXT, Age INTEGER, PRIMARY KEY (People_ID));\nCREATE TABLE debate (Debate_ID INTEGER, Date TEXT, Venue TEXT, Num_of_Audience INTEGER, PRIMARY KEY (Debate_ID));\nCREATE TABLE debate_people (Debate_ID INTEGER, Affirmative INTEGER, Negative INTEGER, If_Affirmative_Win OTHERS, PRIMARY KEY (Debate_ID));\nFOREIGN KEY (debate_people.Negative) REFERENCES people (People_ID);\nFOREIGN KEY (debate_people.Affirmative) REFERENCES people (People_ID);\nFOREIGN KEY (debate_people.Debate_ID) REFERENCES debate (Debate_ID);",
    "schema_complexity": [
      13,
      3
    ]
  },
  "network_2": {
    "ddl_string": "CREATE TABLE Person (name TEXT, age INTEGER, city TEXT, gender TEXT, job TEXT, PRIMARY KEY (name));\nCREATE TABLE PersonFriend (name TEXT, friend TEXT, year INTEGER);\nFOREIGN KEY (PersonFriend.friend) REFERENCES Person (name);\nFOREIGN KEY (PersonFriend.name) REFERENCES Person (name);",
    "schema_complexity": [
      8,
      2
    ]
  },
  "local_govt_in_alabama": {
    "ddl_string": "CREATE TABLE Services (Service_ID INTEGER, Service_Type_Code TEXT, PRIMARY KEY (Service_ID));\nCREATE TABLE Participants (Participant_ID INTEGER, Participant_Type_Code TEXT, Participant_Details TEXT, PRIMARY KEY (Participant_ID));\nCREATE TABLE Events (Event_ID INTEGER, Service_ID INTEGER, Event_Details TEXT, PRIMARY KEY (Event_ID));\nCREATE TABLE Participants_in_Events (Event_ID INTEGER, Participant_ID INTEGER, PRIMARY KEY (Event_ID));\nFOREIGN KEY (Events.Service_ID) REFERENCES Services (Service_ID);\nFOREIGN KEY (Participants_in_Events.Event_ID) REFERENCES Events (Event_ID);\nFOREIGN KEY (Participants_in_Events.Participant_ID) REFERENCES Participants (Participant_ID);",
    "schema_complexity": [
      10,
      3
    ]
  },
  "climbing": {
    "ddl_string": "CREATE TABLE mountain (Mountain_ID INTEGER, Name TEXT, Height INTEGER, Prominence INTEGER, Range TEXT, Country TEXT, PRIMARY KEY (Mountain_ID));\nCREATE TABLE climber (Climber_ID INTEGER, Name TEXT, Country TEXT, Time TEXT, Points INTEGER, Mountain_ID INTEGER, PRIMARY KEY (Climber_ID));\nFOREIGN KEY (climber.Mountain_ID) REFERENCES mountain (Mountain_ID);",
    "schema_complexity": [
      12,
      1
    ]
  },
  "e_learning": {
    "ddl_string": "CREATE TABLE Course_Authors_and_Tutors (author_id INTEGER, author_tutor_ATB TEXT, login_name TEXT, password TEXT, personal_name TEXT, middle_name TEXT, family_name TEXT, gender_mf TEXT, address_line_1 TEXT, PRIMARY KEY (author_id));\nCREATE TABLE Students (student_id INTEGER, date_of_registration OTHERS, date_of_latest_logon OTHERS, login_name TEXT, password TEXT, personal_name TEXT, middle_name TEXT, family_name TEXT, PRIMARY KEY (student_id));\nCREATE TABLE Subjects (subject_id INTEGER, subject_name TEXT, PRIMARY KEY (subject_id));\nCREATE TABLE Courses (course_id INTEGER, author_id INTEGER, subject_id INTEGER, course_name TEXT, course_description TEXT, PRIMARY KEY (course_id));\nCREATE TABLE Student_Course_Enrolment (registration_id INTEGER, student_id INTEGER, course_id INTEGER, date_of_enrolment OTHERS, date_of_completion OTHERS, PRIMARY KEY (registration_id));\nCREATE TABLE Student_Tests_Taken (registration_id INTEGER, date_test_taken OTHERS, test_result TEXT);\nFOREIGN KEY (Courses.subject_id) REFERENCES Subjects (subject_id);\nFOREIGN KEY (Courses.author_id) REFERENCES Course_Authors_and_Tutors (author_id);\nFOREIGN KEY (Student_Course_Enrolment.student_id) REFERENCES Students (student_id);\nFOREIGN KEY (Student_Course_Enrolment.course_id) REFERENCES Courses (course_id);\nFOREIGN KEY (Student_Tests_Taken.registration_id) REFERENCES Student_Course_Enrolment (registration_id);",
    "schema_complexity": [
      32,
      5
    ]
  },
  "scientist_1": {
    "ddl_string": "CREATE TABLE Scientists (SSN INTEGER, Name TEXT, PRIMARY KEY (SSN));\nCREATE TABLE Projects (Code TEXT, Name TEXT, Hours INTEGER, PRIMARY KEY (Code));\nCREATE TABLE AssignedTo (Scientist INTEGER, Project TEXT, PRIMARY KEY (Scientist));\nFOREIGN KEY (AssignedTo.Project) REFERENCES Projects (Code);\nFOREIGN KEY (AssignedTo.Scientist) REFERENCES Scientists (SSN);",
    "schema_complexity": [
      7,
      2
    ]
  },
  "ship_1": {
    "ddl_string": "CREATE TABLE captain (Captain_ID INTEGER, Name TEXT, Ship_ID INTEGER, age TEXT, Class TEXT, Rank TEXT, PRIMARY KEY (Captain_ID));\nCREATE TABLE Ship (Ship_ID INTEGER, Name TEXT, Type TEXT, Built_Year INTEGER, Class TEXT, Flag TEXT, PRIMARY KEY (Ship_ID));\nFOREIGN KEY (captain.Ship_ID) REFERENCES Ship (Ship_ID);",
    "schema_complexity": [
      12,
      1
    ]
  },
  "entertainment_awards": {
    "ddl_string": "CREATE TABLE festival_detail (Festival_ID INTEGER, Festival_Name TEXT, Chair_Name TEXT, Location TEXT, Year INTEGER, Num_of_Audience INTEGER, PRIMARY KEY (Festival_ID));\nCREATE TABLE artwork (Artwork_ID INTEGER, Type TEXT, Name TEXT, PRIMARY KEY (Artwork_ID));\nCREATE TABLE nomination (Artwork_ID INTEGER, Festival_ID INTEGER, Result TEXT, PRIMARY KEY (Artwork_ID));\nFOREIGN KEY (nomination.Festival_ID) REFERENCES festival_detail (Festival_ID);\nFOREIGN KEY (nomination.Artwork_ID) REFERENCES artwork (Artwork_ID);",
    "schema_complexity": [
      12,
      2
    ]
  },
  "allergy_1": {
    "ddl_string": "CREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY (Allergy));\nCREATE TABLE Has_Allergy (StuID INTEGER, Allergy TEXT);\nCREATE TABLE Student (StuID INTEGER, LName TEXT, Fname TEXT, Age INTEGER, Sex TEXT, Major INTEGER, Advisor INTEGER, city_code TEXT, PRIMARY KEY (StuID));\nFOREIGN KEY (Has_Allergy.Allergy) REFERENCES Allergy_Type (Allergy);\nFOREIGN KEY (Has_Allergy.StuID) REFERENCES Student (StuID);",
    "schema_complexity": [
      12,
      2
    ]
  },
  "imdb": {
    "ddl_string": "CREATE TABLE actor (aid INTEGER, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INTEGER, PRIMARY KEY (aid));\nCREATE TABLE copyright (id INTEGER, msid INTEGER, cid INTEGER, PRIMARY KEY (id));\nCREATE TABLE cast (id INTEGER, msid INTEGER, aid INTEGER, role INTEGER, PRIMARY KEY (id));\nCREATE TABLE genre (gid INTEGER, genre TEXT, PRIMARY KEY (gid));\nCREATE TABLE classification (id INTEGER, msid INTEGER, gid INTEGER, PRIMARY KEY (id));\nCREATE TABLE company (id INTEGER, name TEXT, country_code TEXT, PRIMARY KEY (id));\nCREATE TABLE director (did INTEGER, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INTEGER, PRIMARY KEY (did));\nCREATE TABLE producer (pid INTEGER, gender TEXT, name TEXT, nationality TEXT, birth_city TEXT, birth_year INTEGER, PRIMARY KEY (pid));\nCREATE TABLE directed_by (id INTEGER, msid INTEGER, did INTEGER, PRIMARY KEY (id));\nCREATE TABLE keyword (id INTEGER, keyword TEXT, PRIMARY KEY (id));\nCREATE TABLE made_by (id INTEGER, msid INTEGER, pid INTEGER, PRIMARY KEY (id));\nCREATE TABLE movie (mid INTEGER, title TEXT, release_year INTEGER, title_aka TEXT, budget TEXT, PRIMARY KEY (mid));\nCREATE TABLE tags (id INTEGER, msid INTEGER, kid INTEGER, PRIMARY KEY (id));\nCREATE TABLE tv_series (sid INTEGER, title TEXT, release_year INTEGER, num_of_seasons INTEGER, num_of_episodes INTEGER, title_aka TEXT, budget TEXT, PRIMARY KEY (sid));\nCREATE TABLE writer (wid INTEGER, gender TEXT, name INTEGER, nationality INTEGER, num_of_episodes INTEGER, birth_city TEXT, birth_year INTEGER, PRIMARY KEY (wid));\nCREATE TABLE written_by (id INTEGER, msid INTEGER, wid INTEGER);\nFOREIGN KEY (cast.msid) REFERENCES copyright (msid);\nFOREIGN KEY (cast.aid) REFERENCES actor (aid);\nFOREIGN KEY (classification.msid) REFERENCES copyright (msid);\nFOREIGN KEY (classification.gid) REFERENCES genre (gid);\nFOREIGN KEY (directed_by.did) REFERENCES director (did);\nFOREIGN KEY (directed_by.msid) REFERENCES copyright (msid);\nFOREIGN KEY (made_by.pid) REFERENCES producer (pid);\nFOREIGN KEY (made_by.msid) REFERENCES copyright (msid);\nFOREIGN KEY (tags.msid) REFERENCES copyright (msid);\nFOREIGN KEY (written_by.wid) REFERENCES writer (wid);\nFOREIGN KEY (written_by.msid) REFERENCES copyright (msid);",
    "schema_complexity": [
      66,
      11
    ]
  },
  "products_for_hire": {
    "ddl_string": "CREATE TABLE Discount_Coupons (coupon_id INTEGER, date_issued OTHERS, coupon_amount INTEGER, PRIMARY KEY (coupon_id));\nCREATE TABLE Customers (customer_id INTEGER, coupon_id INTEGER, good_or_bad_customer TEXT, first_name TEXT, last_name TEXT, gender_mf TEXT, date_became_customer OTHERS, date_last_hire OTHERS, PRIMARY KEY (customer_id));\nCREATE TABLE Bookings (booking_id INTEGER, customer_id INTEGER, booking_status_code TEXT, returned_damaged_yn TEXT, booking_start_date OTHERS, booking_end_date OTHERS, count_hired TEXT, amount_payable INTEGER, amount_of_discount INTEGER, amount_outstanding INTEGER, amount_of_refund INTEGER, PRIMARY KEY (booking_id));\nCREATE TABLE Products_for_Hire (product_id INTEGER, product_type_code TEXT, daily_hire_cost INTEGER, product_name TEXT, product_description TEXT, PRIMARY KEY (product_id));\nCREATE TABLE Payments (payment_id INTEGER, booking_id INTEGER, customer_id INTEGER, payment_type_code TEXT, amount_paid_in_full_yn TEXT, payment_date OTHERS, amount_due INTEGER, amount_paid INTEGER, PRIMARY KEY (payment_id));\nCREATE TABLE Products_Booked (booking_id INTEGER, product_id INTEGER, returned_yn TEXT, returned_late_yn TEXT, booked_count INTEGER, booked_amount INTEGER, PRIMARY KEY (booking_id));\nCREATE TABLE View_Product_Availability (product_id INTEGER, booking_id INTEGER, status_date OTHERS, available_yn TEXT, PRIMARY KEY (status_date));\nFOREIGN KEY (Customers.coupon_id) REFERENCES Discount_Coupons (coupon_id);\nFOREIGN KEY (Bookings.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Payments.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Payments.booking_id) REFERENCES Bookings (booking_id);\nFOREIGN KEY (Products_Booked.product_id) REFERENCES Products_for_Hire (product_id);\nFOREIGN KEY (Products_Booked.booking_id) REFERENCES Bookings (booking_id);\nFOREIGN KEY (View_Product_Availability.product_id) REFERENCES Products_for_Hire (product_id);\nFOREIGN KEY (View_Product_Availability.booking_id) REFERENCES Bookings (booking_id);",
    "schema_complexity": [
      45,
      8
    ]
  },
  "candidate_poll": {
    "ddl_string": "CREATE TABLE candidate (Candidate_ID INTEGER, People_ID INTEGER, Poll_Source TEXT, Date TEXT, Support_rate INTEGER, Consider_rate INTEGER, Oppose_rate INTEGER, Unsure_rate INTEGER, PRIMARY KEY (Candidate_ID));\nCREATE TABLE people (People_ID INTEGER, Sex TEXT, Name TEXT, Date_of_Birth TEXT, Height INTEGER, Weight INTEGER, PRIMARY KEY (People_ID));\nFOREIGN KEY (candidate.People_ID) REFERENCES people (People_ID);",
    "schema_complexity": [
      14,
      1
    ]
  },
  "chinook_1": {
    "ddl_string": "CREATE TABLE Album (AlbumId INTEGER, Title TEXT, ArtistId INTEGER, PRIMARY KEY (AlbumId));\nCREATE TABLE Artist (ArtistId INTEGER, Name TEXT, PRIMARY KEY (ArtistId));\nCREATE TABLE Customer (CustomerId INTEGER, FirstName TEXT, LastName TEXT, Company TEXT, Address TEXT, City TEXT, State TEXT, Country TEXT, PostalCode TEXT, Phone TEXT, Fax TEXT, Email TEXT, SupportRepId INTEGER, PRIMARY KEY (CustomerId));\nCREATE TABLE Employee (EmployeeId INTEGER, LastName TEXT, FirstName TEXT, Title TEXT, ReportsTo INTEGER, BirthDate OTHERS, HireDate OTHERS, Address TEXT, City TEXT, State TEXT, Country TEXT, PostalCode TEXT, Phone TEXT, Fax TEXT, Email TEXT, PRIMARY KEY (EmployeeId));\nCREATE TABLE Genre (GenreId INTEGER, Name TEXT, PRIMARY KEY (GenreId));\nCREATE TABLE Invoice (InvoiceId INTEGER, CustomerId INTEGER, InvoiceDate OTHERS, BillingAddress TEXT, BillingCity TEXT, BillingState TEXT, BillingCountry TEXT, BillingPostalCode TEXT, Total INTEGER, PRIMARY KEY (InvoiceId));\nCREATE TABLE InvoiceLine (InvoiceLineId INTEGER, InvoiceId INTEGER, TrackId INTEGER, UnitPrice INTEGER, Quantity INTEGER, PRIMARY KEY (InvoiceLineId));\nCREATE TABLE MediaType (MediaTypeId INTEGER, Name TEXT, PRIMARY KEY (MediaTypeId));\nCREATE TABLE Playlist (PlaylistId INTEGER, Name TEXT, PRIMARY KEY (PlaylistId));\nCREATE TABLE PlaylistTrack (PlaylistId INTEGER, TrackId INTEGER, PRIMARY KEY (PlaylistId));\nCREATE TABLE Track (TrackId INTEGER, Name TEXT, AlbumId INTEGER, MediaTypeId INTEGER, GenreId INTEGER, Composer TEXT, Milliseconds INTEGER, Bytes INTEGER, UnitPrice INTEGER, PRIMARY KEY (TrackId));\nFOREIGN KEY (Album.ArtistId) REFERENCES Artist (ArtistId);\nFOREIGN KEY (Customer.SupportRepId) REFERENCES Employee (EmployeeId);\nFOREIGN KEY (Employee.ReportsTo) REFERENCES Employee (EmployeeId);\nFOREIGN KEY (Invoice.CustomerId) REFERENCES Customer (CustomerId);\nFOREIGN KEY (InvoiceLine.TrackId) REFERENCES Track (TrackId);\nFOREIGN KEY (InvoiceLine.InvoiceId) REFERENCES Invoice (InvoiceId);\nFOREIGN KEY (PlaylistTrack.TrackId) REFERENCES Track (TrackId);\nFOREIGN KEY (PlaylistTrack.PlaylistId) REFERENCES Playlist (PlaylistId);\nFOREIGN KEY (Track.MediaTypeId) REFERENCES MediaType (MediaTypeId);\nFOREIGN KEY (Track.GenreId) REFERENCES Genre (GenreId);\nFOREIGN KEY (Track.AlbumId) REFERENCES Album (AlbumId);",
    "schema_complexity": [
      64,
      11
    ]
  },
  "flight_4": {
    "ddl_string": "CREATE TABLE routes (rid INTEGER, dst_apid INTEGER, dst_ap TEXT, src_apid INTEGER, src_ap TEXT, alid INTEGER, airline TEXT, codeshare TEXT, PRIMARY KEY (rid));\nCREATE TABLE airports (apid INTEGER, name TEXT, city TEXT, country TEXT, x INTEGER, y INTEGER, elevation INTEGER, iata TEXT, icao TEXT, PRIMARY KEY (apid));\nCREATE TABLE airlines (alid INTEGER, name TEXT, iata TEXT, icao TEXT, callsign TEXT, country TEXT, active TEXT, PRIMARY KEY (alid));\nFOREIGN KEY (routes.alid) REFERENCES airlines (alid);\nFOREIGN KEY (routes.src_apid) REFERENCES airports (apid);\nFOREIGN KEY (routes.dst_apid) REFERENCES airports (apid);",
    "schema_complexity": [
      24,
      3
    ]
  },
  "pets_1": {
    "ddl_string": "CREATE TABLE Student (StuID INTEGER, LName TEXT, Fname TEXT, Age INTEGER, Sex TEXT, Major INTEGER, Advisor INTEGER, city_code TEXT, PRIMARY KEY (StuID));\nCREATE TABLE Has_Pet (StuID INTEGER, PetID INTEGER);\nCREATE TABLE Pets (PetID INTEGER, PetType TEXT, pet_age INTEGER, weight INTEGER, PRIMARY KEY (PetID));\nFOREIGN KEY (Has_Pet.StuID) REFERENCES Student (StuID);\nFOREIGN KEY (Has_Pet.PetID) REFERENCES Pets (PetID);",
    "schema_complexity": [
      14,
      2
    ]
  },
  "dorm_1": {
    "ddl_string": "CREATE TABLE Student (StuID INTEGER, LName TEXT, Fname TEXT, Age INTEGER, Sex TEXT, Major INTEGER, Advisor INTEGER, city_code TEXT, PRIMARY KEY (StuID));\nCREATE TABLE Dorm (dormid INTEGER, dorm_name TEXT, student_capacity INTEGER, gender TEXT);\nCREATE TABLE Dorm_amenity (amenid INTEGER, amenity_name TEXT);\nCREATE TABLE Has_amenity (dormid INTEGER, amenid INTEGER);\nCREATE TABLE Lives_in (stuid INTEGER, dormid INTEGER, room_number INTEGER);\nFOREIGN KEY (Has_amenity.amenid) REFERENCES Dorm_amenity (amenid);\nFOREIGN KEY (Has_amenity.dormid) REFERENCES Dorm (dormid);\nFOREIGN KEY (Lives_in.dormid) REFERENCES Dorm (dormid);\nFOREIGN KEY (Lives_in.stuid) REFERENCES Student (StuID);",
    "schema_complexity": [
      19,
      4
    ]
  },
  "journal_committee": {
    "ddl_string": "CREATE TABLE journal (Journal_ID INTEGER, Date TEXT, Theme TEXT, Sales INTEGER, PRIMARY KEY (Journal_ID));\nCREATE TABLE editor (Editor_ID INTEGER, Name TEXT, Age INTEGER, PRIMARY KEY (Editor_ID));\nCREATE TABLE journal_committee (Editor_ID INTEGER, Journal_ID INTEGER, Work_Type TEXT, PRIMARY KEY (Editor_ID));\nFOREIGN KEY (journal_committee.Journal_ID) REFERENCES journal (Journal_ID);\nFOREIGN KEY (journal_committee.Editor_ID) REFERENCES editor (Editor_ID);",
    "schema_complexity": [
      10,
      2
    ]
  },
  "flight_1": {
    "ddl_string": "CREATE TABLE flight (flno INTEGER, origin TEXT, destination TEXT, distance INTEGER, departure_date OTHERS, arrival_date OTHERS, price INTEGER, aid INTEGER, PRIMARY KEY (flno));\nCREATE TABLE aircraft (aid INTEGER, name TEXT, distance INTEGER, PRIMARY KEY (aid));\nCREATE TABLE employee (eid INTEGER, name TEXT, salary INTEGER, PRIMARY KEY (eid));\nCREATE TABLE certificate (eid INTEGER, aid INTEGER, PRIMARY KEY (eid));\nFOREIGN KEY (flight.aid) REFERENCES aircraft (aid);\nFOREIGN KEY (certificate.aid) REFERENCES aircraft (aid);\nFOREIGN KEY (certificate.eid) REFERENCES employee (eid);",
    "schema_complexity": [
      16,
      3
    ]
  },
  "medicine_enzyme_interaction": {
    "ddl_string": "CREATE TABLE medicine (id INTEGER, name TEXT, Trade_Name TEXT, FDA_approved TEXT, PRIMARY KEY (id));\nCREATE TABLE enzyme (id INTEGER, name TEXT, Location TEXT, Product TEXT, Chromosome TEXT, OMIM INTEGER, Porphyria TEXT, PRIMARY KEY (id));\nCREATE TABLE medicine_enzyme_interaction (enzyme_id INTEGER, medicine_id INTEGER, interaction_type TEXT, PRIMARY KEY (enzyme_id));\nFOREIGN KEY (medicine_enzyme_interaction.medicine_id) REFERENCES medicine (id);\nFOREIGN KEY (medicine_enzyme_interaction.enzyme_id) REFERENCES enzyme (id);",
    "schema_complexity": [
      14,
      2
    ]
  },
  "local_govt_and_lot": {
    "ddl_string": "CREATE TABLE Customers (customer_id INTEGER, customer_details TEXT, PRIMARY KEY (customer_id));\nCREATE TABLE Properties (property_id INTEGER, property_type_code TEXT, property_address TEXT, other_details TEXT, PRIMARY KEY (property_id));\nCREATE TABLE Residents (resident_id INTEGER, property_id INTEGER, date_moved_in OTHERS, date_moved_out OTHERS, other_details TEXT, PRIMARY KEY (resident_id));\nCREATE TABLE Organizations (organization_id INTEGER, parent_organization_id INTEGER, organization_details TEXT, PRIMARY KEY (organization_id));\nCREATE TABLE Services (service_id INTEGER, organization_id INTEGER, service_type_code TEXT, service_details TEXT, PRIMARY KEY (service_id));\nCREATE TABLE Residents_Services (resident_id INTEGER, service_id INTEGER, date_moved_in OTHERS, property_id INTEGER, date_requested OTHERS, date_provided OTHERS, other_details TEXT, PRIMARY KEY (resident_id));\nCREATE TABLE Things (thing_id INTEGER, organization_id INTEGER, Type_of_Thing_Code TEXT, service_type_code TEXT, service_details TEXT, PRIMARY KEY (thing_id));\nCREATE TABLE Customer_Events (Customer_Event_ID INTEGER, customer_id INTEGER, date_moved_in OTHERS, property_id INTEGER, resident_id INTEGER, thing_id INTEGER, PRIMARY KEY (Customer_Event_ID));\nCREATE TABLE Customer_Event_Notes (Customer_Event_Note_ID INTEGER, Customer_Event_ID INTEGER, service_type_code TEXT, resident_id INTEGER, property_id INTEGER, date_moved_in OTHERS, PRIMARY KEY (Customer_Event_Note_ID));\nCREATE TABLE Timed_Status_of_Things (thing_id INTEGER, Date_and_Date OTHERS, Status_of_Thing_Code TEXT, PRIMARY KEY (thing_id));\nCREATE TABLE Timed_Locations_of_Things (thing_id INTEGER, Date_and_Time OTHERS, Location_Code TEXT, PRIMARY KEY (thing_id));\nFOREIGN KEY (Residents.property_id) REFERENCES Properties (property_id);\nFOREIGN KEY (Services.organization_id) REFERENCES Organizations (organization_id);\nFOREIGN KEY (Residents_Services.resident_id) REFERENCES Residents (resident_id);\nFOREIGN KEY (Residents_Services.property_id) REFERENCES Residents (property_id);\nFOREIGN KEY (Residents_Services.date_moved_in) REFERENCES Residents (date_moved_in);\nFOREIGN KEY (Residents_Services.service_id) REFERENCES Services (service_id);\nFOREIGN KEY (Things.organization_id) REFERENCES Organizations (organization_id);\nFOREIGN KEY (Customer_Events.resident_id) REFERENCES Residents (resident_id);\nFOREIGN KEY (Customer_Events.property_id) REFERENCES Residents (property_id);\nFOREIGN KEY (Customer_Events.date_moved_in) REFERENCES Residents (date_moved_in);\nFOREIGN KEY (Customer_Events.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Customer_Events.thing_id) REFERENCES Things (thing_id);\nFOREIGN KEY (Customer_Event_Notes.Customer_Event_ID) REFERENCES Customer_Events (Customer_Event_ID);\nFOREIGN KEY (Timed_Status_of_Things.thing_id) REFERENCES Things (thing_id);\nFOREIGN KEY (Timed_Locations_of_Things.thing_id) REFERENCES Things (thing_id);",
    "schema_complexity": [
      48,
      15
    ]
  },
  "station_weather": {
    "ddl_string": "CREATE TABLE train (id INTEGER, train_number INTEGER, name TEXT, origin TEXT, destination TEXT, time TEXT, interval TEXT, PRIMARY KEY (id));\nCREATE TABLE station (id INTEGER, network_name TEXT, services TEXT, local_authority TEXT, PRIMARY KEY (id));\nCREATE TABLE route (train_id INTEGER, station_id INTEGER, PRIMARY KEY (train_id));\nCREATE TABLE weekly_weather (station_id INTEGER, day_of_week TEXT, high_temperature INTEGER, low_temperature INTEGER, precipitation INTEGER, wind_speed_mph INTEGER, PRIMARY KEY (station_id));\nFOREIGN KEY (route.station_id) REFERENCES station (id);\nFOREIGN KEY (route.train_id) REFERENCES train (id);\nFOREIGN KEY (weekly_weather.station_id) REFERENCES station (id);",
    "schema_complexity": [
      19,
      3
    ]
  },
  "shop_membership": {
    "ddl_string": "CREATE TABLE member (Member_ID INTEGER, Card_Number TEXT, Name TEXT, Hometown TEXT, Level INTEGER, PRIMARY KEY (Member_ID));\nCREATE TABLE branch (Branch_ID INTEGER, Name TEXT, Open_year TEXT, Address_road TEXT, City TEXT, membership_amount TEXT, PRIMARY KEY (Branch_ID));\nCREATE TABLE membership_register_branch (Member_ID INTEGER, Branch_ID TEXT, Register_Year TEXT, PRIMARY KEY (Member_ID));\nCREATE TABLE purchase (Member_ID INTEGER, Branch_ID TEXT, Year TEXT, Total_pounds INTEGER, PRIMARY KEY (Member_ID));\nFOREIGN KEY (membership_register_branch.Branch_ID) REFERENCES branch (Branch_ID);\nFOREIGN KEY (membership_register_branch.Member_ID) REFERENCES member (Member_ID);\nFOREIGN KEY (purchase.Branch_ID) REFERENCES branch (Branch_ID);\nFOREIGN KEY (purchase.Member_ID) REFERENCES member (Member_ID);",
    "schema_complexity": [
      18,
      4
    ]
  },
  "driving_school": {
    "ddl_string": "CREATE TABLE Addresses (address_id INTEGER, line_1_number_building TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY (address_id));\nCREATE TABLE Staff (staff_id INTEGER, staff_address_id INTEGER, nickname TEXT, first_name TEXT, middle_name TEXT, last_name TEXT, date_of_birth OTHERS, date_joined_staff OTHERS, date_left_staff OTHERS, PRIMARY KEY (staff_id));\nCREATE TABLE Vehicles (vehicle_id INTEGER, vehicle_details TEXT, PRIMARY KEY (vehicle_id));\nCREATE TABLE Customers (customer_id INTEGER, customer_address_id INTEGER, customer_status_code TEXT, date_became_customer OTHERS, date_of_birth OTHERS, first_name TEXT, last_name TEXT, amount_outstanding INTEGER, email_address TEXT, phone_number TEXT, cell_mobile_phone_number TEXT, PRIMARY KEY (customer_id));\nCREATE TABLE Customer_Payments (customer_id INTEGER, datetime_payment OTHERS, payment_method_code TEXT, amount_payment INTEGER, PRIMARY KEY (customer_id));\nCREATE TABLE Lessons (lesson_id INTEGER, customer_id INTEGER, lesson_status_code TEXT, staff_id INTEGER, vehicle_id INTEGER, lesson_date OTHERS, lesson_time TEXT, price INTEGER, PRIMARY KEY (lesson_id));\nFOREIGN KEY (Staff.staff_address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Customers.customer_address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Customer_Payments.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Lessons.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Lessons.staff_id) REFERENCES Staff (staff_id);\nFOREIGN KEY (Lessons.vehicle_id) REFERENCES Vehicles (vehicle_id);",
    "schema_complexity": [
      40,
      6
    ]
  },
  "concert_singer": {
    "ddl_string": "CREATE TABLE stadium (Stadium_ID INTEGER, Location TEXT, Name TEXT, Capacity INTEGER, Highest INTEGER, Lowest INTEGER, Average INTEGER, PRIMARY KEY (Stadium_ID));\nCREATE TABLE singer (Singer_ID INTEGER, Name TEXT, Country TEXT, Song_Name TEXT, Song_release_year TEXT, Age INTEGER, Is_male OTHERS, PRIMARY KEY (Singer_ID));\nCREATE TABLE concert (concert_ID INTEGER, concert_Name TEXT, Theme TEXT, Stadium_ID TEXT, Year TEXT, PRIMARY KEY (concert_ID));\nCREATE TABLE singer_in_concert (concert_ID INTEGER, Singer_ID TEXT, PRIMARY KEY (concert_ID));\nFOREIGN KEY (concert.Stadium_ID) REFERENCES stadium (Stadium_ID);\nFOREIGN KEY (singer_in_concert.Singer_ID) REFERENCES singer (Singer_ID);\nFOREIGN KEY (singer_in_concert.concert_ID) REFERENCES concert (concert_ID);",
    "schema_complexity": [
      21,
      3
    ]
  },
  "music_2": {
    "ddl_string": "CREATE TABLE Songs (SongId INTEGER, Title TEXT, PRIMARY KEY (SongId));\nCREATE TABLE Albums (AId INTEGER, Title TEXT, Year INTEGER, Label TEXT, Type TEXT, PRIMARY KEY (AId));\nCREATE TABLE Band (Id INTEGER, Firstname TEXT, Lastname TEXT, PRIMARY KEY (Id));\nCREATE TABLE Instruments (SongId INTEGER, BandmateId INTEGER, Instrument TEXT, PRIMARY KEY (SongId));\nCREATE TABLE Performance (SongId INTEGER, Bandmate INTEGER, StagePosition TEXT, PRIMARY KEY (SongId));\nCREATE TABLE Tracklists (AlbumId INTEGER, Position INTEGER, SongId INTEGER, PRIMARY KEY (AlbumId));\nCREATE TABLE Vocals (SongId INTEGER, Bandmate INTEGER, Type TEXT, PRIMARY KEY (SongId));\nFOREIGN KEY (Instruments.BandmateId) REFERENCES Band (Id);\nFOREIGN KEY (Instruments.SongId) REFERENCES Songs (SongId);\nFOREIGN KEY (Performance.Bandmate) REFERENCES Band (Id);\nFOREIGN KEY (Performance.SongId) REFERENCES Songs (SongId);\nFOREIGN KEY (Tracklists.AlbumId) REFERENCES Albums (AId);\nFOREIGN KEY (Tracklists.SongId) REFERENCES Songs (SongId);\nFOREIGN KEY (Vocals.Bandmate) REFERENCES Band (Id);\nFOREIGN KEY (Vocals.SongId) REFERENCES Songs (SongId);",
    "schema_complexity": [
      22,
      8
    ]
  },
  "sports_competition": {
    "ddl_string": "CREATE TABLE club (Club_ID INTEGER, name TEXT, Region TEXT, Start_year TEXT, PRIMARY KEY (Club_ID));\nCREATE TABLE club_rank (Rank INTEGER, Club_ID INTEGER, Gold INTEGER, Silver INTEGER, Bronze INTEGER, Total INTEGER, PRIMARY KEY (Rank));\nCREATE TABLE player (Player_ID INTEGER, name TEXT, Position TEXT, Club_ID INTEGER, Apps INTEGER, Tries INTEGER, Goals TEXT, Points INTEGER, PRIMARY KEY (Player_ID));\nCREATE TABLE competition (Competition_ID INTEGER, Year INTEGER, Competition_type TEXT, Country TEXT, PRIMARY KEY (Competition_ID));\nCREATE TABLE competition_result (Competition_ID INTEGER, Club_ID_1 INTEGER, Club_ID_2 INTEGER, Score TEXT, PRIMARY KEY (Competition_ID));\nFOREIGN KEY (club_rank.Club_ID) REFERENCES club (Club_ID);\nFOREIGN KEY (player.Club_ID) REFERENCES club (Club_ID);\nFOREIGN KEY (competition_result.Competition_ID) REFERENCES competition (Competition_ID);\nFOREIGN KEY (competition_result.Club_ID_2) REFERENCES club (Club_ID);\nFOREIGN KEY (competition_result.Club_ID_1) REFERENCES club (Club_ID);",
    "schema_complexity": [
      26,
      5
    ]
  },
  "railway": {
    "ddl_string": "CREATE TABLE railway (Railway_ID INTEGER, Railway TEXT, Builder TEXT, Built TEXT, Wheels TEXT, Location TEXT, ObjectNumber TEXT, PRIMARY KEY (Railway_ID));\nCREATE TABLE train (Train_ID INTEGER, Train_Num TEXT, Name TEXT, From TEXT, Arrival TEXT, Railway_ID INTEGER, PRIMARY KEY (Train_ID));\nCREATE TABLE manager (Manager_ID INTEGER, Name TEXT, Country TEXT, Working_year_starts TEXT, Age INTEGER, Level INTEGER, PRIMARY KEY (Manager_ID));\nCREATE TABLE railway_manage (Railway_ID INTEGER, Manager_ID INTEGER, From_Year TEXT, PRIMARY KEY (Railway_ID));\nFOREIGN KEY (train.Railway_ID) REFERENCES railway (Railway_ID);\nFOREIGN KEY (railway_manage.Railway_ID) REFERENCES railway (Railway_ID);\nFOREIGN KEY (railway_manage.Manager_ID) REFERENCES manager (Manager_ID);",
    "schema_complexity": [
      22,
      3
    ]
  },
  "inn_1": {
    "ddl_string": "CREATE TABLE Rooms (RoomId TEXT, roomName TEXT, beds INTEGER, bedType TEXT, maxOccupancy INTEGER, basePrice INTEGER, decor TEXT, PRIMARY KEY (RoomId));\nCREATE TABLE Reservations (Code INTEGER, Room TEXT, CheckIn TEXT, CheckOut TEXT, Rate INTEGER, LastName TEXT, FirstName TEXT, Adults INTEGER, Kids INTEGER, PRIMARY KEY (Code));\nFOREIGN KEY (Reservations.Room) REFERENCES Rooms (RoomId);",
    "schema_complexity": [
      16,
      1
    ]
  },
  "museum_visit": {
    "ddl_string": "CREATE TABLE museum (Museum_ID INTEGER, Name TEXT, Num_of_Staff INTEGER, Open_Year TEXT, PRIMARY KEY (Museum_ID));\nCREATE TABLE visitor (ID INTEGER, Name TEXT, Level_of_membership INTEGER, Age INTEGER, PRIMARY KEY (ID));\nCREATE TABLE visit (Museum_ID INTEGER, visitor_ID TEXT, Num_of_Ticket INTEGER, Total_spent INTEGER, PRIMARY KEY (Museum_ID));\nFOREIGN KEY (visit.visitor_ID) REFERENCES visitor (ID);\nFOREIGN KEY (visit.Museum_ID) REFERENCES museum (Museum_ID);",
    "schema_complexity": [
      12,
      2
    ]
  },
  "browser_web": {
    "ddl_string": "CREATE TABLE Web_client_accelerator (id INTEGER, name TEXT, Operating_system TEXT, Client TEXT, Connection TEXT, PRIMARY KEY (id));\nCREATE TABLE browser (id INTEGER, name TEXT, market_share INTEGER, PRIMARY KEY (id));\nCREATE TABLE accelerator_compatible_browser (accelerator_id INTEGER, browser_id INTEGER, compatible_since_year INTEGER, PRIMARY KEY (accelerator_id));\nFOREIGN KEY (accelerator_compatible_browser.browser_id) REFERENCES browser (id);\nFOREIGN KEY (accelerator_compatible_browser.accelerator_id) REFERENCES Web_client_accelerator (id);",
    "schema_complexity": [
      11,
      2
    ]
  },
  "baseball_1": {
    "ddl_string": "CREATE TABLE all_star (player_id TEXT, year INTEGER, game_num INTEGER, game_id TEXT, team_id TEXT, league_id TEXT, gp INTEGER, starting_pos INTEGER);\nCREATE TABLE appearances (year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, g_all INTEGER, gs INTEGER, g_batting INTEGER, g_defense INTEGER, g_p INTEGER, g_c INTEGER, g_1b INTEGER, g_2b INTEGER, g_3b INTEGER, g_ss INTEGER, g_lf INTEGER, g_cf INTEGER, g_rf INTEGER, g_of INTEGER, g_dh INTEGER, g_ph INTEGER, g_pr INTEGER);\nCREATE TABLE manager_award (player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes INTEGER);\nCREATE TABLE player_award (player_id TEXT, award_id TEXT, year INTEGER, league_id TEXT, tie TEXT, notes TEXT);\nCREATE TABLE manager_award_vote (award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER);\nCREATE TABLE player_award_vote (award_id TEXT, year INTEGER, league_id TEXT, player_id TEXT, points_won INTEGER, points_max INTEGER, votes_first INTEGER);\nCREATE TABLE batting (player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs INTEGER, bb INTEGER, so INTEGER, ibb INTEGER, hbp INTEGER, sh INTEGER, sf INTEGER, g_idp INTEGER);\nCREATE TABLE batting_postseason (year INTEGER, round TEXT, player_id TEXT, team_id TEXT, league_id TEXT, g INTEGER, ab INTEGER, r INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, rbi INTEGER, sb INTEGER, cs INTEGER, bb INTEGER, so INTEGER, ibb INTEGER, hbp INTEGER, sh INTEGER, sf INTEGER, g_idp INTEGER);\nCREATE TABLE player_college (player_id TEXT, college_id TEXT, year INTEGER);\nCREATE TABLE fielding (player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, pos TEXT, g INTEGER, gs INTEGER, inn_outs INTEGER, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, pb INTEGER, wp INTEGER, sb INTEGER, cs INTEGER, zr INTEGER);\nCREATE TABLE fielding_outfield (player_id TEXT, year INTEGER, stint INTEGER, glf INTEGER, gcf INTEGER, grf INTEGER);\nCREATE TABLE fielding_postseason (player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, round TEXT, pos TEXT, g INTEGER, gs INTEGER, inn_outs INTEGER, po INTEGER, a INTEGER, e INTEGER, dp INTEGER, tp INTEGER, pb INTEGER, sb INTEGER, cs INTEGER);\nCREATE TABLE hall_of_fame (player_id TEXT, yearid INTEGER, votedby TEXT, ballots INTEGER, needed INTEGER, votes INTEGER, inducted TEXT, category TEXT, needed_note TEXT);\nCREATE TABLE home_game (year INTEGER, league_id TEXT, team_id TEXT, park_id TEXT, span_first TEXT, span_last TEXT, games INTEGER, openings INTEGER, attendance INTEGER);\nCREATE TABLE manager (player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER, plyr_mgr TEXT);\nCREATE TABLE manager_half (player_id TEXT, year INTEGER, team_id TEXT, league_id TEXT, inseason INTEGER, half INTEGER, g INTEGER, w INTEGER, l INTEGER, rank INTEGER);\nCREATE TABLE player (player_id TEXT, birth_year INTEGER, birth_month INTEGER, birth_day INTEGER, birth_country TEXT, birth_state TEXT, birth_city TEXT, death_year INTEGER, death_month INTEGER, death_day INTEGER, death_country TEXT, death_state TEXT, death_city TEXT, name_first TEXT, name_last TEXT, name_given TEXT, weight INTEGER, height INTEGER, bats TEXT, throws TEXT, debut TEXT, final_game TEXT, retro_id TEXT, bbref_id TEXT);\nCREATE TABLE park (park_id TEXT, park_name TEXT, park_alias TEXT, city TEXT, state TEXT, country TEXT);\nCREATE TABLE pitching (player_id TEXT, year INTEGER, stint INTEGER, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp INTEGER, era INTEGER, ibb INTEGER, wp INTEGER, hbp INTEGER, bk INTEGER, bfp INTEGER, gf INTEGER, r INTEGER, sh INTEGER, sf INTEGER, g_idp INTEGER);\nCREATE TABLE pitching_postseason (player_id TEXT, year INTEGER, round TEXT, team_id TEXT, league_id TEXT, w INTEGER, l INTEGER, g INTEGER, gs INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, h INTEGER, er INTEGER, hr INTEGER, bb INTEGER, so INTEGER, baopp TEXT, era INTEGER, ibb INTEGER, wp INTEGER, hbp INTEGER, bk INTEGER, bfp INTEGER, gf INTEGER, r INTEGER, sh INTEGER, sf INTEGER, g_idp INTEGER);\nCREATE TABLE salary (year INTEGER, team_id TEXT, league_id TEXT, player_id TEXT, salary INTEGER);\nCREATE TABLE college (college_id TEXT, name_full TEXT, city TEXT, state TEXT, country TEXT);\nCREATE TABLE postseason (year INTEGER, round TEXT, team_id_winner TEXT, league_id_winner TEXT, team_id_loser TEXT, league_id_loser TEXT, wins INTEGER, losses INTEGER, ties INTEGER);\nCREATE TABLE team (year INTEGER, league_id TEXT, team_id TEXT, franchise_id TEXT, div_id TEXT, rank INTEGER, g INTEGER, ghome INTEGER, w INTEGER, l INTEGER, div_win TEXT, wc_win TEXT, lg_win TEXT, ws_win TEXT, r INTEGER, ab INTEGER, h INTEGER, double INTEGER, triple INTEGER, hr INTEGER, bb INTEGER, so INTEGER, sb INTEGER, cs INTEGER, hbp INTEGER, sf INTEGER, ra INTEGER, er INTEGER, era INTEGER, cg INTEGER, sho INTEGER, sv INTEGER, ipouts INTEGER, ha INTEGER, hra INTEGER, bba INTEGER, soa INTEGER, e INTEGER, dp INTEGER, fp INTEGER, name TEXT, park TEXT, attendance INTEGER, bpf INTEGER, ppf INTEGER, team_id_br TEXT, team_id_lahman45 TEXT, team_id_retro TEXT);\nCREATE TABLE team_franchise (franchise_id TEXT, franchise_name TEXT, active TEXT, na_assoc TEXT);\nCREATE TABLE team_half (year INTEGER, league_id TEXT, team_id TEXT, half INTEGER, div_id TEXT, div_win TEXT, rank INTEGER, g INTEGER, w INTEGER, l INTEGER);\nFOREIGN KEY (all_star.player_id) REFERENCES player (player_id);\nFOREIGN KEY (appearances.player_id) REFERENCES player (player_id);\nFOREIGN KEY (appearances.team_id) REFERENCES team (team_id);\nFOREIGN KEY (manager_award.player_id) REFERENCES player (player_id);\nFOREIGN KEY (player_award.player_id) REFERENCES player (player_id);\nFOREIGN KEY (player_award_vote.player_id) REFERENCES player (player_id);\nFOREIGN KEY (batting.player_id) REFERENCES player (player_id);\nFOREIGN KEY (batting_postseason.team_id) REFERENCES team (team_id);\nFOREIGN KEY (batting_postseason.player_id) REFERENCES player (player_id);\nFOREIGN KEY (player_college.college_id) REFERENCES college (college_id);\nFOREIGN KEY (player_college.player_id) REFERENCES player (player_id);\nFOREIGN KEY (fielding.player_id) REFERENCES player (player_id);\nFOREIGN KEY (fielding_outfield.player_id) REFERENCES player (player_id);\nFOREIGN KEY (fielding_postseason.player_id) REFERENCES player (player_id);\nFOREIGN KEY (hall_of_fame.player_id) REFERENCES player (player_id);\nFOREIGN KEY (home_game.park_id) REFERENCES park (park_id);\nFOREIGN KEY (home_game.team_id) REFERENCES team (team_id);\nFOREIGN KEY (manager.team_id) REFERENCES team (team_id);\nFOREIGN KEY (manager_half.team_id) REFERENCES team (team_id);",
    "schema_complexity": [
      352,
      19
    ]
  },
  "architecture": {
    "ddl_string": "CREATE TABLE architect (id TEXT, name TEXT, nationality TEXT, gender TEXT, PRIMARY KEY (id));\nCREATE TABLE bridge (architect_id INTEGER, id INTEGER, name TEXT, location TEXT, length_meters INTEGER, length_feet INTEGER, PRIMARY KEY (id));\nCREATE TABLE mill (architect_id INTEGER, id INTEGER, location TEXT, name TEXT, type TEXT, built_year INTEGER, notes TEXT, PRIMARY KEY (id));\nFOREIGN KEY (bridge.architect_id) REFERENCES architect (id);\nFOREIGN KEY (mill.architect_id) REFERENCES architect (id);",
    "schema_complexity": [
      17,
      2
    ]
  },
  "csu_1": {
    "ddl_string": "CREATE TABLE Campuses (Id INTEGER, Campus TEXT, Location TEXT, County TEXT, Year INTEGER, PRIMARY KEY (Id));\nCREATE TABLE csu_fees (Campus INTEGER, Year INTEGER, CampusFee INTEGER, PRIMARY KEY (Campus));\nCREATE TABLE degrees (Year INTEGER, Campus INTEGER, Degrees INTEGER, PRIMARY KEY (Year));\nCREATE TABLE discipline_enrollments (Campus INTEGER, Discipline INTEGER, Year INTEGER, Undergraduate INTEGER, Graduate INTEGER, PRIMARY KEY (Campus));\nCREATE TABLE enrollments (Campus INTEGER, Year INTEGER, TotalEnrollment_AY INTEGER, FTE_AY INTEGER, PRIMARY KEY (Campus));\nCREATE TABLE faculty (Campus INTEGER, Year INTEGER, Faculty INTEGER);\nFOREIGN KEY (csu_fees.Campus) REFERENCES Campuses (Id);\nFOREIGN KEY (degrees.Campus) REFERENCES Campuses (Id);\nFOREIGN KEY (discipline_enrollments.Campus) REFERENCES Campuses (Id);\nFOREIGN KEY (enrollments.Campus) REFERENCES Campuses (Id);\nFOREIGN KEY (faculty.Campus) REFERENCES Campuses (Id);",
    "schema_complexity": [
      23,
      5
    ]
  },
  "tracking_orders": {
    "ddl_string": "CREATE TABLE Customers (customer_id INTEGER, customer_name TEXT, customer_details TEXT, PRIMARY KEY (customer_id));\nCREATE TABLE Invoices (invoice_number INTEGER, invoice_date OTHERS, invoice_details TEXT, PRIMARY KEY (invoice_number));\nCREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, order_status TEXT, date_order_placed OTHERS, order_details TEXT, PRIMARY KEY (order_id));\nCREATE TABLE Products (product_id INTEGER, product_name TEXT, product_details TEXT, PRIMARY KEY (product_id));\nCREATE TABLE Order_Items (order_item_id INTEGER, product_id INTEGER, order_id INTEGER, order_item_status TEXT, order_item_details TEXT, PRIMARY KEY (order_item_id));\nCREATE TABLE Shipments (shipment_id INTEGER, order_id INTEGER, invoice_number INTEGER, shipment_tracking_number TEXT, shipment_date OTHERS, other_shipment_details TEXT, PRIMARY KEY (shipment_id));\nCREATE TABLE Shipment_Items (shipment_id INTEGER, order_item_id INTEGER);\nFOREIGN KEY (Orders.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Order_Items.product_id) REFERENCES Products (product_id);\nFOREIGN KEY (Order_Items.order_id) REFERENCES Orders (order_id);\nFOREIGN KEY (Shipments.invoice_number) REFERENCES Invoices (invoice_number);\nFOREIGN KEY (Shipments.order_id) REFERENCES Orders (order_id);\nFOREIGN KEY (Shipment_Items.shipment_id) REFERENCES Shipments (shipment_id);\nFOREIGN KEY (Shipment_Items.order_item_id) REFERENCES Order_Items (order_item_id);",
    "schema_complexity": [
      27,
      7
    ]
  },
  "insurance_policies": {
    "ddl_string": "CREATE TABLE Customers (Customer_ID INTEGER, Customer_Details TEXT, PRIMARY KEY (Customer_ID));\nCREATE TABLE Customer_Policies (Policy_ID INTEGER, Customer_ID INTEGER, Policy_Type_Code TEXT, Start_Date OTHERS, End_Date OTHERS, PRIMARY KEY (Policy_ID));\nCREATE TABLE Claims (Claim_ID INTEGER, Policy_ID INTEGER, Date_Claim_Made OTHERS, Date_Claim_Settled OTHERS, Amount_Claimed INTEGER, Amount_Settled INTEGER, PRIMARY KEY (Claim_ID));\nCREATE TABLE Settlements (Settlement_ID INTEGER, Claim_ID INTEGER, Date_Claim_Made OTHERS, Date_Claim_Settled OTHERS, Amount_Claimed INTEGER, Amount_Settled INTEGER, Customer_Policy_ID INTEGER, PRIMARY KEY (Settlement_ID));\nCREATE TABLE Payments (Payment_ID INTEGER, Settlement_ID INTEGER, Payment_Method_Code TEXT, Date_Payment_Made OTHERS, Amount_Payment INTEGER, PRIMARY KEY (Payment_ID));\nFOREIGN KEY (Customer_Policies.Customer_ID) REFERENCES Customers (Customer_ID);\nFOREIGN KEY (Claims.Policy_ID) REFERENCES Customer_Policies (Policy_ID);\nFOREIGN KEY (Settlements.Claim_ID) REFERENCES Claims (Claim_ID);\nFOREIGN KEY (Payments.Settlement_ID) REFERENCES Settlements (Settlement_ID);",
    "schema_complexity": [
      25,
      4
    ]
  },
  "gas_company": {
    "ddl_string": "CREATE TABLE company (Company_ID INTEGER, Rank INTEGER, Company TEXT, Headquarters TEXT, Main_Industry TEXT, Sales_billion INTEGER, Profits_billion INTEGER, Assets_billion INTEGER, Market_Value INTEGER, PRIMARY KEY (Company_ID));\nCREATE TABLE gas_station (Station_ID INTEGER, Open_Year INTEGER, Location TEXT, Manager_Name TEXT, Vice_Manager_Name TEXT, Representative_Name TEXT, PRIMARY KEY (Station_ID));\nCREATE TABLE station_company (Station_ID INTEGER, Company_ID INTEGER, Rank_of_the_Year INTEGER, PRIMARY KEY (Station_ID));\nFOREIGN KEY (station_company.Company_ID) REFERENCES company (Company_ID);\nFOREIGN KEY (station_company.Station_ID) REFERENCES gas_station (Station_ID);",
    "schema_complexity": [
      18,
      2
    ]
  },
  "e_government": {
    "ddl_string": "CREATE TABLE Addresses (address_id INTEGER, line_1_number_building TEXT, town_city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY (address_id));\nCREATE TABLE Services (service_id INTEGER, service_type_code TEXT, service_name TEXT, service_descriptio TEXT, PRIMARY KEY (service_id));\nCREATE TABLE Forms (form_id INTEGER, form_type_code TEXT, service_id INTEGER, form_number TEXT, form_name TEXT, form_description TEXT, PRIMARY KEY (form_id));\nCREATE TABLE Individuals (individual_id INTEGER, individual_first_name TEXT, individual_middle_name TEXT, inidividual_phone TEXT, individual_email TEXT, individual_address TEXT, individual_last_name TEXT, PRIMARY KEY (individual_id));\nCREATE TABLE Organizations (organization_id INTEGER, date_formed OTHERS, organization_name TEXT, uk_vat_number TEXT, PRIMARY KEY (organization_id));\nCREATE TABLE Parties (party_id INTEGER, payment_method_code TEXT, party_phone TEXT, party_email TEXT, PRIMARY KEY (party_id));\nCREATE TABLE Organization_Contact_Individuals (individual_id INTEGER, organization_id INTEGER, date_contact_from OTHERS, date_contact_to OTHERS, PRIMARY KEY (individual_id));\nCREATE TABLE Party_Addresses (party_id INTEGER, address_id INTEGER, date_address_from OTHERS, address_type_code TEXT, date_address_to OTHERS, PRIMARY KEY (party_id));\nCREATE TABLE Party_Forms (party_id INTEGER, form_id INTEGER, date_completion_started OTHERS, form_status_code TEXT, date_fully_completed OTHERS, PRIMARY KEY (party_id));\nCREATE TABLE Party_Services (booking_id INTEGER, customer_id INTEGER, service_id INTEGER, service_datetime OTHERS, booking_made_date OTHERS);\nFOREIGN KEY (Forms.service_id) REFERENCES Services (service_id);\nFOREIGN KEY (Organization_Contact_Individuals.individual_id) REFERENCES Individuals (individual_id);\nFOREIGN KEY (Organization_Contact_Individuals.organization_id) REFERENCES Organizations (organization_id);\nFOREIGN KEY (Party_Addresses.party_id) REFERENCES Parties (party_id);\nFOREIGN KEY (Party_Addresses.address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Party_Forms.form_id) REFERENCES Forms (form_id);\nFOREIGN KEY (Party_Forms.party_id) REFERENCES Parties (party_id);\nFOREIGN KEY (Party_Services.customer_id) REFERENCES Parties (party_id);\nFOREIGN KEY (Party_Services.service_id) REFERENCES Services (service_id);",
    "schema_complexity": [
      50,
      9
    ]
  },
  "school_bus": {
    "ddl_string": "CREATE TABLE driver (Driver_ID INTEGER, Name TEXT, Party TEXT, Home_city TEXT, Age INTEGER, PRIMARY KEY (Driver_ID));\nCREATE TABLE school (School_ID INTEGER, Grade TEXT, School TEXT, Location TEXT, Type TEXT, PRIMARY KEY (School_ID));\nCREATE TABLE school_bus (School_ID INTEGER, Driver_ID INTEGER, Years_Working INTEGER, If_full_time OTHERS, PRIMARY KEY (School_ID));\nFOREIGN KEY (school_bus.Driver_ID) REFERENCES driver (Driver_ID);\nFOREIGN KEY (school_bus.School_ID) REFERENCES school (School_ID);",
    "schema_complexity": [
      14,
      2
    ]
  },
  "machine_repair": {
    "ddl_string": "CREATE TABLE repair (repair_ID INTEGER, name TEXT, Launch_Date TEXT, Notes TEXT, PRIMARY KEY (repair_ID));\nCREATE TABLE machine (Machine_ID INTEGER, Making_Year INTEGER, Class TEXT, Team TEXT, Machine_series TEXT, value_points INTEGER, quality_rank INTEGER, PRIMARY KEY (Machine_ID));\nCREATE TABLE technician (technician_id INTEGER, Name TEXT, Team TEXT, Starting_Year INTEGER, Age INTEGER, PRIMARY KEY (technician_id));\nCREATE TABLE repair_assignment (technician_id INTEGER, repair_ID INTEGER, Machine_ID INTEGER, PRIMARY KEY (technician_id));\nFOREIGN KEY (repair_assignment.Machine_ID) REFERENCES machine (Machine_ID);\nFOREIGN KEY (repair_assignment.repair_ID) REFERENCES repair (repair_ID);\nFOREIGN KEY (repair_assignment.technician_id) REFERENCES technician (technician_id);",
    "schema_complexity": [
      19,
      3
    ]
  },
  "theme_gallery": {
    "ddl_string": "CREATE TABLE artist (Artist_ID INTEGER, Name TEXT, Country TEXT, Year_Join INTEGER, Age INTEGER, PRIMARY KEY (Artist_ID));\nCREATE TABLE exhibition (Exhibition_ID INTEGER, Year INTEGER, Theme TEXT, Artist_ID INTEGER, Ticket_Price INTEGER, PRIMARY KEY (Exhibition_ID));\nCREATE TABLE exhibition_record (Exhibition_ID INTEGER, Date TEXT, Attendance INTEGER, PRIMARY KEY (Exhibition_ID));\nFOREIGN KEY (exhibition.Artist_ID) REFERENCES artist (Artist_ID);\nFOREIGN KEY (exhibition_record.Exhibition_ID) REFERENCES exhibition (Exhibition_ID);",
    "schema_complexity": [
      13,
      2
    ]
  },
  "film_rank": {
    "ddl_string": "CREATE TABLE film (Film_ID INTEGER, Title TEXT, Studio TEXT, Director TEXT, Gross_in_dollar INTEGER, PRIMARY KEY (Film_ID));\nCREATE TABLE market (Market_ID INTEGER, Country TEXT, Number_cities INTEGER, PRIMARY KEY (Market_ID));\nCREATE TABLE film_market_estimation (Estimation_ID INTEGER, Low_Estimate INTEGER, High_Estimate INTEGER, Film_ID INTEGER, Type TEXT, Market_ID INTEGER, Year INTEGER, PRIMARY KEY (Estimation_ID));\nFOREIGN KEY (film_market_estimation.Market_ID) REFERENCES market (Market_ID);\nFOREIGN KEY (film_market_estimation.Film_ID) REFERENCES film (Film_ID);",
    "schema_complexity": [
      15,
      2
    ]
  },
  "party_people": {
    "ddl_string": "CREATE TABLE region (Region_ID INTEGER, Region_name TEXT, Date TEXT, Label TEXT, Format TEXT, Catalogue TEXT, PRIMARY KEY (Region_ID));\nCREATE TABLE party (Party_ID INTEGER, Minister TEXT, Took_office TEXT, Left_office TEXT, Region_ID INTEGER, Party_name TEXT, PRIMARY KEY (Party_ID));\nCREATE TABLE member (Member_ID INTEGER, Member_Name TEXT, Party_ID TEXT, In_office TEXT, PRIMARY KEY (Member_ID));\nCREATE TABLE party_events (Event_ID INTEGER, Event_Name TEXT, Party_ID INTEGER, Member_in_charge_ID INTEGER, PRIMARY KEY (Event_ID));\nFOREIGN KEY (party.Region_ID) REFERENCES region (Region_ID);\nFOREIGN KEY (member.Party_ID) REFERENCES party (Party_ID);\nFOREIGN KEY (party_events.Member_in_charge_ID) REFERENCES member (Member_ID);\nFOREIGN KEY (party_events.Party_ID) REFERENCES party (Party_ID);",
    "schema_complexity": [
      20,
      4
    ]
  },
  "hospital_1": {
    "ddl_string": "CREATE TABLE Physician (EmployeeID INTEGER, Name TEXT, Position TEXT, SSN INTEGER, PRIMARY KEY (EmployeeID));\nCREATE TABLE Department (DepartmentID INTEGER, Name TEXT, Head INTEGER, PRIMARY KEY (DepartmentID));\nCREATE TABLE Affiliated_With (Physician INTEGER, Department INTEGER, PrimaryAffiliation OTHERS, PRIMARY KEY (Physician));\nCREATE TABLE Procedures (Code INTEGER, Name TEXT, Cost INTEGER, PRIMARY KEY (Code));\nCREATE TABLE Trained_In (Physician INTEGER, Treatment INTEGER, CertificationDate OTHERS, CertificationExpires OTHERS, PRIMARY KEY (Physician));\nCREATE TABLE Patient (SSN INTEGER, Name TEXT, Address TEXT, Phone TEXT, InsuranceID INTEGER, PCP INTEGER, PRIMARY KEY (SSN));\nCREATE TABLE Nurse (EmployeeID INTEGER, Name TEXT, Position TEXT, Registered OTHERS, SSN INTEGER, PRIMARY KEY (EmployeeID));\nCREATE TABLE Appointment (AppointmentID INTEGER, Patient INTEGER, PrepNurse INTEGER, Physician INTEGER, Start OTHERS, End OTHERS, ExaminationRoom TEXT, PRIMARY KEY (AppointmentID));\nCREATE TABLE Medication (Code INTEGER, Name TEXT, Brand TEXT, Description TEXT, PRIMARY KEY (Code));\nCREATE TABLE Prescribes (Physician INTEGER, Patient INTEGER, Medication INTEGER, Date OTHERS, Appointment INTEGER, Dose TEXT, PRIMARY KEY (Physician));\nCREATE TABLE Block (BlockFloor INTEGER, BlockCode INTEGER, PRIMARY KEY (BlockFloor));\nCREATE TABLE Room (RoomNumber INTEGER, RoomType TEXT, BlockFloor INTEGER, BlockCode INTEGER, Unavailable OTHERS, PRIMARY KEY (RoomNumber));\nCREATE TABLE On_Call (Nurse INTEGER, BlockFloor INTEGER, BlockCode INTEGER, OnCallStart OTHERS, OnCallEnd OTHERS, PRIMARY KEY (Nurse));\nCREATE TABLE Stay (StayID INTEGER, Patient INTEGER, Room INTEGER, StayStart OTHERS, StayEnd OTHERS, PRIMARY KEY (StayID));\nCREATE TABLE Undergoes (Patient INTEGER, Procedures INTEGER, Stay INTEGER, DateUndergoes OTHERS, Physician INTEGER, AssistingNurse INTEGER, PRIMARY KEY (Patient));\nFOREIGN KEY (Department.Head) REFERENCES Physician (EmployeeID);\nFOREIGN KEY (Affiliated_With.Department) REFERENCES Department (DepartmentID);\nFOREIGN KEY (Affiliated_With.Physician) REFERENCES Physician (EmployeeID);\nFOREIGN KEY (Trained_In.Treatment) REFERENCES Procedures (Code);\nFOREIGN KEY (Trained_In.Physician) REFERENCES Physician (EmployeeID);\nFOREIGN KEY (Patient.PCP) REFERENCES Physician (EmployeeID);\nFOREIGN KEY (Appointment.Physician) REFERENCES Physician (EmployeeID);\nFOREIGN KEY (Appointment.PrepNurse) REFERENCES Nurse (EmployeeID);\nFOREIGN KEY (Appointment.Patient) REFERENCES Patient (SSN);\nFOREIGN KEY (Prescribes.Appointment) REFERENCES Appointment (AppointmentID);\nFOREIGN KEY (Prescribes.Medication) REFERENCES Medication (Code);\nFOREIGN KEY (Prescribes.Patient) REFERENCES Patient (SSN);\nFOREIGN KEY (Prescribes.Physician) REFERENCES Physician (EmployeeID);\nFOREIGN KEY (Room.BlockFloor) REFERENCES Block (BlockFloor);\nFOREIGN KEY (Room.BlockCode) REFERENCES Block (BlockCode);\nFOREIGN KEY (On_Call.BlockFloor) REFERENCES Block (BlockFloor);\nFOREIGN KEY (On_Call.BlockCode) REFERENCES Block (BlockCode);\nFOREIGN KEY (On_Call.Nurse) REFERENCES Nurse (EmployeeID);\nFOREIGN KEY (Stay.Room) REFERENCES Room (RoomNumber);\nFOREIGN KEY (Stay.Patient) REFERENCES Patient (SSN);\nFOREIGN KEY (Undergoes.AssistingNurse) REFERENCES Nurse (EmployeeID);\nFOREIGN KEY (Undergoes.Physician) REFERENCES Physician (EmployeeID);\nFOREIGN KEY (Undergoes.Stay) REFERENCES Stay (StayID);\nFOREIGN KEY (Undergoes.Procedures) REFERENCES Procedures (Code);\nFOREIGN KEY (Undergoes.Patient) REFERENCES Patient (SSN);",
    "schema_complexity": [
      68,
      25
    ]
  },
  "customers_campaigns_ecommerce": {
    "ddl_string": "CREATE TABLE Premises (premise_id INTEGER, premises_type TEXT, premise_details TEXT, PRIMARY KEY (premise_id));\nCREATE TABLE Products (product_id INTEGER, product_category TEXT, product_name TEXT, PRIMARY KEY (product_id));\nCREATE TABLE Customers (customer_id INTEGER, payment_method TEXT, customer_name TEXT, customer_phone TEXT, customer_email TEXT, customer_address TEXT, customer_login TEXT, customer_password TEXT, PRIMARY KEY (customer_id));\nCREATE TABLE Mailshot_Campaigns (mailshot_id INTEGER, product_category TEXT, mailshot_name TEXT, mailshot_start_date OTHERS, mailshot_end_date OTHERS, PRIMARY KEY (mailshot_id));\nCREATE TABLE Customer_Addresses (customer_id INTEGER, premise_id INTEGER, date_address_from OTHERS, address_type_code TEXT, date_address_to OTHERS);\nCREATE TABLE Customer_Orders (order_id INTEGER, customer_id INTEGER, order_status_code TEXT, shipping_method_code TEXT, order_placed_datetime OTHERS, order_delivered_datetime OTHERS, order_shipping_charges TEXT, PRIMARY KEY (order_id));\nCREATE TABLE Mailshot_Customers (mailshot_id INTEGER, customer_id INTEGER, outcome_code TEXT, mailshot_customer_date OTHERS);\nCREATE TABLE Order_Items (item_id INTEGER, order_item_status_code TEXT, order_id INTEGER, product_id INTEGER, item_status_code TEXT, item_delivered_datetime OTHERS, item_order_quantity TEXT);\nFOREIGN KEY (Customer_Addresses.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Customer_Addresses.premise_id) REFERENCES Premises (premise_id);\nFOREIGN KEY (Customer_Orders.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Mailshot_Customers.mailshot_id) REFERENCES Mailshot_Campaigns (mailshot_id);\nFOREIGN KEY (Mailshot_Customers.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Order_Items.order_id) REFERENCES Customer_Orders (order_id);\nFOREIGN KEY (Order_Items.product_id) REFERENCES Products (product_id);",
    "schema_complexity": [
      42,
      7
    ]
  },
  "gymnast": {
    "ddl_string": "CREATE TABLE gymnast (Gymnast_ID INTEGER, Floor_Exercise_Points INTEGER, Pommel_Horse_Points INTEGER, Rings_Points INTEGER, Vault_Points INTEGER, Parallel_Bars_Points INTEGER, Horizontal_Bar_Points INTEGER, Total_Points INTEGER, PRIMARY KEY (Gymnast_ID));\nCREATE TABLE people (People_ID INTEGER, Name TEXT, Age INTEGER, Height INTEGER, Hometown TEXT, PRIMARY KEY (People_ID));\nFOREIGN KEY (gymnast.Gymnast_ID) REFERENCES people (People_ID);",
    "schema_complexity": [
      13,
      1
    ]
  },
  "restaurants": {
    "ddl_string": "CREATE TABLE GEOGRAPHIC (CITY_NAME TEXT, COUNTY TEXT, REGION TEXT, PRIMARY KEY (CITY_NAME));\nCREATE TABLE RESTAURANT (ID INTEGER, NAME TEXT, FOOD_TYPE TEXT, CITY_NAME TEXT, RATING INTEGER, PRIMARY KEY (ID));\nCREATE TABLE LOCATION (RESTAURANT_ID INTEGER, HOUSE_NUMBER INTEGER, STREET_NAME TEXT, CITY_NAME TEXT, PRIMARY KEY (RESTAURANT_ID));\nFOREIGN KEY (RESTAURANT.CITY_NAME) REFERENCES GEOGRAPHIC (CITY_NAME);\nFOREIGN KEY (LOCATION.CITY_NAME) REFERENCES GEOGRAPHIC (CITY_NAME);",
    "schema_complexity": [
      12,
      2
    ]
  },
  "mountain_photos": {
    "ddl_string": "CREATE TABLE mountain (id INTEGER, name TEXT, Height INTEGER, Prominence INTEGER, Range TEXT, Country TEXT, PRIMARY KEY (id));\nCREATE TABLE camera_lens (id INTEGER, brand TEXT, name TEXT, focal_length_mm INTEGER, max_aperture INTEGER, PRIMARY KEY (id));\nCREATE TABLE photos (id INTEGER, camera_lens_id INTEGER, mountain_id INTEGER, color TEXT, name TEXT, PRIMARY KEY (id));\nFOREIGN KEY (photos.mountain_id) REFERENCES mountain (id);\nFOREIGN KEY (photos.camera_lens_id) REFERENCES camera_lens (id);",
    "schema_complexity": [
      16,
      2
    ]
  },
  "battle_death": {
    "ddl_string": "CREATE TABLE battle (id INTEGER, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT, PRIMARY KEY (id));\nCREATE TABLE ship (lost_in_battle INTEGER, id INTEGER, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, PRIMARY KEY (id));\nCREATE TABLE death (caused_by_ship_id INTEGER, id INTEGER, note TEXT, killed INTEGER, injured INTEGER, PRIMARY KEY (id));\nFOREIGN KEY (ship.lost_in_battle) REFERENCES battle (id);\nFOREIGN KEY (death.caused_by_ship_id) REFERENCES ship (id);",
    "schema_complexity": [
      18,
      2
    ]
  },
  "cre_Doc_Control_Systems": {
    "ddl_string": "CREATE TABLE Ref_Document_Types (document_type_code TEXT, document_type_description TEXT, PRIMARY KEY (document_type_code));\nCREATE TABLE Roles (role_code TEXT, role_description TEXT, PRIMARY KEY (role_code));\nCREATE TABLE Addresses (address_id INTEGER, address_details TEXT, PRIMARY KEY (address_id));\nCREATE TABLE Ref_Document_Status (document_status_code TEXT, document_status_description TEXT, PRIMARY KEY (document_status_code));\nCREATE TABLE Ref_Shipping_Agents (shipping_agent_code TEXT, shipping_agent_name TEXT, shipping_agent_description TEXT, PRIMARY KEY (shipping_agent_code));\nCREATE TABLE Documents (document_id INTEGER, document_status_code TEXT, document_type_code TEXT, shipping_agent_code TEXT, receipt_date OTHERS, receipt_number TEXT, other_details TEXT, PRIMARY KEY (document_id));\nCREATE TABLE Employees (employee_id INTEGER, role_code TEXT, employee_name TEXT, other_details TEXT, PRIMARY KEY (employee_id));\nCREATE TABLE Document_Drafts (document_id INTEGER, draft_number INTEGER, draft_details TEXT, PRIMARY KEY (document_id));\nCREATE TABLE Draft_Copies (document_id INTEGER, draft_number INTEGER, copy_number INTEGER, PRIMARY KEY (document_id));\nCREATE TABLE Circulation_History (document_id INTEGER, draft_number INTEGER, copy_number INTEGER, employee_id INTEGER, PRIMARY KEY (document_id));\nCREATE TABLE Documents_Mailed (document_id INTEGER, mailed_to_address_id INTEGER, mailing_date OTHERS, PRIMARY KEY (document_id));\nFOREIGN KEY (Documents.shipping_agent_code) REFERENCES Ref_Shipping_Agents (shipping_agent_code);\nFOREIGN KEY (Documents.document_status_code) REFERENCES Ref_Document_Status (document_status_code);\nFOREIGN KEY (Documents.document_type_code) REFERENCES Ref_Document_Types (document_type_code);\nFOREIGN KEY (Employees.role_code) REFERENCES Roles (role_code);\nFOREIGN KEY (Document_Drafts.document_id) REFERENCES Documents (document_id);\nFOREIGN KEY (Draft_Copies.document_id) REFERENCES Document_Drafts (document_id);\nFOREIGN KEY (Draft_Copies.draft_number) REFERENCES Document_Drafts (draft_number);\nFOREIGN KEY (Circulation_History.employee_id) REFERENCES Employees (employee_id);\nFOREIGN KEY (Circulation_History.document_id) REFERENCES Draft_Copies (document_id);\nFOREIGN KEY (Circulation_History.draft_number) REFERENCES Draft_Copies (draft_number);\nFOREIGN KEY (Circulation_History.copy_number) REFERENCES Draft_Copies (copy_number);\nFOREIGN KEY (Documents_Mailed.mailed_to_address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Documents_Mailed.document_id) REFERENCES Documents (document_id);",
    "schema_complexity": [
      35,
      13
    ]
  },
  "tracking_share_transactions": {
    "ddl_string": "CREATE TABLE Investors (investor_id INTEGER, Investor_details TEXT, PRIMARY KEY (investor_id));\nCREATE TABLE Lots (lot_id INTEGER, investor_id INTEGER, lot_details TEXT, PRIMARY KEY (lot_id));\nCREATE TABLE Ref_Transaction_Types (transaction_type_code TEXT, transaction_type_description TEXT, PRIMARY KEY (transaction_type_code));\nCREATE TABLE Transactions (transaction_id INTEGER, investor_id INTEGER, transaction_type_code TEXT, date_of_transaction OTHERS, amount_of_transaction INTEGER, share_count TEXT, other_details TEXT, PRIMARY KEY (transaction_id));\nCREATE TABLE Sales (sales_transaction_id INTEGER, sales_details TEXT, PRIMARY KEY (sales_transaction_id));\nCREATE TABLE Purchases (purchase_transaction_id INTEGER, purchase_details TEXT);\nCREATE TABLE Transactions_Lots (transaction_id INTEGER, lot_id INTEGER);\nFOREIGN KEY (Lots.investor_id) REFERENCES Investors (investor_id);\nFOREIGN KEY (Transactions.transaction_type_code) REFERENCES Ref_Transaction_Types (transaction_type_code);\nFOREIGN KEY (Transactions.investor_id) REFERENCES Investors (investor_id);\nFOREIGN KEY (Sales.sales_transaction_id) REFERENCES Transactions (transaction_id);\nFOREIGN KEY (Purchases.purchase_transaction_id) REFERENCES Transactions (transaction_id);\nFOREIGN KEY (Transactions_Lots.transaction_id) REFERENCES Transactions (transaction_id);\nFOREIGN KEY (Transactions_Lots.lot_id) REFERENCES Lots (lot_id);",
    "schema_complexity": [
      20,
      7
    ]
  },
  "apartment_rentals": {
    "ddl_string": "CREATE TABLE Apartment_Buildings (building_id INTEGER, building_short_name TEXT, building_full_name TEXT, building_description TEXT, building_address TEXT, building_manager TEXT, building_phone TEXT, PRIMARY KEY (building_id));\nCREATE TABLE Apartments (apt_id INTEGER, building_id INTEGER, apt_type_code TEXT, apt_number TEXT, bathroom_count INTEGER, bedroom_count INTEGER, room_count TEXT, PRIMARY KEY (apt_id));\nCREATE TABLE Apartment_Facilities (apt_id INTEGER, facility_code TEXT, PRIMARY KEY (apt_id));\nCREATE TABLE Guests (guest_id INTEGER, gender_code TEXT, guest_first_name TEXT, guest_last_name TEXT, date_of_birth OTHERS, PRIMARY KEY (guest_id));\nCREATE TABLE Apartment_Bookings (apt_booking_id INTEGER, apt_id INTEGER, guest_id INTEGER, booking_status_code TEXT, booking_start_date OTHERS, booking_end_date OTHERS, PRIMARY KEY (apt_booking_id));\nCREATE TABLE View_Unit_Status (apt_id INTEGER, apt_booking_id INTEGER, status_date OTHERS, available_yn OTHERS, PRIMARY KEY (status_date));\nFOREIGN KEY (Apartments.building_id) REFERENCES Apartment_Buildings (building_id);\nFOREIGN KEY (Apartment_Facilities.apt_id) REFERENCES Apartments (apt_id);\nFOREIGN KEY (Apartment_Bookings.guest_id) REFERENCES Guests (guest_id);\nFOREIGN KEY (Apartment_Bookings.apt_id) REFERENCES Apartments (apt_id);\nFOREIGN KEY (View_Unit_Status.apt_booking_id) REFERENCES Apartment_Bookings (apt_booking_id);\nFOREIGN KEY (View_Unit_Status.apt_id) REFERENCES Apartments (apt_id);",
    "schema_complexity": [
      31,
      6
    ]
  },
  "student_transcripts_tracking": {
    "ddl_string": "CREATE TABLE Addresses (address_id INTEGER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY (address_id));\nCREATE TABLE Courses (course_id INTEGER, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY (course_id));\nCREATE TABLE Departments (department_id INTEGER, department_name TEXT, department_description TEXT, other_details TEXT, PRIMARY KEY (department_id));\nCREATE TABLE Degree_Programs (degree_program_id INTEGER, department_id INTEGER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, PRIMARY KEY (degree_program_id));\nCREATE TABLE Sections (section_id INTEGER, course_id INTEGER, section_name TEXT, section_description TEXT, other_details TEXT, PRIMARY KEY (section_id));\nCREATE TABLE Semesters (semester_id INTEGER, semester_name TEXT, semester_description TEXT, other_details TEXT, PRIMARY KEY (semester_id));\nCREATE TABLE Students (student_id INTEGER, current_address_id INTEGER, permanent_address_id INTEGER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered OTHERS, date_left OTHERS, other_student_details TEXT, PRIMARY KEY (student_id));\nCREATE TABLE Student_Enrolment (student_enrolment_id INTEGER, degree_program_id INTEGER, semester_id INTEGER, student_id INTEGER, other_details TEXT, PRIMARY KEY (student_enrolment_id));\nCREATE TABLE Student_Enrolment_Courses (student_course_id INTEGER, course_id INTEGER, student_enrolment_id INTEGER, PRIMARY KEY (student_course_id));\nCREATE TABLE Transcripts (transcript_id INTEGER, transcript_date OTHERS, other_details TEXT, PRIMARY KEY (transcript_id));\nCREATE TABLE Transcript_Contents (student_course_id INTEGER, transcript_id INTEGER);\nFOREIGN KEY (Degree_Programs.department_id) REFERENCES Departments (department_id);\nFOREIGN KEY (Sections.course_id) REFERENCES Courses (course_id);\nFOREIGN KEY (Students.permanent_address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Students.current_address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Student_Enrolment.student_id) REFERENCES Students (student_id);\nFOREIGN KEY (Student_Enrolment.semester_id) REFERENCES Semesters (semester_id);\nFOREIGN KEY (Student_Enrolment.degree_program_id) REFERENCES Degree_Programs (degree_program_id);\nFOREIGN KEY (Student_Enrolment_Courses.student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id);\nFOREIGN KEY (Student_Enrolment_Courses.course_id) REFERENCES Courses (course_id);\nFOREIGN KEY (Transcript_Contents.transcript_id) REFERENCES Transcripts (transcript_id);\nFOREIGN KEY (Transcript_Contents.student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id);",
    "schema_complexity": [
      56,
      11
    ]
  },
  "cre_Docs_and_Epenses": {
    "ddl_string": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT, Document_Type_Description TEXT, PRIMARY KEY (Document_Type_Code));\nCREATE TABLE Ref_Budget_Codes (Budget_Type_Code TEXT, Budget_Type_Description TEXT, PRIMARY KEY (Budget_Type_Code));\nCREATE TABLE Projects (Project_ID INTEGER, Project_Details TEXT, PRIMARY KEY (Project_ID));\nCREATE TABLE Documents (Document_ID INTEGER, Document_Type_Code TEXT, Project_ID INTEGER, Document_Date OTHERS, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY (Document_ID));\nCREATE TABLE Statements (Statement_ID INTEGER, Statement_Details TEXT, PRIMARY KEY (Statement_ID));\nCREATE TABLE Documents_with_Expenses (Document_ID INTEGER, Budget_Type_Code TEXT, Document_Details TEXT, PRIMARY KEY (Document_ID));\nCREATE TABLE Accounts (Account_ID INTEGER, Statement_ID INTEGER, Account_Details TEXT, PRIMARY KEY (Account_ID));\nFOREIGN KEY (Documents.Project_ID) REFERENCES Projects (Project_ID);\nFOREIGN KEY (Documents.Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code);\nFOREIGN KEY (Statements.Statement_ID) REFERENCES Documents (Document_ID);\nFOREIGN KEY (Documents_with_Expenses.Document_ID) REFERENCES Documents (Document_ID);\nFOREIGN KEY (Documents_with_Expenses.Budget_Type_Code) REFERENCES Ref_Budget_Codes (Budget_Type_Code);\nFOREIGN KEY (Accounts.Statement_ID) REFERENCES Statements (Statement_ID);",
    "schema_complexity": [
      22,
      6
    ]
  },
  "ship_mission": {
    "ddl_string": "CREATE TABLE mission (Mission_ID INTEGER, Ship_ID INTEGER, Code TEXT, Launched_Year INTEGER, Location TEXT, Speed_knots INTEGER, Fate TEXT, PRIMARY KEY (Mission_ID));\nCREATE TABLE ship (Ship_ID INTEGER, Name TEXT, Type TEXT, Nationality TEXT, Tonnage INTEGER, PRIMARY KEY (Ship_ID));\nFOREIGN KEY (mission.Ship_ID) REFERENCES ship (Ship_ID);",
    "schema_complexity": [
      12,
      1
    ]
  },
  "company_office": {
    "ddl_string": "CREATE TABLE buildings (id INTEGER, name TEXT, City TEXT, Height INTEGER, Stories INTEGER, Status TEXT, PRIMARY KEY (id));\nCREATE TABLE Companies (id INTEGER, name TEXT, Headquarters TEXT, Industry TEXT, Sales_billion INTEGER, Profits_billion INTEGER, Assets_billion INTEGER, Market_Value_billion TEXT, PRIMARY KEY (id));\nCREATE TABLE Office_locations (building_id INTEGER, company_id INTEGER, move_in_year INTEGER, PRIMARY KEY (building_id));\nFOREIGN KEY (Office_locations.company_id) REFERENCES Companies (id);\nFOREIGN KEY (Office_locations.building_id) REFERENCES buildings (id);",
    "schema_complexity": [
      17,
      2
    ]
  },
  "tracking_software_problems": {
    "ddl_string": "CREATE TABLE Problem_Category_Codes (problem_category_code TEXT, problem_category_description TEXT, PRIMARY KEY (problem_category_code));\nCREATE TABLE Problem_Log (problem_log_id INTEGER, assigned_to_staff_id INTEGER, problem_id INTEGER, problem_category_code TEXT, problem_status_code TEXT, log_entry_date OTHERS, log_entry_description TEXT, log_entry_fix TEXT, other_log_details TEXT, PRIMARY KEY (problem_log_id));\nCREATE TABLE Problem_Status_Codes (problem_status_code TEXT, problem_status_description TEXT, PRIMARY KEY (problem_status_code));\nCREATE TABLE Product (product_id INTEGER, product_name TEXT, product_details TEXT, PRIMARY KEY (product_id));\nCREATE TABLE Staff (staff_id INTEGER, staff_first_name TEXT, staff_last_name TEXT, other_staff_details TEXT, PRIMARY KEY (staff_id));\nCREATE TABLE Problems (problem_id INTEGER, product_id INTEGER, closure_authorised_by_staff_id INTEGER, reported_by_staff_id INTEGER, date_problem_reported OTHERS, date_problem_closed OTHERS, problem_description TEXT, other_problem_details TEXT, PRIMARY KEY (problem_id));\nFOREIGN KEY (Problem_Log.problem_status_code) REFERENCES Problem_Status_Codes (problem_status_code);\nFOREIGN KEY (Problem_Log.problem_id) REFERENCES Problems (problem_id);\nFOREIGN KEY (Problem_Log.assigned_to_staff_id) REFERENCES Staff (staff_id);\nFOREIGN KEY (Problem_Log.problem_category_code) REFERENCES Problem_Category_Codes (problem_category_code);\nFOREIGN KEY (Problems.reported_by_staff_id) REFERENCES Staff (staff_id);\nFOREIGN KEY (Problems.product_id) REFERENCES Product (product_id);\nFOREIGN KEY (Problems.closure_authorised_by_staff_id) REFERENCES Staff (staff_id);",
    "schema_complexity": [
      28,
      7
    ]
  },
  "products_gen_characteristics": {
    "ddl_string": "CREATE TABLE Ref_Characteristic_Types (characteristic_type_code TEXT, characteristic_type_description TEXT, PRIMARY KEY (characteristic_type_code));\nCREATE TABLE Ref_Colors (color_code TEXT, color_description TEXT, PRIMARY KEY (color_code));\nCREATE TABLE Ref_Product_Categories (product_category_code TEXT, product_category_description TEXT, unit_of_measure TEXT, PRIMARY KEY (product_category_code));\nCREATE TABLE Characteristics (characteristic_id INTEGER, characteristic_type_code TEXT, characteristic_data_type TEXT, characteristic_name TEXT, other_characteristic_details TEXT, PRIMARY KEY (characteristic_id));\nCREATE TABLE Products (product_id INTEGER, color_code TEXT, product_category_code TEXT, product_name TEXT, typical_buying_price TEXT, typical_selling_price TEXT, product_description TEXT, other_product_details TEXT, PRIMARY KEY (product_id));\nCREATE TABLE Product_Characteristics (product_id INTEGER, characteristic_id INTEGER, product_characteristic_value TEXT);\nFOREIGN KEY (Characteristics.characteristic_type_code) REFERENCES Ref_Characteristic_Types (characteristic_type_code);\nFOREIGN KEY (Products.color_code) REFERENCES Ref_Colors (color_code);\nFOREIGN KEY (Products.product_category_code) REFERENCES Ref_Product_Categories (product_category_code);\nFOREIGN KEY (Product_Characteristics.product_id) REFERENCES Products (product_id);\nFOREIGN KEY (Product_Characteristics.characteristic_id) REFERENCES Characteristics (characteristic_id);",
    "schema_complexity": [
      23,
      5
    ]
  },
  "coffee_shop": {
    "ddl_string": "CREATE TABLE shop (Shop_ID INTEGER, Address TEXT, Num_of_staff TEXT, Score INTEGER, Open_Year TEXT, PRIMARY KEY (Shop_ID));\nCREATE TABLE member (Member_ID INTEGER, Name TEXT, Membership_card TEXT, Age INTEGER, Time_of_purchase INTEGER, Level_of_membership INTEGER, Address TEXT, PRIMARY KEY (Member_ID));\nCREATE TABLE happy_hour (HH_ID INTEGER, Shop_ID INTEGER, Month TEXT, Num_of_shaff_in_charge INTEGER, PRIMARY KEY (HH_ID));\nCREATE TABLE happy_hour_member (HH_ID INTEGER, Member_ID INTEGER, Total_amount INTEGER, PRIMARY KEY (HH_ID));\nFOREIGN KEY (happy_hour.Shop_ID) REFERENCES shop (Shop_ID);\nFOREIGN KEY (happy_hour_member.Member_ID) REFERENCES member (Member_ID);",
    "schema_complexity": [
      19,
      2
    ]
  },
  "riding_club": {
    "ddl_string": "CREATE TABLE player (Player_ID INTEGER, Sponsor_name TEXT, Player_name TEXT, Gender TEXT, Residence TEXT, Occupation TEXT, Votes INTEGER, Rank TEXT, PRIMARY KEY (Player_ID));\nCREATE TABLE club (Club_ID INTEGER, Club_name TEXT, Region TEXT, Start_year INTEGER, PRIMARY KEY (Club_ID));\nCREATE TABLE coach (Coach_ID INTEGER, Coach_name TEXT, Gender TEXT, Club_ID INTEGER, Rank INTEGER, PRIMARY KEY (Coach_ID));\nCREATE TABLE player_coach (Player_ID INTEGER, Coach_ID INTEGER, Starting_year INTEGER, PRIMARY KEY (Player_ID));\nCREATE TABLE match_result (Rank INTEGER, Club_ID INTEGER, Gold INTEGER, Big_Silver INTEGER, Small_Silver INTEGER, Bronze INTEGER, Points INTEGER, PRIMARY KEY (Rank));\nFOREIGN KEY (coach.Club_ID) REFERENCES club (Club_ID);\nFOREIGN KEY (player_coach.Coach_ID) REFERENCES coach (Coach_ID);\nFOREIGN KEY (player_coach.Player_ID) REFERENCES player (Player_ID);\nFOREIGN KEY (match_result.Club_ID) REFERENCES club (Club_ID);",
    "schema_complexity": [
      27,
      4
    ]
  },
  "customers_card_transactions": {
    "ddl_string": "CREATE TABLE Accounts (account_id INTEGER, customer_id INTEGER, account_name TEXT, other_account_details TEXT, PRIMARY KEY (account_id));\nCREATE TABLE Customers (customer_id INTEGER, customer_first_name TEXT, customer_last_name TEXT, customer_address TEXT, customer_phone TEXT, customer_email TEXT, other_customer_details TEXT, PRIMARY KEY (customer_id));\nCREATE TABLE Customers_Cards (card_id INTEGER, customer_id INTEGER, card_type_code TEXT, card_number TEXT, date_valid_from OTHERS, date_valid_to OTHERS, other_card_details TEXT, PRIMARY KEY (card_id));\nCREATE TABLE Financial_Transactions (transaction_id INTEGER, previous_transaction_id INTEGER, account_id INTEGER, card_id INTEGER, transaction_type TEXT, transaction_date OTHERS, transaction_amount INTEGER, transaction_comment TEXT, other_transaction_details TEXT);\nFOREIGN KEY (Financial_Transactions.account_id) REFERENCES Accounts (account_id);\nFOREIGN KEY (Financial_Transactions.card_id) REFERENCES Customers_Cards (card_id);",
    "schema_complexity": [
      27,
      2
    ]
  },
  "county_public_safety": {
    "ddl_string": "CREATE TABLE county_public_safety (County_ID INTEGER, Name TEXT, Population INTEGER, Police_officers INTEGER, Residents_per_officer INTEGER, Case_burden INTEGER, Crime_rate INTEGER, Police_force TEXT, Location TEXT, PRIMARY KEY (County_ID));\nCREATE TABLE city (City_ID INTEGER, County_ID INTEGER, Name TEXT, White INTEGER, Black INTEGER, Amerindian INTEGER, Asian INTEGER, Multiracial INTEGER, Hispanic INTEGER, PRIMARY KEY (City_ID));\nFOREIGN KEY (city.County_ID) REFERENCES county_public_safety (County_ID);",
    "schema_complexity": [
      18,
      1
    ]
  },
  "performance_attendance": {
    "ddl_string": "CREATE TABLE member (Member_ID TEXT, Name TEXT, Nationality TEXT, Role TEXT, PRIMARY KEY (Member_ID));\nCREATE TABLE performance (Performance_ID INTEGER, Date TEXT, Host TEXT, Location TEXT, Attendance INTEGER, PRIMARY KEY (Performance_ID));\nCREATE TABLE member_attendance (Member_ID INTEGER, Performance_ID INTEGER, Num_of_Pieces INTEGER, PRIMARY KEY (Member_ID));\nFOREIGN KEY (member_attendance.Performance_ID) REFERENCES performance (Performance_ID);\nFOREIGN KEY (member_attendance.Member_ID) REFERENCES member (Member_ID);",
    "schema_complexity": [
      12,
      2
    ]
  },
  "club_1": {
    "ddl_string": "CREATE TABLE Student (StuID INTEGER, LName TEXT, Fname TEXT, Age INTEGER, Sex TEXT, Major INTEGER, Advisor INTEGER, city_code TEXT, PRIMARY KEY (StuID));\nCREATE TABLE Club (ClubID INTEGER, ClubName TEXT, ClubDesc TEXT, ClubLocation TEXT, PRIMARY KEY (ClubID));\nCREATE TABLE Member_of_club (StuID INTEGER, ClubID INTEGER, Position TEXT);\nFOREIGN KEY (Member_of_club.ClubID) REFERENCES Club (ClubID);\nFOREIGN KEY (Member_of_club.StuID) REFERENCES Student (StuID);",
    "schema_complexity": [
      15,
      2
    ]
  },
  "singer": {
    "ddl_string": "CREATE TABLE singer (Singer_ID INTEGER, Name TEXT, Birth_Year INTEGER, Net_Worth_Millions INTEGER, Citizenship TEXT, PRIMARY KEY (Singer_ID));\nCREATE TABLE song (Song_ID INTEGER, Title TEXT, Singer_ID INTEGER, Sales INTEGER, Highest_Position INTEGER, PRIMARY KEY (Song_ID));\nFOREIGN KEY (song.Singer_ID) REFERENCES singer (Singer_ID);",
    "schema_complexity": [
      10,
      1
    ]
  },
  "culture_company": {
    "ddl_string": "CREATE TABLE book_club (book_club_id INTEGER, Year INTEGER, Author_or_Editor TEXT, Book_Title TEXT, Publisher TEXT, Category TEXT, Result TEXT, PRIMARY KEY (book_club_id));\nCREATE TABLE movie (movie_id INTEGER, Title TEXT, Year INTEGER, Director TEXT, Budget_million INTEGER, Gross_worldwide INTEGER, PRIMARY KEY (movie_id));\nCREATE TABLE culture_company (Company_name TEXT, Type TEXT, Incorporated_in TEXT, Group_Equity_Shareholding INTEGER, book_club_id TEXT, movie_id TEXT, PRIMARY KEY (Company_name));\nFOREIGN KEY (culture_company.movie_id) REFERENCES movie (movie_id);\nFOREIGN KEY (culture_company.book_club_id) REFERENCES book_club (book_club_id);",
    "schema_complexity": [
      19,
      2
    ]
  },
  "cre_Doc_Template_Mgt": {
    "ddl_string": "CREATE TABLE Ref_Template_Types (Template_Type_Code TEXT, Template_Type_Description TEXT, PRIMARY KEY (Template_Type_Code));\nCREATE TABLE Templates (Template_ID INTEGER, Version_Number INTEGER, Template_Type_Code TEXT, Date_Effective_From OTHERS, Date_Effective_To OTHERS, Template_Details TEXT, PRIMARY KEY (Template_ID));\nCREATE TABLE Documents (Document_ID INTEGER, Template_ID INTEGER, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY (Document_ID));\nCREATE TABLE Paragraphs (Paragraph_ID INTEGER, Document_ID INTEGER, Paragraph_Text TEXT, Other_Details TEXT, PRIMARY KEY (Paragraph_ID));\nFOREIGN KEY (Templates.Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code);\nFOREIGN KEY (Documents.Template_ID) REFERENCES Templates (Template_ID);\nFOREIGN KEY (Paragraphs.Document_ID) REFERENCES Documents (Document_ID);",
    "schema_complexity": [
      17,
      3
    ]
  },
  "musical": {
    "ddl_string": "CREATE TABLE musical (Musical_ID INTEGER, Name TEXT, Year INTEGER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY (Musical_ID));\nCREATE TABLE actor (Actor_ID INTEGER, Name TEXT, Musical_ID INTEGER, Character TEXT, Duration TEXT, age INTEGER, PRIMARY KEY (Actor_ID));\nFOREIGN KEY (actor.Musical_ID) REFERENCES actor (Actor_ID);",
    "schema_complexity": [
      13,
      1
    ]
  },
  "world_1": {
    "ddl_string": "CREATE TABLE city (ID INTEGER, Name TEXT, CountryCode TEXT, District TEXT, Population INTEGER, PRIMARY KEY (ID));\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE country (Code TEXT, Name TEXT, Continent TEXT, Region TEXT, SurfaceArea INTEGER, IndepYear INTEGER, Population INTEGER, LifeExpectancy INTEGER, GNP INTEGER, GNPOld INTEGER, LocalName TEXT, GovernmentForm TEXT, HeadOfState TEXT, Capital INTEGER, Code2 TEXT, PRIMARY KEY (Code));\nCREATE TABLE countrylanguage (CountryCode TEXT, Language TEXT, IsOfficial TEXT, Percentage INTEGER, PRIMARY KEY (CountryCode));\nFOREIGN KEY (city.CountryCode) REFERENCES country (Code);\nFOREIGN KEY (countrylanguage.CountryCode) REFERENCES country (Code);",
    "schema_complexity": [
      26,
      2
    ]
  },
  "device": {
    "ddl_string": "CREATE TABLE device (Device_ID INTEGER, Device TEXT, Carrier TEXT, Package_Version TEXT, Applications TEXT, Software_Platform TEXT, PRIMARY KEY (Device_ID));\nCREATE TABLE shop (Shop_ID INTEGER, Shop_Name TEXT, Location TEXT, Open_Date TEXT, Open_Year INTEGER, PRIMARY KEY (Shop_ID));\nCREATE TABLE stock (Shop_ID INTEGER, Device_ID INTEGER, Quantity INTEGER, PRIMARY KEY (Shop_ID));\nFOREIGN KEY (stock.Device_ID) REFERENCES device (Device_ID);\nFOREIGN KEY (stock.Shop_ID) REFERENCES shop (Shop_ID);",
    "schema_complexity": [
      14,
      2
    ]
  },
  "tracking_grants_for_research": {
    "ddl_string": "CREATE TABLE Document_Types (document_type_code TEXT, document_description TEXT, PRIMARY KEY (document_type_code));\nCREATE TABLE Documents (document_id INTEGER, document_type_code TEXT, grant_id INTEGER, sent_date OTHERS, response_received_date OTHERS, other_details TEXT, PRIMARY KEY (document_id));\nCREATE TABLE Grants (grant_id INTEGER, organisation_id INTEGER, grant_amount INTEGER, grant_start_date OTHERS, grant_end_date OTHERS, other_details TEXT, PRIMARY KEY (grant_id));\nCREATE TABLE Organisation_Types (organisation_type TEXT, organisation_type_description TEXT, PRIMARY KEY (organisation_type));\nCREATE TABLE Organisations (organisation_id INTEGER, organisation_type TEXT, organisation_details TEXT, PRIMARY KEY (organisation_id));\nCREATE TABLE Project_Outcomes (project_id INTEGER, outcome_code TEXT, outcome_details TEXT);\nCREATE TABLE Project_Staff (staff_id INTEGER, project_id INTEGER, role_code TEXT, date_from OTHERS, date_to OTHERS, other_details TEXT, PRIMARY KEY (staff_id));\nCREATE TABLE Projects (project_id INTEGER, organisation_id INTEGER, project_details TEXT, PRIMARY KEY (project_id));\nCREATE TABLE Research_Outcomes (outcome_code TEXT, outcome_description TEXT, PRIMARY KEY (outcome_code));\nCREATE TABLE Research_Staff (staff_id INTEGER, employer_organisation_id INTEGER, staff_details TEXT, PRIMARY KEY (staff_id));\nCREATE TABLE Staff_Roles (role_code TEXT, role_description TEXT, PRIMARY KEY (role_code));\nCREATE TABLE Tasks (task_id INTEGER, project_id INTEGER, task_details TEXT, eg Agree Objectives TEXT, PRIMARY KEY (task_id));\nFOREIGN KEY (Documents.grant_id) REFERENCES Grants (grant_id);\nFOREIGN KEY (Documents.document_type_code) REFERENCES Document_Types (document_type_code);\nFOREIGN KEY (Grants.organisation_id) REFERENCES Organisations (organisation_id);\nFOREIGN KEY (Organisations.organisation_type) REFERENCES Organisation_Types (organisation_type);\nFOREIGN KEY (Project_Outcomes.outcome_code) REFERENCES Research_Outcomes (outcome_code);\nFOREIGN KEY (Project_Outcomes.project_id) REFERENCES Projects (project_id);\nFOREIGN KEY (Project_Staff.role_code) REFERENCES Staff_Roles (role_code);\nFOREIGN KEY (Project_Staff.project_id) REFERENCES Projects (project_id);\nFOREIGN KEY (Projects.organisation_id) REFERENCES Organisations (organisation_id);\nFOREIGN KEY (Research_Staff.employer_organisation_id) REFERENCES Organisations (organisation_id);\nFOREIGN KEY (Tasks.project_id) REFERENCES Projects (project_id);",
    "schema_complexity": [
      42,
      11
    ]
  },
  "employee_hire_evaluation": {
    "ddl_string": "CREATE TABLE employee (Employee_ID INTEGER, Name TEXT, Age INTEGER, City TEXT, PRIMARY KEY (Employee_ID));\nCREATE TABLE shop (Shop_ID INTEGER, Name TEXT, Location TEXT, District TEXT, Number_products INTEGER, Manager_name TEXT, PRIMARY KEY (Shop_ID));\nCREATE TABLE hiring (Shop_ID INTEGER, Employee_ID INTEGER, Start_from TEXT, Is_full_time OTHERS, PRIMARY KEY (Employee_ID));\nCREATE TABLE evaluation (Employee_ID TEXT, Year_awarded TEXT, Bonus INTEGER, PRIMARY KEY (Employee_ID));\nFOREIGN KEY (hiring.Employee_ID) REFERENCES employee (Employee_ID);\nFOREIGN KEY (hiring.Shop_ID) REFERENCES shop (Shop_ID);\nFOREIGN KEY (evaluation.Employee_ID) REFERENCES employee (Employee_ID);",
    "schema_complexity": [
      17,
      3
    ]
  },
  "movie_1": {
    "ddl_string": "CREATE TABLE Movie (mID INTEGER, title TEXT, year INTEGER, director TEXT, PRIMARY KEY (mID));\nCREATE TABLE Reviewer (rID INTEGER, name TEXT, PRIMARY KEY (rID));\nCREATE TABLE Rating (rID INTEGER, mID INTEGER, stars INTEGER, ratingDate OTHERS);\nFOREIGN KEY (Rating.rID) REFERENCES Reviewer (rID);\nFOREIGN KEY (Rating.mID) REFERENCES Movie (mID);",
    "schema_complexity": [
      10,
      2
    ]
  },
  "network_1": {
    "ddl_string": "CREATE TABLE Highschooler (ID INTEGER, name TEXT, grade INTEGER, PRIMARY KEY (ID));\nCREATE TABLE Friend (student_id INTEGER, friend_id INTEGER, PRIMARY KEY (student_id));\nCREATE TABLE Likes (student_id INTEGER, liked_id INTEGER, PRIMARY KEY (student_id));\nFOREIGN KEY (Friend.friend_id) REFERENCES Highschooler (ID);\nFOREIGN KEY (Friend.student_id) REFERENCES Highschooler (ID);\nFOREIGN KEY (Likes.student_id) REFERENCES Highschooler (ID);\nFOREIGN KEY (Likes.liked_id) REFERENCES Highschooler (ID);",
    "schema_complexity": [
      7,
      4
    ]
  },
  "poker_player": {
    "ddl_string": "CREATE TABLE poker_player (Poker_Player_ID INTEGER, People_ID INTEGER, Final_Table_Made INTEGER, Best_Finish INTEGER, Money_Rank INTEGER, Earnings INTEGER, PRIMARY KEY (Poker_Player_ID));\nCREATE TABLE people (People_ID INTEGER, Nationality TEXT, Name TEXT, Birth_Date TEXT, Height INTEGER, PRIMARY KEY (People_ID));\nFOREIGN KEY (poker_player.People_ID) REFERENCES people (People_ID);",
    "schema_complexity": [
      11,
      1
    ]
  },
  "program_share": {
    "ddl_string": "CREATE TABLE program (Program_ID INTEGER, Name TEXT, Origin TEXT, Launch INTEGER, Owner TEXT, PRIMARY KEY (Program_ID));\nCREATE TABLE channel (Channel_ID INTEGER, Name TEXT, Owner TEXT, Share_in_percent INTEGER, Rating_in_percent INTEGER, PRIMARY KEY (Channel_ID));\nCREATE TABLE broadcast (Channel_ID INTEGER, Program_ID INTEGER, Time_of_day TEXT, PRIMARY KEY (Channel_ID));\nCREATE TABLE broadcast_share (Channel_ID INTEGER, Program_ID INTEGER, Date TEXT, Share_in_percent INTEGER, PRIMARY KEY (Channel_ID));\nFOREIGN KEY (broadcast.Program_ID) REFERENCES program (Program_ID);\nFOREIGN KEY (broadcast.Channel_ID) REFERENCES channel (Channel_ID);\nFOREIGN KEY (broadcast_share.Program_ID) REFERENCES program (Program_ID);\nFOREIGN KEY (broadcast_share.Channel_ID) REFERENCES channel (Channel_ID);",
    "schema_complexity": [
      17,
      4
    ]
  },
  "aircraft": {
    "ddl_string": "CREATE TABLE pilot (Pilot_Id INTEGER, Name TEXT, Age INTEGER, PRIMARY KEY (Pilot_Id));\nCREATE TABLE aircraft (Aircraft_ID INTEGER, Aircraft TEXT, Description TEXT, Max_Gross_Weight TEXT, Total_disk_area TEXT, Max_disk_Loading TEXT, PRIMARY KEY (Aircraft_ID));\nCREATE TABLE match (Round INTEGER, Location TEXT, Country TEXT, Date TEXT, Fastest_Qualifying TEXT, Winning_Pilot TEXT, Winning_Aircraft TEXT, PRIMARY KEY (Round));\nCREATE TABLE airport (Airport_ID INTEGER, Airport_Name TEXT, Total_Passengers INTEGER, %_Change_2007 TEXT, International_Passengers INTEGER, Domestic_Passengers INTEGER, Transit_Passengers INTEGER, Aircraft_Movements INTEGER, Freight_Metric_Tonnes INTEGER, PRIMARY KEY (Airport_ID));\nCREATE TABLE airport_aircraft (ID INTEGER, Airport_ID INTEGER, Aircraft_ID INTEGER, PRIMARY KEY (Airport_ID));\nFOREIGN KEY (match.Winning_Pilot) REFERENCES pilot (Pilot_Id);\nFOREIGN KEY (match.Winning_Aircraft) REFERENCES aircraft (Aircraft_ID);\nFOREIGN KEY (airport_aircraft.Aircraft_ID) REFERENCES aircraft (Aircraft_ID);\nFOREIGN KEY (airport_aircraft.Airport_ID) REFERENCES airport (Airport_ID);",
    "schema_complexity": [
      28,
      4
    ]
  },
  "restaurant_1": {
    "ddl_string": "CREATE TABLE Student (StuID INTEGER, LName TEXT, Fname TEXT, Age INTEGER, Sex TEXT, Major INTEGER, Advisor INTEGER, city_code TEXT, PRIMARY KEY (StuID));\nCREATE TABLE Restaurant (ResID INTEGER, ResName TEXT, Address TEXT, Rating INTEGER, PRIMARY KEY (ResID));\nCREATE TABLE Type_Of_Restaurant (ResID INTEGER, ResTypeID INTEGER);\nCREATE TABLE Restaurant_Type (ResTypeID INTEGER, ResTypeName TEXT, ResTypeDescription TEXT, PRIMARY KEY (ResTypeID));\nCREATE TABLE Visits_Restaurant (StuID INTEGER, ResID INTEGER, Time OTHERS, Spent INTEGER);\nFOREIGN KEY (Type_Of_Restaurant.ResTypeID) REFERENCES Restaurant_Type (ResTypeID);\nFOREIGN KEY (Type_Of_Restaurant.ResID) REFERENCES Restaurant (ResID);\nFOREIGN KEY (Visits_Restaurant.ResID) REFERENCES Restaurant (ResID);\nFOREIGN KEY (Visits_Restaurant.StuID) REFERENCES Student (StuID);",
    "schema_complexity": [
      21,
      4
    ]
  },
  "customers_and_invoices": {
    "ddl_string": "CREATE TABLE Customers (customer_id INTEGER, customer_first_name TEXT, customer_middle_initial TEXT, customer_last_name TEXT, gender TEXT, email_address TEXT, login_name TEXT, login_password TEXT, phone_number TEXT, town_city TEXT, state_county_province TEXT, country TEXT, PRIMARY KEY (customer_id));\nCREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, date_order_placed OTHERS, order_details TEXT, PRIMARY KEY (order_id));\nCREATE TABLE Invoices (invoice_number INTEGER, order_id INTEGER, invoice_date OTHERS, PRIMARY KEY (invoice_number));\nCREATE TABLE Accounts (account_id INTEGER, customer_id INTEGER, date_account_opened OTHERS, account_name TEXT, other_account_details TEXT, PRIMARY KEY (account_id));\nCREATE TABLE Product_Categories (production_type_code TEXT, product_type_description TEXT, vat_rating INTEGER, PRIMARY KEY (production_type_code));\nCREATE TABLE Products (product_id INTEGER, parent_product_id INTEGER, production_type_code TEXT, unit_price INTEGER, product_name TEXT, product_color TEXT, product_size TEXT, PRIMARY KEY (product_id));\nCREATE TABLE Financial_Transactions (transaction_id INTEGER, account_id INTEGER, invoice_number INTEGER, transaction_type TEXT, transaction_date OTHERS, transaction_amount INTEGER, transaction_comment TEXT, other_transaction_details TEXT);\nCREATE TABLE Order_Items (order_item_id INTEGER, order_id INTEGER, product_id INTEGER, product_quantity TEXT, other_order_item_details TEXT, PRIMARY KEY (order_item_id));\nCREATE TABLE Invoice_Line_Items (order_item_id INTEGER, invoice_number INTEGER, product_id INTEGER, product_title TEXT, product_quantity TEXT, product_price INTEGER, derived_product_cost INTEGER, derived_vat_payable INTEGER, derived_total_cost INTEGER);\nFOREIGN KEY (Orders.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Invoices.order_id) REFERENCES Orders (order_id);\nFOREIGN KEY (Accounts.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Products.production_type_code) REFERENCES Product_Categories (production_type_code);\nFOREIGN KEY (Financial_Transactions.account_id) REFERENCES Accounts (account_id);\nFOREIGN KEY (Financial_Transactions.invoice_number) REFERENCES Invoices (invoice_number);\nFOREIGN KEY (Order_Items.order_id) REFERENCES Orders (order_id);\nFOREIGN KEY (Order_Items.product_id) REFERENCES Products (product_id);\nFOREIGN KEY (Invoice_Line_Items.product_id) REFERENCES Products (product_id);\nFOREIGN KEY (Invoice_Line_Items.invoice_number) REFERENCES Invoices (invoice_number);\nFOREIGN KEY (Invoice_Line_Items.order_item_id) REFERENCES Order_Items (order_item_id);",
    "schema_complexity": [
      56,
      11
    ]
  },
  "insurance_and_eClaims": {
    "ddl_string": "CREATE TABLE Customers (Customer_ID INTEGER, Customer_Details TEXT, PRIMARY KEY (Customer_ID));\nCREATE TABLE Staff (Staff_ID INTEGER, Staff_Details TEXT, PRIMARY KEY (Staff_ID));\nCREATE TABLE Policies (Policy_ID INTEGER, Customer_ID INTEGER, Policy_Type_Code TEXT, Start_Date OTHERS, End_Date OTHERS, PRIMARY KEY (Policy_ID));\nCREATE TABLE Claim_Headers (Claim_Header_ID INTEGER, Claim_Status_Code TEXT, Claim_Type_Code TEXT, Policy_ID INTEGER, Date_of_Claim OTHERS, Date_of_Settlement OTHERS, Amount_Claimed INTEGER, Amount_Piad INTEGER, PRIMARY KEY (Claim_Header_ID));\nCREATE TABLE Claims_Documents (Claim_ID INTEGER, Document_Type_Code TEXT, Created_by_Staff_ID INTEGER, Created_Date INTEGER, PRIMARY KEY (Claim_ID));\nCREATE TABLE Claims_Processing_Stages (Claim_Stage_ID INTEGER, Next_Claim_Stage_ID INTEGER, Claim_Status_Name TEXT, Claim_Status_Description TEXT, PRIMARY KEY (Claim_Stage_ID));\nCREATE TABLE Claims_Processing (Claim_Processing_ID INTEGER, Claim_ID INTEGER, Claim_Outcome_Code TEXT, Claim_Stage_ID INTEGER, Staff_ID INTEGER, PRIMARY KEY (Claim_Processing_ID));\nFOREIGN KEY (Policies.Customer_ID) REFERENCES Customers (Customer_ID);\nFOREIGN KEY (Claim_Headers.Policy_ID) REFERENCES Policies (Policy_ID);\nFOREIGN KEY (Claims_Documents.Created_by_Staff_ID) REFERENCES Staff (Staff_ID);\nFOREIGN KEY (Claims_Documents.Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID);\nFOREIGN KEY (Claims_Processing.Staff_ID) REFERENCES Staff (Staff_ID);\nFOREIGN KEY (Claims_Processing.Claim_ID) REFERENCES Claim_Headers (Claim_Header_ID);",
    "schema_complexity": [
      30,
      6
    ]
  },
  "college_1": {
    "ddl_string": "CREATE TABLE CLASS (CLASS_CODE TEXT, CRS_CODE TEXT, CLASS_SECTION TEXT, CLASS_TIME TEXT, CLASS_ROOM TEXT, PROF_NUM INTEGER, PRIMARY KEY (CLASS_CODE));\nCREATE TABLE COURSE (CRS_CODE TEXT, DEPT_CODE TEXT, CRS_DESCRIPTION TEXT, CRS_CREDIT INTEGER, PRIMARY KEY (CRS_CODE));\nCREATE TABLE DEPARTMENT (DEPT_CODE TEXT, DEPT_NAME TEXT, SCHOOL_CODE TEXT, EMP_NUM INTEGER, DEPT_ADDRESS TEXT, DEPT_EXTENSION TEXT, PRIMARY KEY (DEPT_CODE));\nCREATE TABLE EMPLOYEE (EMP_NUM INTEGER, EMP_LNAME TEXT, EMP_FNAME TEXT, EMP_INITIAL TEXT, EMP_JOBCODE TEXT, EMP_HIREDATE OTHERS, EMP_DOB OTHERS, PRIMARY KEY (EMP_NUM));\nCREATE TABLE ENROLL (CLASS_CODE TEXT, STU_NUM INTEGER, ENROLL_GRADE TEXT);\nCREATE TABLE PROFESSOR (EMP_NUM INTEGER, DEPT_CODE TEXT, PROF_OFFICE TEXT, PROF_EXTENSION TEXT, PROF_HIGH_DEGREE TEXT);\nCREATE TABLE STUDENT (STU_NUM INTEGER, STU_LNAME TEXT, STU_FNAME TEXT, STU_INIT TEXT, STU_DOB OTHERS, STU_HRS INTEGER, STU_CLASS TEXT, STU_GPA INTEGER, STU_TRANSFER INTEGER, DEPT_CODE TEXT, STU_PHONE TEXT, PROF_NUM INTEGER, PRIMARY KEY (STU_NUM));\nFOREIGN KEY (CLASS.PROF_NUM) REFERENCES EMPLOYEE (EMP_NUM);\nFOREIGN KEY (CLASS.CRS_CODE) REFERENCES COURSE (CRS_CODE);\nFOREIGN KEY (COURSE.DEPT_CODE) REFERENCES DEPARTMENT (DEPT_CODE);\nFOREIGN KEY (DEPARTMENT.EMP_NUM) REFERENCES EMPLOYEE (EMP_NUM);\nFOREIGN KEY (ENROLL.STU_NUM) REFERENCES STUDENT (STU_NUM);\nFOREIGN KEY (ENROLL.CLASS_CODE) REFERENCES CLASS (CLASS_CODE);\nFOREIGN KEY (PROFESSOR.DEPT_CODE) REFERENCES DEPARTMENT (DEPT_CODE);\nFOREIGN KEY (PROFESSOR.EMP_NUM) REFERENCES EMPLOYEE (EMP_NUM);\nFOREIGN KEY (STUDENT.DEPT_CODE) REFERENCES DEPARTMENT (DEPT_CODE);",
    "schema_complexity": [
      43,
      9
    ]
  },
  "local_govt_mdm": {
    "ddl_string": "CREATE TABLE Customer_Master_Index (master_customer_id INTEGER, cmi_details TEXT, PRIMARY KEY (master_customer_id));\nCREATE TABLE CMI_Cross_References (cmi_cross_ref_id INTEGER, master_customer_id INTEGER, source_system_code TEXT, PRIMARY KEY (cmi_cross_ref_id));\nCREATE TABLE Council_Tax (council_tax_id INTEGER, cmi_cross_ref_id INTEGER, PRIMARY KEY (council_tax_id));\nCREATE TABLE Business_Rates (business_rates_id INTEGER, cmi_cross_ref_id INTEGER, PRIMARY KEY (business_rates_id));\nCREATE TABLE Benefits_Overpayments (council_tax_id INTEGER, cmi_cross_ref_id INTEGER, PRIMARY KEY (council_tax_id));\nCREATE TABLE Parking_Fines (council_tax_id INTEGER, cmi_cross_ref_id INTEGER, PRIMARY KEY (council_tax_id));\nCREATE TABLE Rent_Arrears (council_tax_id INTEGER, cmi_cross_ref_id INTEGER, PRIMARY KEY (council_tax_id));\nCREATE TABLE Electoral_Register (electoral_register_id INTEGER, cmi_cross_ref_id INTEGER, PRIMARY KEY (electoral_register_id));\nFOREIGN KEY (CMI_Cross_References.master_customer_id) REFERENCES Customer_Master_Index (master_customer_id);\nFOREIGN KEY (Council_Tax.cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id);\nFOREIGN KEY (Business_Rates.cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id);\nFOREIGN KEY (Benefits_Overpayments.cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id);\nFOREIGN KEY (Parking_Fines.cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id);\nFOREIGN KEY (Rent_Arrears.cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id);\nFOREIGN KEY (Electoral_Register.cmi_cross_ref_id) REFERENCES CMI_Cross_References (cmi_cross_ref_id);",
    "schema_complexity": [
      17,
      7
    ]
  },
  "book_2": {
    "ddl_string": "CREATE TABLE publication (Publication_ID INTEGER, Book_ID INTEGER, Publisher TEXT, Publication_Date TEXT, Price INTEGER, PRIMARY KEY (Publication_ID));\nCREATE TABLE book (Book_ID INTEGER, Title TEXT, Issues INTEGER, Writer TEXT, PRIMARY KEY (Book_ID));\nFOREIGN KEY (publication.Book_ID) REFERENCES book (Book_ID);",
    "schema_complexity": [
      9,
      1
    ]
  },
  "hr_1": {
    "ddl_string": "CREATE TABLE regions (REGION_ID INTEGER, REGION_NAME TEXT, PRIMARY KEY (REGION_ID));\nCREATE TABLE countries (COUNTRY_ID TEXT, COUNTRY_NAME TEXT, REGION_ID INTEGER, PRIMARY KEY (COUNTRY_ID));\nCREATE TABLE departments (DEPARTMENT_ID INTEGER, DEPARTMENT_NAME TEXT, MANAGER_ID INTEGER, LOCATION_ID INTEGER, PRIMARY KEY (DEPARTMENT_ID));\nCREATE TABLE jobs (JOB_ID TEXT, JOB_TITLE TEXT, MIN_SALARY INTEGER, MAX_SALARY INTEGER, PRIMARY KEY (JOB_ID));\nCREATE TABLE employees (EMPLOYEE_ID INTEGER, FIRST_NAME TEXT, LAST_NAME TEXT, EMAIL TEXT, PHONE_NUMBER TEXT, HIRE_DATE OTHERS, JOB_ID TEXT, SALARY INTEGER, COMMISSION_PCT INTEGER, MANAGER_ID INTEGER, DEPARTMENT_ID INTEGER, PRIMARY KEY (EMPLOYEE_ID));\nCREATE TABLE job_history (EMPLOYEE_ID INTEGER, START_DATE OTHERS, END_DATE OTHERS, JOB_ID TEXT, DEPARTMENT_ID INTEGER, PRIMARY KEY (EMPLOYEE_ID));\nCREATE TABLE locations (LOCATION_ID INTEGER, STREET_ADDRESS TEXT, POSTAL_CODE TEXT, CITY TEXT, STATE_PROVINCE TEXT, COUNTRY_ID TEXT, PRIMARY KEY (LOCATION_ID));\nFOREIGN KEY (countries.REGION_ID) REFERENCES regions (REGION_ID);\nFOREIGN KEY (employees.JOB_ID) REFERENCES jobs (JOB_ID);\nFOREIGN KEY (employees.DEPARTMENT_ID) REFERENCES departments (DEPARTMENT_ID);\nFOREIGN KEY (job_history.JOB_ID) REFERENCES jobs (JOB_ID);\nFOREIGN KEY (job_history.DEPARTMENT_ID) REFERENCES departments (DEPARTMENT_ID);\nFOREIGN KEY (job_history.EMPLOYEE_ID) REFERENCES employees (EMPLOYEE_ID);\nFOREIGN KEY (locations.COUNTRY_ID) REFERENCES countries (COUNTRY_ID);",
    "schema_complexity": [
      35,
      7
    ]
  },
  "soccer_1": {
    "ddl_string": "CREATE TABLE Player_Attributes (id INTEGER, player_fifa_api_id INTEGER, player_api_id INTEGER, date TEXT, overall_rating INTEGER, potential INTEGER, preferred_foot TEXT, attacking_work_rate TEXT, defensive_work_rate TEXT, crossing INTEGER, finishing INTEGER, heading_accuracy INTEGER, short_passing INTEGER, volleys INTEGER, dribbling INTEGER, curve INTEGER, free_kick_accuracy INTEGER, long_passing INTEGER, ball_control INTEGER, acceleration INTEGER, sprint_speed INTEGER, agility INTEGER, reactions INTEGER, balance INTEGER, shot_power INTEGER, jumping INTEGER, stamina INTEGER, strength INTEGER, long_shots INTEGER, aggression INTEGER, interceptions INTEGER, positioning INTEGER, vision INTEGER, penalties INTEGER, marking INTEGER, standing_tackle INTEGER, sliding_tackle INTEGER, gk_diving INTEGER, gk_handling INTEGER, gk_kicking INTEGER, gk_positioning INTEGER, gk_reflexes INTEGER, PRIMARY KEY (id));\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE Player (id INTEGER, player_api_id INTEGER, player_name TEXT, player_fifa_api_id INTEGER, birthday TEXT, height INTEGER, weight INTEGER, PRIMARY KEY (id));\nCREATE TABLE League (id INTEGER, country_id INTEGER, name TEXT, PRIMARY KEY (id));\nCREATE TABLE Country (id INTEGER, name TEXT, PRIMARY KEY (id));\nCREATE TABLE Team (id INTEGER, team_api_id INTEGER, team_fifa_api_id INTEGER, team_long_name TEXT, team_short_name TEXT, PRIMARY KEY (id));\nCREATE TABLE Team_Attributes (id INTEGER, team_fifa_api_id INTEGER, team_api_id INTEGER, date TEXT, buildUpPlaySpeed INTEGER, buildUpPlaySpeedClass TEXT, buildUpPlayDribbling INTEGER, buildUpPlayDribblingClass TEXT, buildUpPlayPassing INTEGER, buildUpPlayPassingClass TEXT, buildUpPlayPositioningClass TEXT, chanceCreationPassing INTEGER, chanceCreationPassingClass TEXT, chanceCreationCrossing INTEGER, chanceCreationCrossingClass TEXT, chanceCreationShooting INTEGER, chanceCreationShootingClass TEXT, chanceCreationPositioningClass TEXT, defencePressure INTEGER, defencePressureClass TEXT, defenceAggression INTEGER, defenceAggressionClass TEXT, defenceTeamWidth INTEGER, defenceTeamWidthClass TEXT, defenceDefenderLineClass TEXT, PRIMARY KEY (id));\nFOREIGN KEY (Player_Attributes.player_api_id) REFERENCES Player (player_api_id);\nFOREIGN KEY (Player_Attributes.player_fifa_api_id) REFERENCES Player (player_fifa_api_id);\nFOREIGN KEY (League.country_id) REFERENCES Country (id);\nFOREIGN KEY (Team_Attributes.team_api_id) REFERENCES Team (team_api_id);\nFOREIGN KEY (Team_Attributes.team_fifa_api_id) REFERENCES Team (team_fifa_api_id);",
    "schema_complexity": [
      86,
      5
    ]
  },
  "sakila_1": {
    "ddl_string": "CREATE TABLE actor (actor_id INTEGER, first_name TEXT, last_name TEXT, last_update OTHERS, PRIMARY KEY (actor_id));\nCREATE TABLE address (address_id INTEGER, address TEXT, address2 TEXT, district TEXT, city_id INTEGER, postal_code TEXT, phone TEXT, last_update OTHERS, PRIMARY KEY (address_id));\nCREATE TABLE category (category_id INTEGER, name TEXT, last_update OTHERS, PRIMARY KEY (category_id));\nCREATE TABLE city (city_id INTEGER, city TEXT, country_id INTEGER, last_update OTHERS, PRIMARY KEY (city_id));\nCREATE TABLE country (country_id INTEGER, country TEXT, last_update OTHERS, PRIMARY KEY (country_id));\nCREATE TABLE customer (customer_id INTEGER, store_id INTEGER, first_name TEXT, last_name TEXT, email TEXT, address_id INTEGER, active OTHERS, create_date OTHERS, last_update OTHERS, PRIMARY KEY (customer_id));\nCREATE TABLE film (film_id INTEGER, title TEXT, description TEXT, release_year OTHERS, language_id INTEGER, original_language_id INTEGER, rental_duration INTEGER, rental_rate INTEGER, length INTEGER, replacement_cost INTEGER, rating TEXT, special_features TEXT, last_update OTHERS, PRIMARY KEY (film_id));\nCREATE TABLE film_actor (actor_id INTEGER, film_id INTEGER, last_update OTHERS, PRIMARY KEY (actor_id));\nCREATE TABLE film_category (film_id INTEGER, category_id INTEGER, last_update OTHERS, PRIMARY KEY (film_id));\nCREATE TABLE film_text (film_id INTEGER, title TEXT, description TEXT, PRIMARY KEY (film_id));\nCREATE TABLE inventory (inventory_id INTEGER, film_id INTEGER, store_id INTEGER, last_update OTHERS, PRIMARY KEY (inventory_id));\nCREATE TABLE language (language_id INTEGER, name TEXT, last_update OTHERS, PRIMARY KEY (language_id));\nCREATE TABLE payment (payment_id INTEGER, customer_id INTEGER, staff_id INTEGER, rental_id INTEGER, amount INTEGER, payment_date OTHERS, last_update OTHERS, PRIMARY KEY (payment_id));\nCREATE TABLE rental (rental_id INTEGER, rental_date OTHERS, inventory_id INTEGER, customer_id INTEGER, return_date OTHERS, staff_id INTEGER, last_update OTHERS, PRIMARY KEY (rental_id));\nCREATE TABLE staff (staff_id INTEGER, first_name TEXT, last_name TEXT, address_id INTEGER, picture OTHERS, email TEXT, store_id INTEGER, active OTHERS, username TEXT, password TEXT, last_update OTHERS, PRIMARY KEY (staff_id));\nCREATE TABLE store (store_id INTEGER, manager_staff_id INTEGER, address_id INTEGER, last_update OTHERS, PRIMARY KEY (store_id));\nFOREIGN KEY (address.city_id) REFERENCES city (city_id);\nFOREIGN KEY (city.country_id) REFERENCES country (country_id);\nFOREIGN KEY (customer.store_id) REFERENCES store (store_id);\nFOREIGN KEY (customer.address_id) REFERENCES address (address_id);\nFOREIGN KEY (film.original_language_id) REFERENCES language (language_id);\nFOREIGN KEY (film.language_id) REFERENCES language (language_id);\nFOREIGN KEY (film_actor.film_id) REFERENCES film (film_id);\nFOREIGN KEY (film_actor.actor_id) REFERENCES actor (actor_id);\nFOREIGN KEY (film_category.category_id) REFERENCES category (category_id);\nFOREIGN KEY (film_category.film_id) REFERENCES film (film_id);\nFOREIGN KEY (inventory.film_id) REFERENCES film (film_id);\nFOREIGN KEY (inventory.store_id) REFERENCES store (store_id);\nFOREIGN KEY (payment.staff_id) REFERENCES staff (staff_id);\nFOREIGN KEY (payment.customer_id) REFERENCES customer (customer_id);\nFOREIGN KEY (payment.rental_id) REFERENCES rental (rental_id);\nFOREIGN KEY (rental.customer_id) REFERENCES customer (customer_id);\nFOREIGN KEY (rental.inventory_id) REFERENCES inventory (inventory_id);\nFOREIGN KEY (rental.staff_id) REFERENCES staff (staff_id);\nFOREIGN KEY (staff.address_id) REFERENCES address (address_id);\nFOREIGN KEY (store.address_id) REFERENCES address (address_id);\nFOREIGN KEY (store.manager_staff_id) REFERENCES staff (staff_id);",
    "schema_complexity": [
      89,
      21
    ]
  },
  "real_estate_properties": {
    "ddl_string": "CREATE TABLE Ref_Feature_Types (feature_type_code TEXT, feature_type_name TEXT, PRIMARY KEY (feature_type_code));\nCREATE TABLE Ref_Property_Types (property_type_code TEXT, property_type_description TEXT, PRIMARY KEY (property_type_code));\nCREATE TABLE Other_Available_Features (feature_id INTEGER, feature_type_code TEXT, feature_name TEXT, feature_description TEXT, PRIMARY KEY (feature_id));\nCREATE TABLE Properties (property_id INTEGER, property_type_code TEXT, date_on_market OTHERS, date_sold OTHERS, property_name TEXT, property_address TEXT, room_count INTEGER, vendor_requested_price INTEGER, buyer_offered_price INTEGER, agreed_selling_price INTEGER, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT, PRIMARY KEY (property_id));\nCREATE TABLE Other_Property_Features (property_id INTEGER, feature_id INTEGER, property_feature_description TEXT);\nFOREIGN KEY (Other_Available_Features.feature_type_code) REFERENCES Ref_Feature_Types (feature_type_code);\nFOREIGN KEY (Properties.property_type_code) REFERENCES Ref_Property_Types (property_type_code);\nFOREIGN KEY (Other_Property_Features.property_id) REFERENCES Properties (property_id);\nFOREIGN KEY (Other_Property_Features.feature_id) REFERENCES Other_Available_Features (feature_id);",
    "schema_complexity": [
      37,
      4
    ]
  },
  "college_3": {
    "ddl_string": "CREATE TABLE Student (StuID INTEGER, LName TEXT, Fname TEXT, Age INTEGER, Sex TEXT, Major INTEGER, Advisor INTEGER, city_code TEXT, PRIMARY KEY (StuID));\nCREATE TABLE Faculty (FacID INTEGER, Lname TEXT, Fname TEXT, Rank TEXT, Sex TEXT, Phone INTEGER, Room TEXT, Building TEXT, PRIMARY KEY (FacID));\nCREATE TABLE Department (DNO INTEGER, Division TEXT, DName TEXT, Room TEXT, Building TEXT, DPhone INTEGER, PRIMARY KEY (DNO));\nCREATE TABLE Member_of (FacID INTEGER, DNO INTEGER, Appt_Type TEXT);\nCREATE TABLE Course (CID TEXT, CName TEXT, Credits INTEGER, Instructor INTEGER, Days TEXT, Hours TEXT, DNO INTEGER, PRIMARY KEY (CID));\nCREATE TABLE Minor_in (StuID INTEGER, DNO INTEGER);\nCREATE TABLE Enrolled_in (StuID INTEGER, CID TEXT, Grade TEXT);\nCREATE TABLE Gradeconversion (lettergrade TEXT, gradepoint INTEGER, PRIMARY KEY (lettergrade));\nFOREIGN KEY (Member_of.DNO) REFERENCES Department (DNO);\nFOREIGN KEY (Member_of.FacID) REFERENCES Faculty (FacID);\nFOREIGN KEY (Course.DNO) REFERENCES Department (DNO);\nFOREIGN KEY (Course.Instructor) REFERENCES Faculty (FacID);\nFOREIGN KEY (Minor_in.DNO) REFERENCES Department (DNO);\nFOREIGN KEY (Minor_in.StuID) REFERENCES Student (StuID);\nFOREIGN KEY (Enrolled_in.Grade) REFERENCES Gradeconversion (lettergrade);\nFOREIGN KEY (Enrolled_in.CID) REFERENCES Course (CID);\nFOREIGN KEY (Enrolled_in.StuID) REFERENCES Student (StuID);",
    "schema_complexity": [
      39,
      9
    ]
  },
  "course_teach": {
    "ddl_string": "CREATE TABLE course (Course_ID INTEGER, Staring_Date TEXT, Course TEXT, PRIMARY KEY (Course_ID));\nCREATE TABLE teacher (Teacher_ID INTEGER, Name TEXT, Age TEXT, Hometown TEXT, PRIMARY KEY (Teacher_ID));\nCREATE TABLE course_arrange (Course_ID INTEGER, Teacher_ID INTEGER, Grade INTEGER, PRIMARY KEY (Course_ID));\nFOREIGN KEY (course_arrange.Teacher_ID) REFERENCES teacher (Teacher_ID);\nFOREIGN KEY (course_arrange.Course_ID) REFERENCES course (Course_ID);",
    "schema_complexity": [
      10,
      2
    ]
  },
  "roller_coaster": {
    "ddl_string": "CREATE TABLE roller_coaster (Roller_Coaster_ID INTEGER, Name TEXT, Park TEXT, Country_ID INTEGER, Length INTEGER, Height INTEGER, Speed TEXT, Opened TEXT, Status TEXT, PRIMARY KEY (Roller_Coaster_ID));\nCREATE TABLE country (Country_ID INTEGER, Name TEXT, Population INTEGER, Area INTEGER, Languages TEXT, PRIMARY KEY (Country_ID));\nFOREIGN KEY (roller_coaster.Country_ID) REFERENCES country (Country_ID);",
    "schema_complexity": [
      14,
      1
    ]
  },
  "customer_deliveries": {
    "ddl_string": "CREATE TABLE Products (product_id INTEGER, product_name TEXT, product_price INTEGER, product_description TEXT, PRIMARY KEY (product_id));\nCREATE TABLE Addresses (address_id INTEGER, address_details TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY (address_id));\nCREATE TABLE Customers (customer_id INTEGER, payment_method TEXT, customer_name TEXT, customer_phone TEXT, customer_email TEXT, date_became_customer OTHERS, PRIMARY KEY (customer_id));\nCREATE TABLE Regular_Orders (regular_order_id INTEGER, distributer_id INTEGER, PRIMARY KEY (regular_order_id));\nCREATE TABLE Regular_Order_Products (regular_order_id INTEGER, product_id INTEGER);\nCREATE TABLE Actual_Orders (actual_order_id INTEGER, order_status_code TEXT, regular_order_id INTEGER, actual_order_date OTHERS, PRIMARY KEY (actual_order_id));\nCREATE TABLE Actual_Order_Products (actual_order_id INTEGER, product_id INTEGER);\nCREATE TABLE Customer_Addresses (customer_id INTEGER, address_id INTEGER, date_from OTHERS, address_type TEXT, date_to OTHERS);\nCREATE TABLE Delivery_Routes (route_id INTEGER, route_name TEXT, other_route_details TEXT, PRIMARY KEY (route_id));\nCREATE TABLE Delivery_Route_Locations (location_code TEXT, route_id INTEGER, location_address_id INTEGER, location_name TEXT, PRIMARY KEY (location_code));\nCREATE TABLE Trucks (truck_id INTEGER, truck_licence_number TEXT, truck_details TEXT, PRIMARY KEY (truck_id));\nCREATE TABLE Employees (employee_id INTEGER, employee_address_id INTEGER, employee_name TEXT, employee_phone TEXT, PRIMARY KEY (employee_id));\nCREATE TABLE Order_Deliveries (location_code TEXT, actual_order_id INTEGER, delivery_status_code TEXT, driver_employee_id INTEGER, truck_id INTEGER, delivery_date OTHERS);\nFOREIGN KEY (Regular_Orders.distributer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Regular_Order_Products.regular_order_id) REFERENCES Regular_Orders (regular_order_id);\nFOREIGN KEY (Regular_Order_Products.product_id) REFERENCES Products (product_id);\nFOREIGN KEY (Actual_Orders.regular_order_id) REFERENCES Regular_Orders (regular_order_id);\nFOREIGN KEY (Actual_Order_Products.actual_order_id) REFERENCES Actual_Orders (actual_order_id);\nFOREIGN KEY (Actual_Order_Products.product_id) REFERENCES Products (product_id);\nFOREIGN KEY (Customer_Addresses.address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Customer_Addresses.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Delivery_Route_Locations.route_id) REFERENCES Delivery_Routes (route_id);\nFOREIGN KEY (Delivery_Route_Locations.location_address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Employees.employee_address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Order_Deliveries.driver_employee_id) REFERENCES Employees (employee_id);\nFOREIGN KEY (Order_Deliveries.location_code) REFERENCES Delivery_Route_Locations (location_code);\nFOREIGN KEY (Order_Deliveries.actual_order_id) REFERENCES Actual_Orders (actual_order_id);\nFOREIGN KEY (Order_Deliveries.truck_id) REFERENCES Trucks (truck_id);",
    "schema_complexity": [
      51,
      15
    ]
  },
  "game_injury": {
    "ddl_string": "CREATE TABLE stadium (id INTEGER, name TEXT, Home_Games INTEGER, Average_Attendance INTEGER, Total_Attendance INTEGER, Capacity_Percentage INTEGER, PRIMARY KEY (id));\nCREATE TABLE game (stadium_id INTEGER, id INTEGER, Season INTEGER, Date TEXT, Home_team TEXT, Away_team TEXT, Score TEXT, Competition TEXT, PRIMARY KEY (id));\nCREATE TABLE injury_accident (game_id INTEGER, id INTEGER, Player TEXT, Injury TEXT, Number_of_matches TEXT, Source TEXT, PRIMARY KEY (id));\nFOREIGN KEY (game.stadium_id) REFERENCES stadium (id);\nFOREIGN KEY (injury_accident.game_id) REFERENCES game (id);",
    "schema_complexity": [
      20,
      2
    ]
  },
  "school_finance": {
    "ddl_string": "CREATE TABLE School (School_id TEXT, School_name TEXT, Location TEXT, Mascot TEXT, Enrollment INTEGER, IHSAA_Class TEXT, IHSAA_Football_Class TEXT, County TEXT, PRIMARY KEY (School_id));\nCREATE TABLE budget (School_id INTEGER, Year INTEGER, Budgeted INTEGER, total_budget_percent_budgeted INTEGER, Invested INTEGER, total_budget_percent_invested INTEGER, Budget_invested_percent TEXT, PRIMARY KEY (School_id));\nCREATE TABLE endowment (endowment_id INTEGER, School_id INTEGER, donator_name TEXT, amount INTEGER, PRIMARY KEY (endowment_id));\nFOREIGN KEY (budget.School_id) REFERENCES School (School_id);\nFOREIGN KEY (endowment.School_id) REFERENCES School (School_id);",
    "schema_complexity": [
      19,
      2
    ]
  },
  "scholar": {
    "ddl_string": "CREATE TABLE venue (venueId INTEGER, venueName TEXT, PRIMARY KEY (venueId));\nCREATE TABLE author (authorId INTEGER, authorName TEXT, PRIMARY KEY (authorId));\nCREATE TABLE dataset (datasetId INTEGER, datasetName TEXT, PRIMARY KEY (datasetId));\nCREATE TABLE journal (journalId INTEGER, journalName TEXT, PRIMARY KEY (journalId));\nCREATE TABLE keyphrase (keyphraseId INTEGER, keyphraseName TEXT, PRIMARY KEY (keyphraseId));\nCREATE TABLE paper (paperId INTEGER, title TEXT, venueId INTEGER, year INTEGER, numCiting INTEGER, numCitedBy INTEGER, journalId INTEGER, PRIMARY KEY (paperId));\nCREATE TABLE cite (citingPaperId INTEGER, citedPaperId INTEGER, PRIMARY KEY (citingPaperId));\nCREATE TABLE paperDataset (paperId INTEGER, datasetId INTEGER, PRIMARY KEY (datasetId));\nCREATE TABLE paperKeyphrase (paperId INTEGER, keyphraseId INTEGER, PRIMARY KEY (keyphraseId));\nCREATE TABLE writes (paperId INTEGER, authorId INTEGER, PRIMARY KEY (paperId));\nFOREIGN KEY (paper.venueId) REFERENCES venue (venueId);\nFOREIGN KEY (paper.journalId) REFERENCES journal (journalId);\nFOREIGN KEY (cite.citingPaperId) REFERENCES paper (paperId);\nFOREIGN KEY (cite.citedPaperId) REFERENCES paper (paperId);\nFOREIGN KEY (paperKeyphrase.keyphraseId) REFERENCES keyphrase (keyphraseId);\nFOREIGN KEY (paperKeyphrase.paperId) REFERENCES paper (paperId);\nFOREIGN KEY (writes.authorId) REFERENCES author (authorId);\nFOREIGN KEY (writes.paperId) REFERENCES paper (paperId);",
    "schema_complexity": [
      25,
      8
    ]
  },
  "voter_1": {
    "ddl_string": "CREATE TABLE AREA_CODE_STATE (area_code INTEGER, state TEXT, PRIMARY KEY (area_code));\nCREATE TABLE CONTESTANTS (contestant_number INTEGER, contestant_name TEXT, PRIMARY KEY (contestant_number));\nCREATE TABLE VOTES (vote_id INTEGER, phone_number INTEGER, state TEXT, contestant_number INTEGER, created OTHERS, PRIMARY KEY (vote_id));\nFOREIGN KEY (VOTES.contestant_number) REFERENCES CONTESTANTS (contestant_number);\nFOREIGN KEY (VOTES.state) REFERENCES AREA_CODE_STATE (state);",
    "schema_complexity": [
      9,
      2
    ]
  },
  "match_season": {
    "ddl_string": "CREATE TABLE country (Country_id INTEGER, Country_name TEXT, Capital TEXT, Official_native_language TEXT, PRIMARY KEY (Country_id));\nCREATE TABLE team (Team_id INTEGER, Name TEXT, PRIMARY KEY (Team_id));\nCREATE TABLE match_season (Season INTEGER, Player TEXT, Position TEXT, Country INTEGER, Team INTEGER, Draft_Pick_Number INTEGER, Draft_Class TEXT, College TEXT, PRIMARY KEY (Season));\nCREATE TABLE player (Player_ID INTEGER, Player TEXT, Years_Played TEXT, Total_WL TEXT, Singles_WL TEXT, Doubles_WL TEXT, Team INTEGER, PRIMARY KEY (Player_ID));\nFOREIGN KEY (match_season.Team) REFERENCES team (Team_id);\nFOREIGN KEY (match_season.Country) REFERENCES country (Country_id);\nFOREIGN KEY (player.Team) REFERENCES team (Team_id);",
    "schema_complexity": [
      21,
      3
    ]
  },
  "small_bank_1": {
    "ddl_string": "CREATE TABLE ACCOUNTS (custid INTEGER, name TEXT, PRIMARY KEY (custid));\nCREATE TABLE SAVINGS (custid INTEGER, balance INTEGER, PRIMARY KEY (custid));\nCREATE TABLE CHECKING (custid INTEGER, balance INTEGER, PRIMARY KEY (custid));\nFOREIGN KEY (SAVINGS.custid) REFERENCES ACCOUNTS (custid);\nFOREIGN KEY (CHECKING.custid) REFERENCES ACCOUNTS (custid);",
    "schema_complexity": [
      6,
      2
    ]
  },
  "wta_1": {
    "ddl_string": "CREATE TABLE players (player_id INTEGER, first_name TEXT, last_name TEXT, hand TEXT, birth_date OTHERS, country_code TEXT, PRIMARY KEY (player_id));\nCREATE TABLE matches (best_of INTEGER, draw_size INTEGER, loser_age INTEGER, loser_entry TEXT, loser_hand TEXT, loser_ht INTEGER, loser_id INTEGER, loser_ioc TEXT, loser_name TEXT, loser_rank INTEGER, loser_rank_points INTEGER, loser_seed INTEGER, match_num INTEGER, minutes INTEGER, round TEXT, score TEXT, surface TEXT, tourney_date OTHERS, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age INTEGER, winner_entry TEXT, winner_hand TEXT, winner_ht INTEGER, winner_id INTEGER, winner_ioc TEXT, winner_name TEXT, winner_rank INTEGER, winner_rank_points INTEGER, winner_seed INTEGER, year INTEGER);\nCREATE TABLE rankings (ranking_date OTHERS, ranking INTEGER, player_id INTEGER, ranking_points INTEGER, tours INTEGER);\nFOREIGN KEY (matches.winner_id) REFERENCES players (player_id);\nFOREIGN KEY (matches.loser_id) REFERENCES players (player_id);\nFOREIGN KEY (rankings.player_id) REFERENCES players (player_id);",
    "schema_complexity": [
      43,
      3
    ]
  },
  "yelp": {
    "ddl_string": "CREATE TABLE business (bid INTEGER, business_id TEXT, name TEXT, full_address TEXT, city TEXT, latitude TEXT, longitude TEXT, review_count INTEGER, is_open INTEGER, rating INTEGER, state TEXT, PRIMARY KEY (bid));\nCREATE TABLE category (id INTEGER, business_id TEXT, category_name TEXT, PRIMARY KEY (id));\nCREATE TABLE user (uid INTEGER, user_id TEXT, name TEXT, PRIMARY KEY (uid));\nCREATE TABLE checkin (cid INTEGER, business_id TEXT, count INTEGER, day TEXT, PRIMARY KEY (cid));\nCREATE TABLE neighbourhood (id INTEGER, business_id TEXT, neighbourhood_name TEXT, PRIMARY KEY (id));\nCREATE TABLE review (rid INTEGER, business_id TEXT, user_id TEXT, rating INTEGER, text TEXT, year INTEGER, month TEXT, PRIMARY KEY (rid));\nCREATE TABLE tip (tip_id INTEGER, business_id TEXT, text TEXT, user_id TEXT, likes INTEGER, year INTEGER, month TEXT, PRIMARY KEY (tip_id));\nFOREIGN KEY (category.business_id) REFERENCES business (business_id);\nFOREIGN KEY (checkin.business_id) REFERENCES business (business_id);\nFOREIGN KEY (neighbourhood.business_id) REFERENCES business (business_id);\nFOREIGN KEY (review.user_id) REFERENCES user (user_id);\nFOREIGN KEY (review.business_id) REFERENCES business (business_id);\nFOREIGN KEY (tip.user_id) REFERENCES user (user_id);\nFOREIGN KEY (tip.business_id) REFERENCES business (business_id);",
    "schema_complexity": [
      38,
      7
    ]
  },
  "student_1": {
    "ddl_string": "CREATE TABLE list (LastName TEXT, FirstName TEXT, Grade INTEGER, Classroom INTEGER, PRIMARY KEY (LastName));\nCREATE TABLE teachers (LastName TEXT, FirstName TEXT, Classroom INTEGER, PRIMARY KEY (LastName));",
    "schema_complexity": [
      7,
      0
    ]
  },
  "manufacturer": {
    "ddl_string": "CREATE TABLE manufacturer (Manufacturer_ID INTEGER, Open_Year INTEGER, Name TEXT, Num_of_Factories INTEGER, Num_of_Shops INTEGER, PRIMARY KEY (Manufacturer_ID));\nCREATE TABLE furniture (Furniture_ID INTEGER, Name TEXT, Num_of_Component INTEGER, Market_Rate INTEGER, PRIMARY KEY (Furniture_ID));\nCREATE TABLE furniture_manufacte (Manufacturer_ID INTEGER, Furniture_ID INTEGER, Price_in_Dollar INTEGER, PRIMARY KEY (Manufacturer_ID));\nFOREIGN KEY (furniture_manufacte.Furniture_ID) REFERENCES furniture (Furniture_ID);\nFOREIGN KEY (furniture_manufacte.Manufacturer_ID) REFERENCES manufacturer (Manufacturer_ID);",
    "schema_complexity": [
      12,
      2
    ]
  },
  "store_1": {
    "ddl_string": "CREATE TABLE artists (id INTEGER, name TEXT, PRIMARY KEY (id));\nCREATE TABLE sqlite_sequence (name TEXT, seq TEXT);\nCREATE TABLE albums (id INTEGER, title TEXT, artist_id INTEGER, PRIMARY KEY (id));\nCREATE TABLE employees (id INTEGER, last_name TEXT, first_name TEXT, title TEXT, reports_to INTEGER, birth_date OTHERS, hire_date OTHERS, address TEXT, city TEXT, state TEXT, country TEXT, postal_code TEXT, phone TEXT, fax TEXT, email TEXT, PRIMARY KEY (id));\nCREATE TABLE customers (id INTEGER, first_name TEXT, last_name TEXT, company TEXT, address TEXT, city TEXT, state TEXT, country TEXT, postal_code TEXT, phone TEXT, fax TEXT, email TEXT, support_rep_id INTEGER, PRIMARY KEY (id));\nCREATE TABLE genres (id INTEGER, name TEXT, PRIMARY KEY (id));\nCREATE TABLE invoices (id INTEGER, customer_id INTEGER, invoice_date OTHERS, billing_address TEXT, billing_city TEXT, billing_state TEXT, billing_country TEXT, billing_postal_code TEXT, total INTEGER, PRIMARY KEY (id));\nCREATE TABLE media_types (id INTEGER, name TEXT, PRIMARY KEY (id));\nCREATE TABLE tracks (id INTEGER, name TEXT, album_id INTEGER, media_type_id INTEGER, genre_id INTEGER, composer TEXT, milliseconds INTEGER, bytes INTEGER, unit_price INTEGER, PRIMARY KEY (id));\nCREATE TABLE invoice_lines (id INTEGER, invoice_id INTEGER, track_id INTEGER, unit_price INTEGER, quantity INTEGER, PRIMARY KEY (id));\nCREATE TABLE playlists (id INTEGER, name TEXT, PRIMARY KEY (id));\nCREATE TABLE playlist_tracks (playlist_id INTEGER, track_id INTEGER, PRIMARY KEY (playlist_id));\nFOREIGN KEY (albums.artist_id) REFERENCES artists (id);\nFOREIGN KEY (employees.reports_to) REFERENCES employees (id);\nFOREIGN KEY (customers.support_rep_id) REFERENCES employees (id);\nFOREIGN KEY (invoices.customer_id) REFERENCES customers (id);\nFOREIGN KEY (tracks.media_type_id) REFERENCES media_types (id);\nFOREIGN KEY (tracks.genre_id) REFERENCES genres (id);\nFOREIGN KEY (tracks.album_id) REFERENCES albums (id);\nFOREIGN KEY (invoice_lines.track_id) REFERENCES tracks (id);\nFOREIGN KEY (invoice_lines.invoice_id) REFERENCES invoices (id);\nFOREIGN KEY (playlist_tracks.track_id) REFERENCES tracks (id);\nFOREIGN KEY (playlist_tracks.playlist_id) REFERENCES playlists (id);",
    "schema_complexity": [
      66,
      11
    ]
  },
  "train_station": {
    "ddl_string": "CREATE TABLE station (Station_ID INTEGER, Name TEXT, Annual_entry_exit INTEGER, Annual_interchanges INTEGER, Total_Passengers INTEGER, Location TEXT, Main_Services TEXT, Number_of_Platforms INTEGER, PRIMARY KEY (Station_ID));\nCREATE TABLE train (Train_ID INTEGER, Name TEXT, Time TEXT, Service TEXT, PRIMARY KEY (Train_ID));\nCREATE TABLE train_station (Train_ID INTEGER, Station_ID INTEGER, PRIMARY KEY (Train_ID));\nFOREIGN KEY (train_station.Station_ID) REFERENCES station (Station_ID);\nFOREIGN KEY (train_station.Train_ID) REFERENCES train (Train_ID);",
    "schema_complexity": [
      14,
      2
    ]
  },
  "document_management": {
    "ddl_string": "CREATE TABLE Roles (role_code TEXT, role_description TEXT, PRIMARY KEY (role_code));\nCREATE TABLE Users (user_id INTEGER, role_code TEXT, user_name TEXT, user_login TEXT, password TEXT, PRIMARY KEY (user_id));\nCREATE TABLE Document_Structures (document_structure_code TEXT, parent_document_structure_code TEXT, document_structure_description TEXT, PRIMARY KEY (document_structure_code));\nCREATE TABLE Functional_Areas (functional_area_code TEXT, parent_functional_area_code TEXT, functional_area_description TEXT, PRIMARY KEY (functional_area_code));\nCREATE TABLE Images (image_id INTEGER, image_alt_text TEXT, image_name TEXT, image_url TEXT, PRIMARY KEY (image_id));\nCREATE TABLE Documents (document_code TEXT, document_structure_code TEXT, document_type_code TEXT, access_count INTEGER, document_name TEXT, PRIMARY KEY (document_code));\nCREATE TABLE Document_Functional_Areas (document_code TEXT, functional_area_code TEXT);\nCREATE TABLE Document_Sections (section_id INTEGER, document_code TEXT, section_sequence INTEGER, section_code TEXT, section_title TEXT, PRIMARY KEY (section_id));\nCREATE TABLE Document_Sections_Images (section_id INTEGER, image_id INTEGER, PRIMARY KEY (section_id));\nFOREIGN KEY (Users.role_code) REFERENCES Roles (role_code);\nFOREIGN KEY (Documents.document_structure_code) REFERENCES Document_Structures (document_structure_code);\nFOREIGN KEY (Document_Functional_Areas.functional_area_code) REFERENCES Functional_Areas (functional_area_code);\nFOREIGN KEY (Document_Functional_Areas.document_code) REFERENCES Documents (document_code);\nFOREIGN KEY (Document_Sections.document_code) REFERENCES Documents (document_code);\nFOREIGN KEY (Document_Sections_Images.image_id) REFERENCES Images (image_id);\nFOREIGN KEY (Document_Sections_Images.section_id) REFERENCES Document_Sections (section_id);",
    "schema_complexity": [
      31,
      7
    ]
  },
  "formula_1": {
    "ddl_string": "CREATE TABLE circuits (circuitId INTEGER, circuitRef TEXT, name TEXT, location TEXT, country TEXT, lat INTEGER, lng INTEGER, alt INTEGER, url TEXT, PRIMARY KEY (circuitId));\nCREATE TABLE races (raceId INTEGER, year INTEGER, round INTEGER, circuitId INTEGER, name TEXT, date TEXT, time TEXT, url TEXT, PRIMARY KEY (raceId));\nCREATE TABLE drivers (driverId INTEGER, driverRef TEXT, number INTEGER, code TEXT, forename TEXT, surname TEXT, dob TEXT, nationality TEXT, url TEXT, PRIMARY KEY (driverId));\nCREATE TABLE status (statusId INTEGER, status TEXT, PRIMARY KEY (statusId));\nCREATE TABLE seasons (year INTEGER, url TEXT, PRIMARY KEY (year));\nCREATE TABLE constructors (constructorId INTEGER, constructorRef TEXT, name TEXT, nationality TEXT, url TEXT, PRIMARY KEY (constructorId));\nCREATE TABLE constructorStandings (constructorStandingsId INTEGER, raceId INTEGER, constructorId INTEGER, points INTEGER, position INTEGER, positionText TEXT, wins INTEGER, PRIMARY KEY (constructorStandingsId));\nCREATE TABLE results (resultId INTEGER, raceId INTEGER, driverId INTEGER, constructorId INTEGER, number INTEGER, grid INTEGER, position INTEGER, positionText TEXT, positionOrder INTEGER, points INTEGER, laps INTEGER, time TEXT, milliseconds INTEGER, fastestLap INTEGER, rank INTEGER, fastestLapTime TEXT, fastestLapSpeed TEXT, statusId INTEGER, PRIMARY KEY (resultId));\nCREATE TABLE driverStandings (driverStandingsId INTEGER, raceId INTEGER, driverId INTEGER, points INTEGER, position INTEGER, positionText TEXT, wins INTEGER, PRIMARY KEY (driverStandingsId));\nCREATE TABLE constructorResults (constructorResultsId INTEGER, raceId INTEGER, constructorId INTEGER, points INTEGER, status INTEGER, PRIMARY KEY (constructorResultsId));\nCREATE TABLE qualifying (qualifyId INTEGER, raceId INTEGER, driverId INTEGER, constructorId INTEGER, number INTEGER, position INTEGER, q1 TEXT, q2 TEXT, q3 TEXT, PRIMARY KEY (qualifyId));\nCREATE TABLE pitStops (raceId INTEGER, driverId INTEGER, stop INTEGER, lap INTEGER, time TEXT, duration TEXT, milliseconds INTEGER, PRIMARY KEY (raceId));\nCREATE TABLE lapTimes (raceId INTEGER, driverId INTEGER, lap INTEGER, position INTEGER, time TEXT, milliseconds INTEGER, PRIMARY KEY (raceId));\nFOREIGN KEY (races.circuitId) REFERENCES circuits (circuitId);\nFOREIGN KEY (constructorStandings.raceId) REFERENCES races (raceId);\nFOREIGN KEY (constructorStandings.constructorId) REFERENCES constructors (constructorId);\nFOREIGN KEY (results.driverId) REFERENCES drivers (driverId);\nFOREIGN KEY (results.raceId) REFERENCES races (raceId);\nFOREIGN KEY (results.constructorId) REFERENCES constructors (constructorId);\nFOREIGN KEY (driverStandings.driverId) REFERENCES drivers (driverId);\nFOREIGN KEY (driverStandings.raceId) REFERENCES races (raceId);\nFOREIGN KEY (constructorResults.raceId) REFERENCES races (raceId);\nFOREIGN KEY (constructorResults.constructorId) REFERENCES constructors (constructorId);\nFOREIGN KEY (qualifying.driverId) REFERENCES drivers (driverId);\nFOREIGN KEY (qualifying.raceId) REFERENCES races (raceId);\nFOREIGN KEY (qualifying.constructorId) REFERENCES constructors (constructorId);\nFOREIGN KEY (pitStops.driverId) REFERENCES drivers (driverId);\nFOREIGN KEY (pitStops.raceId) REFERENCES races (raceId);\nFOREIGN KEY (lapTimes.driverId) REFERENCES drivers (driverId);\nFOREIGN KEY (lapTimes.raceId) REFERENCES races (raceId);",
    "schema_complexity": [
      94,
      17
    ]
  },
  "game_1": {
    "ddl_string": "CREATE TABLE Student (StuID INTEGER, LName TEXT, Fname TEXT, Age INTEGER, Sex TEXT, Major INTEGER, Advisor INTEGER, city_code TEXT, PRIMARY KEY (StuID));\nCREATE TABLE Video_Games (GameID INTEGER, GName TEXT, GType TEXT, PRIMARY KEY (GameID));\nCREATE TABLE Plays_Games (StuID INTEGER, GameID INTEGER, Hours_Played INTEGER);\nCREATE TABLE SportsInfo (StuID INTEGER, SportName TEXT, HoursPerWeek INTEGER, GamesPlayed INTEGER, OnScholarship TEXT);\nFOREIGN KEY (Plays_Games.StuID) REFERENCES Student (StuID);\nFOREIGN KEY (Plays_Games.GameID) REFERENCES Video_Games (GameID);\nFOREIGN KEY (SportsInfo.StuID) REFERENCES Student (StuID);",
    "schema_complexity": [
      19,
      3
    ]
  },
  "loan_1": {
    "ddl_string": "CREATE TABLE bank (branch_ID INTEGER, bname TEXT, no_of_customers INTEGER, city TEXT, state TEXT, PRIMARY KEY (branch_ID));\nCREATE TABLE customer (cust_ID TEXT, cust_name TEXT, acc_type TEXT, acc_bal INTEGER, no_of_loans INTEGER, credit_score INTEGER, branch_ID INTEGER, state TEXT, PRIMARY KEY (cust_ID));\nCREATE TABLE loan (loan_ID TEXT, loan_type TEXT, cust_ID TEXT, branch_ID TEXT, amount INTEGER, PRIMARY KEY (loan_ID));\nFOREIGN KEY (customer.branch_ID) REFERENCES bank (branch_ID);\nFOREIGN KEY (loan.branch_ID) REFERENCES bank (branch_ID);",
    "schema_complexity": [
      18,
      2
    ]
  },
  "bike_1": {
    "ddl_string": "CREATE TABLE station (id INTEGER, name TEXT, lat INTEGER, long INTEGER, dock_count INTEGER, city TEXT, installation_date TEXT, PRIMARY KEY (id));\nCREATE TABLE status (station_id INTEGER, bikes_available INTEGER, docks_available INTEGER, time TEXT);\nCREATE TABLE trip (id INTEGER, duration INTEGER, start_date TEXT, start_station_name TEXT, start_station_id INTEGER, end_date TEXT, end_station_name TEXT, end_station_id INTEGER, bike_id INTEGER, subscription_type TEXT, zip_code INTEGER, PRIMARY KEY (id));\nCREATE TABLE weather (date TEXT, max_temperature_f INTEGER, mean_temperature_f INTEGER, min_temperature_f INTEGER, max_dew_point_f INTEGER, mean_dew_point_f INTEGER, min_dew_point_f INTEGER, max_humidity INTEGER, mean_humidity INTEGER, min_humidity INTEGER, max_sea_level_pressure_inches INTEGER, mean_sea_level_pressure_inches INTEGER, min_sea_level_pressure_inches INTEGER, max_visibility_miles INTEGER, mean_visibility_miles INTEGER, min_visibility_miles INTEGER, max_wind_Speed_mph INTEGER, mean_wind_speed_mph INTEGER, max_gust_speed_mph INTEGER, precipitation_inches INTEGER, cloud_cover INTEGER, events TEXT, wind_dir_degrees INTEGER, zip_code INTEGER);\nFOREIGN KEY (status.station_id) REFERENCES station (id);",
    "schema_complexity": [
      46,
      1
    ]
  },
  "entrepreneur": {
    "ddl_string": "CREATE TABLE entrepreneur (Entrepreneur_ID INTEGER, People_ID INTEGER, Company TEXT, Money_Requested INTEGER, Investor TEXT, PRIMARY KEY (Entrepreneur_ID));\nCREATE TABLE people (People_ID INTEGER, Name TEXT, Height INTEGER, Weight INTEGER, Date_of_Birth TEXT, PRIMARY KEY (People_ID));\nFOREIGN KEY (entrepreneur.People_ID) REFERENCES people (People_ID);",
    "schema_complexity": [
      10,
      1
    ]
  },
  "orchestra": {
    "ddl_string": "CREATE TABLE conductor (Conductor_ID INTEGER, Name TEXT, Age INTEGER, Nationality TEXT, Year_of_Work INTEGER, PRIMARY KEY (Conductor_ID));\nCREATE TABLE orchestra (Orchestra_ID INTEGER, Orchestra TEXT, Conductor_ID INTEGER, Record_Company TEXT, Year_of_Founded INTEGER, Major_Record_Format TEXT, PRIMARY KEY (Orchestra_ID));\nCREATE TABLE performance (Performance_ID INTEGER, Orchestra_ID INTEGER, Type TEXT, Date TEXT, Official_ratings_ OTHERS, Weekly_rank TEXT, Share TEXT, PRIMARY KEY (Performance_ID));\nCREATE TABLE show (Show_ID INTEGER, Performance_ID INTEGER, If_first_show OTHERS, Result TEXT, Attendance INTEGER);\nFOREIGN KEY (orchestra.Conductor_ID) REFERENCES conductor (Conductor_ID);\nFOREIGN KEY (performance.Orchestra_ID) REFERENCES orchestra (Orchestra_ID);\nFOREIGN KEY (show.Performance_ID) REFERENCES performance (Performance_ID);",
    "schema_complexity": [
      23,
      3
    ]
  },
  "cre_Drama_Workshop_Groups": {
    "ddl_string": "CREATE TABLE Ref_Payment_Methods (payment_method_code TEXT, payment_method_description TEXT, PRIMARY KEY (payment_method_code));\nCREATE TABLE Ref_Service_Types (Service_Type_Code TEXT, Parent_Service_Type_Code TEXT, Service_Type_Description TEXT, PRIMARY KEY (Service_Type_Code));\nCREATE TABLE Addresses (Address_ID TEXT, Line_1 TEXT, Line_2 TEXT, City_Town TEXT, State_County TEXT, Other_Details TEXT, PRIMARY KEY (Address_ID));\nCREATE TABLE Products (Product_ID TEXT, Product_Name TEXT, Product_Price INTEGER, Product_Description TEXT, Other_Product_Service_Details TEXT, PRIMARY KEY (Product_ID));\nCREATE TABLE Marketing_Regions (Marketing_Region_Code TEXT, Marketing_Region_Name TEXT, Marketing_Region_Descriptrion TEXT, Other_Details TEXT, PRIMARY KEY (Marketing_Region_Code));\nCREATE TABLE Clients (Client_ID INTEGER, Address_ID INTEGER, Customer_Email_Address TEXT, Customer_Name TEXT, Customer_Phone TEXT, Other_Details TEXT, PRIMARY KEY (Client_ID));\nCREATE TABLE Drama_Workshop_Groups (Workshop_Group_ID INTEGER, Address_ID INTEGER, Currency_Code TEXT, Marketing_Region_Code TEXT, Store_Name TEXT, Store_Phone TEXT, Store_Email_Address TEXT, Other_Details TEXT, PRIMARY KEY (Workshop_Group_ID));\nCREATE TABLE Performers (Performer_ID INTEGER, Address_ID INTEGER, Customer_Name TEXT, Customer_Phone TEXT, Customer_Email_Address TEXT, Other_Details TEXT, PRIMARY KEY (Performer_ID));\nCREATE TABLE Customers (Customer_ID TEXT, Address_ID INTEGER, Customer_Name TEXT, Customer_Phone TEXT, Customer_Email_Address TEXT, Other_Details TEXT, PRIMARY KEY (Customer_ID));\nCREATE TABLE Stores (Store_ID TEXT, Address_ID INTEGER, Marketing_Region_Code TEXT, Store_Name TEXT, Store_Phone TEXT, Store_Email_Address TEXT, Other_Details TEXT, PRIMARY KEY (Store_ID));\nCREATE TABLE Bookings (Booking_ID INTEGER, Customer_ID INTEGER, Workshop_Group_ID TEXT, Status_Code TEXT, Store_ID INTEGER, Order_Date OTHERS, Planned_Delivery_Date OTHERS, Actual_Delivery_Date OTHERS, Other_Order_Details TEXT, PRIMARY KEY (Booking_ID));\nCREATE TABLE Performers_in_Bookings (Order_ID INTEGER, Performer_ID INTEGER, PRIMARY KEY (Order_ID));\nCREATE TABLE Customer_Orders (Order_ID INTEGER, Customer_ID INTEGER, Store_ID INTEGER, Order_Date OTHERS, Planned_Delivery_Date OTHERS, Actual_Delivery_Date OTHERS, Other_Order_Details TEXT, PRIMARY KEY (Order_ID));\nCREATE TABLE Order_Items (Order_Item_ID INTEGER, Order_ID INTEGER, Product_ID INTEGER, Order_Quantity TEXT, Other_Item_Details TEXT, PRIMARY KEY (Order_Item_ID));\nCREATE TABLE Invoices (Invoice_ID INTEGER, Order_ID INTEGER, payment_method_code TEXT, Product_ID INTEGER, Order_Quantity TEXT, Other_Item_Details TEXT, Order_Item_ID INTEGER, PRIMARY KEY (Invoice_ID));\nCREATE TABLE Services (Service_ID INTEGER, Service_Type_Code TEXT, Workshop_Group_ID INTEGER, Product_Description TEXT, Product_Name TEXT, Product_Price INTEGER, Other_Product_Service_Details TEXT, PRIMARY KEY (Service_ID));\nCREATE TABLE Bookings_Services (Order_ID INTEGER, Product_ID INTEGER, PRIMARY KEY (Order_ID));\nCREATE TABLE Invoice_Items (Invoice_Item_ID INTEGER, Invoice_ID INTEGER, Order_ID INTEGER, Order_Item_ID INTEGER, Product_ID INTEGER, Order_Quantity INTEGER, Other_Item_Details TEXT, PRIMARY KEY (Invoice_Item_ID));\nFOREIGN KEY (Clients.Address_ID) REFERENCES Addresses (Address_ID);\nFOREIGN KEY (Drama_Workshop_Groups.Address_ID) REFERENCES Addresses (Address_ID);\nFOREIGN KEY (Performers.Address_ID) REFERENCES Addresses (Address_ID);\nFOREIGN KEY (Customers.Address_ID) REFERENCES Addresses (Address_ID);\nFOREIGN KEY (Stores.Marketing_Region_Code) REFERENCES Marketing_Regions (Marketing_Region_Code);\nFOREIGN KEY (Stores.Address_ID) REFERENCES Addresses (Address_ID);\nFOREIGN KEY (Bookings.Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID);\nFOREIGN KEY (Bookings.Customer_ID) REFERENCES Clients (Client_ID);\nFOREIGN KEY (Performers_in_Bookings.Order_ID) REFERENCES Bookings (Booking_ID);\nFOREIGN KEY (Performers_in_Bookings.Performer_ID) REFERENCES Performers (Performer_ID);\nFOREIGN KEY (Customer_Orders.Store_ID) REFERENCES Stores (Store_ID);\nFOREIGN KEY (Customer_Orders.Customer_ID) REFERENCES Customers (Customer_ID);\nFOREIGN KEY (Order_Items.Product_ID) REFERENCES Products (Product_ID);\nFOREIGN KEY (Order_Items.Order_ID) REFERENCES Customer_Orders (Order_ID);\nFOREIGN KEY (Invoices.payment_method_code) REFERENCES Ref_Payment_Methods (payment_method_code);\nFOREIGN KEY (Invoices.Order_ID) REFERENCES Customer_Orders (Order_ID);\nFOREIGN KEY (Services.Service_Type_Code) REFERENCES Ref_Service_Types (Service_Type_Code);\nFOREIGN KEY (Services.Workshop_Group_ID) REFERENCES Drama_Workshop_Groups (Workshop_Group_ID);\nFOREIGN KEY (Bookings_Services.Product_ID) REFERENCES Services (Service_ID);\nFOREIGN KEY (Bookings_Services.Order_ID) REFERENCES Bookings (Booking_ID);\nFOREIGN KEY (Invoice_Items.Order_ID) REFERENCES Bookings_Services (Order_ID);\nFOREIGN KEY (Invoice_Items.Product_ID) REFERENCES Bookings_Services (Product_ID);\nFOREIGN KEY (Invoice_Items.Invoice_ID) REFERENCES Invoices (Invoice_ID);\nFOREIGN KEY (Invoice_Items.Order_Item_ID) REFERENCES Order_Items (Order_Item_ID);",
    "schema_complexity": [
      99,
      24
    ]
  },
  "car_1": {
    "ddl_string": "CREATE TABLE continents (ContId INTEGER, Continent TEXT, PRIMARY KEY (ContId));\nCREATE TABLE countries (CountryId INTEGER, CountryName TEXT, Continent INTEGER, PRIMARY KEY (CountryId));\nCREATE TABLE car_makers (Id INTEGER, Maker TEXT, FullName TEXT, Country TEXT, PRIMARY KEY (Id));\nCREATE TABLE model_list (ModelId INTEGER, Maker INTEGER, Model TEXT, PRIMARY KEY (ModelId));\nCREATE TABLE car_names (MakeId INTEGER, Model TEXT, Make TEXT, PRIMARY KEY (MakeId));\nCREATE TABLE cars_data (Id INTEGER, MPG TEXT, Cylinders INTEGER, Edispl INTEGER, Horsepower TEXT, Weight INTEGER, Accelerate INTEGER, Year INTEGER, PRIMARY KEY (Id));\nFOREIGN KEY (countries.Continent) REFERENCES continents (ContId);\nFOREIGN KEY (car_makers.Country) REFERENCES countries (CountryId);\nFOREIGN KEY (model_list.Maker) REFERENCES car_makers (Id);\nFOREIGN KEY (car_names.Model) REFERENCES model_list (Model);\nFOREIGN KEY (cars_data.Id) REFERENCES car_names (MakeId);",
    "schema_complexity": [
      23,
      5
    ]
  },
  "geo": {
    "ddl_string": "CREATE TABLE state (state_name TEXT, population INTEGER, area INTEGER, country_name TEXT, capital TEXT, density INTEGER, PRIMARY KEY (state_name));\nCREATE TABLE city (city_name TEXT, population INTEGER, country_name TEXT, state_name TEXT, PRIMARY KEY (city_name));\nCREATE TABLE border_info (state_name TEXT, border TEXT, PRIMARY KEY (border));\nCREATE TABLE highlow (state_name TEXT, highest_elevation TEXT, lowest_point TEXT, highest_point TEXT, lowest_elevation TEXT, PRIMARY KEY (state_name));\nCREATE TABLE lake (lake_name TEXT, area INTEGER, country_name TEXT, state_name TEXT);\nCREATE TABLE mountain (mountain_name TEXT, mountain_altitude INTEGER, country_name TEXT, state_name TEXT, PRIMARY KEY (mountain_name));\nCREATE TABLE river (river_name TEXT, length INTEGER, country_name TEXT, traverse TEXT, PRIMARY KEY (river_name));\nFOREIGN KEY (city.state_name) REFERENCES state (state_name);\nFOREIGN KEY (border_info.border) REFERENCES state (state_name);\nFOREIGN KEY (border_info.state_name) REFERENCES state (state_name);\nFOREIGN KEY (highlow.state_name) REFERENCES state (state_name);\nFOREIGN KEY (mountain.state_name) REFERENCES state (state_name);\nFOREIGN KEY (river.traverse) REFERENCES state (state_name);",
    "schema_complexity": [
      29,
      6
    ]
  },
  "behavior_monitoring": {
    "ddl_string": "CREATE TABLE Ref_Address_Types (address_type_code TEXT, address_type_description TEXT, PRIMARY KEY (address_type_code));\nCREATE TABLE Ref_Detention_Type (detention_type_code TEXT, detention_type_description TEXT, PRIMARY KEY (detention_type_code));\nCREATE TABLE Ref_Incident_Type (incident_type_code TEXT, incident_type_description TEXT, PRIMARY KEY (incident_type_code));\nCREATE TABLE Addresses (address_id INTEGER, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY (address_id));\nCREATE TABLE Students (student_id INTEGER, address_id INTEGER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, date_first_rental OTHERS, date_left_university OTHERS, other_student_details TEXT, PRIMARY KEY (student_id));\nCREATE TABLE Teachers (teacher_id INTEGER, address_id INTEGER, first_name TEXT, middle_name TEXT, last_name TEXT, gender TEXT, cell_mobile_number TEXT, email_address TEXT, other_details TEXT, PRIMARY KEY (teacher_id));\nCREATE TABLE Assessment_Notes (notes_id INTEGER, student_id INTEGER, teacher_id INTEGER, date_of_notes OTHERS, text_of_notes TEXT, other_details TEXT);\nCREATE TABLE Behavior_Incident (incident_id INTEGER, incident_type_code TEXT, student_id INTEGER, date_incident_start OTHERS, date_incident_end OTHERS, incident_summary TEXT, recommendations TEXT, other_details TEXT, PRIMARY KEY (incident_id));\nCREATE TABLE Detention (detention_id INTEGER, detention_type_code TEXT, teacher_id INTEGER, datetime_detention_start OTHERS, datetime_detention_end OTHERS, detention_summary TEXT, other_details TEXT, PRIMARY KEY (detention_id));\nCREATE TABLE Student_Addresses (student_id INTEGER, address_id INTEGER, date_address_from OTHERS, date_address_to OTHERS, monthly_rental INTEGER, other_details TEXT);\nCREATE TABLE Students_in_Detention (student_id INTEGER, detention_id INTEGER, incident_id INTEGER);\nFOREIGN KEY (Students.address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Teachers.address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Assessment_Notes.teacher_id) REFERENCES Teachers (teacher_id);\nFOREIGN KEY (Assessment_Notes.student_id) REFERENCES Students (student_id);\nFOREIGN KEY (Behavior_Incident.student_id) REFERENCES Students (student_id);\nFOREIGN KEY (Behavior_Incident.incident_type_code) REFERENCES Ref_Incident_Type (incident_type_code);\nFOREIGN KEY (Detention.teacher_id) REFERENCES Teachers (teacher_id);\nFOREIGN KEY (Detention.detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code);\nFOREIGN KEY (Student_Addresses.student_id) REFERENCES Students (student_id);\nFOREIGN KEY (Student_Addresses.address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Students_in_Detention.student_id) REFERENCES Students (student_id);\nFOREIGN KEY (Students_in_Detention.detention_id) REFERENCES Detention (detention_id);\nFOREIGN KEY (Students_in_Detention.incident_id) REFERENCES Behavior_Incident (incident_id);",
    "schema_complexity": [
      64,
      13
    ]
  },
  "cre_Doc_Tracking_DB": {
    "ddl_string": "CREATE TABLE Ref_Document_Types (Document_Type_Code TEXT, Document_Type_Name TEXT, Document_Type_Description TEXT, PRIMARY KEY (Document_Type_Code));\nCREATE TABLE Ref_Calendar (Calendar_Date OTHERS, Day_Number INTEGER, PRIMARY KEY (Calendar_Date));\nCREATE TABLE Ref_Locations (Location_Code TEXT, Location_Name TEXT, Location_Description TEXT, PRIMARY KEY (Location_Code));\nCREATE TABLE Roles (Role_Code TEXT, Role_Name TEXT, Role_Description TEXT, PRIMARY KEY (Role_Code));\nCREATE TABLE All_Documents (Document_ID INTEGER, Date_Stored OTHERS, Document_Type_Code TEXT, Document_Name TEXT, Document_Description TEXT, Other_Details TEXT, PRIMARY KEY (Document_ID));\nCREATE TABLE Employees (Employee_ID INTEGER, Role_Code TEXT, Employee_Name TEXT, Gender_MFU TEXT, Date_of_Birth OTHERS, Other_Details TEXT, PRIMARY KEY (Employee_ID));\nCREATE TABLE Document_Locations (Document_ID INTEGER, Location_Code TEXT, Date_in_Location_From OTHERS, Date_in_Locaton_To OTHERS, PRIMARY KEY (Document_ID));\nCREATE TABLE Documents_to_be_Destroyed (Document_ID INTEGER, Destruction_Authorised_by_Employee_ID INTEGER, Destroyed_by_Employee_ID INTEGER, Planned_Destruction_Date OTHERS, Actual_Destruction_Date OTHERS, Other_Details TEXT, PRIMARY KEY (Document_ID));\nFOREIGN KEY (All_Documents.Date_Stored) REFERENCES Ref_Calendar (Calendar_Date);\nFOREIGN KEY (All_Documents.Document_Type_Code) REFERENCES Ref_Document_Types (Document_Type_Code);\nFOREIGN KEY (Employees.Role_Code) REFERENCES Roles (Role_Code);\nFOREIGN KEY (Document_Locations.Document_ID) REFERENCES All_Documents (Document_ID);\nFOREIGN KEY (Document_Locations.Date_in_Locaton_To) REFERENCES Ref_Calendar (Calendar_Date);\nFOREIGN KEY (Document_Locations.Date_in_Location_From) REFERENCES Ref_Calendar (Calendar_Date);\nFOREIGN KEY (Document_Locations.Location_Code) REFERENCES Ref_Locations (Location_Code);\nFOREIGN KEY (Documents_to_be_Destroyed.Document_ID) REFERENCES All_Documents (Document_ID);\nFOREIGN KEY (Documents_to_be_Destroyed.Actual_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date);\nFOREIGN KEY (Documents_to_be_Destroyed.Planned_Destruction_Date) REFERENCES Ref_Calendar (Calendar_Date);\nFOREIGN KEY (Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID) REFERENCES Employees (Employee_ID);\nFOREIGN KEY (Documents_to_be_Destroyed.Destroyed_by_Employee_ID) REFERENCES Employees (Employee_ID);",
    "schema_complexity": [
      33,
      12
    ]
  },
  "university_basketball": {
    "ddl_string": "CREATE TABLE basketball_match (Team_ID INTEGER, School_ID INTEGER, Team_Name TEXT, ACC_Regular_Season TEXT, ACC_Percent TEXT, ACC_Home TEXT, ACC_Road TEXT, All_Games TEXT, All_Games_Percent INTEGER, All_Home TEXT, All_Road TEXT, All_Neutral TEXT, PRIMARY KEY (Team_ID));\nCREATE TABLE university (School_ID INTEGER, School TEXT, Location TEXT, Founded INTEGER, Affiliation TEXT, Enrollment INTEGER, Nickname TEXT, Primary_conference TEXT, PRIMARY KEY (School_ID));\nFOREIGN KEY (basketball_match.School_ID) REFERENCES university (School_ID);",
    "schema_complexity": [
      20,
      1
    ]
  },
  "soccer_2": {
    "ddl_string": "CREATE TABLE College (cName TEXT, state TEXT, enr INTEGER, PRIMARY KEY (cName));\nCREATE TABLE Player (pID INTEGER, pName TEXT, yCard TEXT, HS INTEGER, PRIMARY KEY (pID));\nCREATE TABLE Tryout (pID INTEGER, cName TEXT, pPos TEXT, decision TEXT, PRIMARY KEY (pID));\nFOREIGN KEY (Tryout.cName) REFERENCES College (cName);\nFOREIGN KEY (Tryout.pID) REFERENCES Player (pID);",
    "schema_complexity": [
      11,
      2
    ]
  },
  "activity_1": {
    "ddl_string": "CREATE TABLE Activity (actid INTEGER, activity_name TEXT, PRIMARY KEY (actid));\nCREATE TABLE Participates_in (stuid INTEGER, actid INTEGER);\nCREATE TABLE Faculty_Participates_in (FacID INTEGER, actid INTEGER);\nCREATE TABLE Student (StuID INTEGER, LName TEXT, Fname TEXT, Age INTEGER, Sex TEXT, Major INTEGER, Advisor INTEGER, city_code TEXT, PRIMARY KEY (StuID));\nCREATE TABLE Faculty (FacID INTEGER, Lname TEXT, Fname TEXT, Rank TEXT, Sex TEXT, Phone INTEGER, Room TEXT, Building TEXT, PRIMARY KEY (FacID));\nFOREIGN KEY (Participates_in.actid) REFERENCES Activity (actid);\nFOREIGN KEY (Participates_in.stuid) REFERENCES Student (StuID);\nFOREIGN KEY (Faculty_Participates_in.actid) REFERENCES Activity (actid);\nFOREIGN KEY (Faculty_Participates_in.FacID) REFERENCES Faculty (FacID);",
    "schema_complexity": [
      22,
      4
    ]
  },
  "cre_Theme_park": {
    "ddl_string": "CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_code TEXT, star_rating_description TEXT, PRIMARY KEY (star_rating_code));\nCREATE TABLE Locations (Location_ID INTEGER, Location_Name TEXT, Address TEXT, Other_Details TEXT, PRIMARY KEY (Location_ID));\nCREATE TABLE Ref_Attraction_Types (Attraction_Type_Code TEXT, Attraction_Type_Description TEXT, PRIMARY KEY (Attraction_Type_Code));\nCREATE TABLE Visitors (Tourist_ID INTEGER, Tourist_Details TEXT, PRIMARY KEY (Tourist_ID));\nCREATE TABLE Features (Feature_ID INTEGER, Feature_Details TEXT, PRIMARY KEY (Feature_ID));\nCREATE TABLE Hotels (hotel_id INTEGER, star_rating_code TEXT, pets_allowed_yn TEXT, price_range INTEGER, other_hotel_details TEXT, PRIMARY KEY (hotel_id));\nCREATE TABLE Tourist_Attractions (Tourist_Attraction_ID INTEGER, Attraction_Type_Code TEXT, Location_ID INTEGER, How_to_Get_There TEXT, Name TEXT, Description TEXT, Opening_Hours TEXT, Other_Details TEXT, PRIMARY KEY (Tourist_Attraction_ID));\nCREATE TABLE Street_Markets (Market_ID INTEGER, Market_Details TEXT, PRIMARY KEY (Market_ID));\nCREATE TABLE Shops (Shop_ID INTEGER, Shop_Details TEXT, PRIMARY KEY (Shop_ID));\nCREATE TABLE Museums (Museum_ID INTEGER, Museum_Details TEXT, PRIMARY KEY (Museum_ID));\nCREATE TABLE Royal_Family (Royal_Family_ID INTEGER, Royal_Family_Details TEXT, PRIMARY KEY (Royal_Family_ID));\nCREATE TABLE Theme_Parks (Theme_Park_ID INTEGER, Theme_Park_Details TEXT, PRIMARY KEY (Theme_Park_ID));\nCREATE TABLE Visits (Visit_ID INTEGER, Tourist_Attraction_ID INTEGER, Tourist_ID INTEGER, Visit_Date OTHERS, Visit_Details TEXT, PRIMARY KEY (Visit_ID));\nCREATE TABLE Photos (Photo_ID INTEGER, Tourist_Attraction_ID INTEGER, Name TEXT, Description TEXT, Filename TEXT, Other_Details TEXT, PRIMARY KEY (Photo_ID));\nCREATE TABLE Staff (Staff_ID INTEGER, Tourist_Attraction_ID INTEGER, Name TEXT, Other_Details TEXT, PRIMARY KEY (Staff_ID));\nCREATE TABLE Tourist_Attraction_Features (Tourist_Attraction_ID INTEGER, Feature_ID INTEGER, PRIMARY KEY (Tourist_Attraction_ID));\nFOREIGN KEY (Hotels.star_rating_code) REFERENCES Ref_Hotel_Star_Ratings (star_rating_code);\nFOREIGN KEY (Tourist_Attractions.Attraction_Type_Code) REFERENCES Ref_Attraction_Types (Attraction_Type_Code);\nFOREIGN KEY (Tourist_Attractions.Location_ID) REFERENCES Locations (Location_ID);\nFOREIGN KEY (Street_Markets.Market_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID);\nFOREIGN KEY (Shops.Shop_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID);\nFOREIGN KEY (Museums.Museum_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID);\nFOREIGN KEY (Royal_Family.Royal_Family_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID);\nFOREIGN KEY (Theme_Parks.Theme_Park_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID);\nFOREIGN KEY (Visits.Tourist_ID) REFERENCES Visitors (Tourist_ID);\nFOREIGN KEY (Visits.Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID);\nFOREIGN KEY (Photos.Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID);\nFOREIGN KEY (Staff.Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID);\nFOREIGN KEY (Tourist_Attraction_Features.Feature_ID) REFERENCES Features (Feature_ID);\nFOREIGN KEY (Tourist_Attraction_Features.Tourist_Attraction_ID) REFERENCES Tourist_Attractions (Tourist_Attraction_ID);",
    "schema_complexity": [
      52,
      14
    ]
  },
  "twitter_1": {
    "ddl_string": "CREATE TABLE follows (f1 INTEGER, f2 INTEGER, PRIMARY KEY (f1));\nCREATE TABLE tweets (id INTEGER, uid INTEGER, text TEXT, createdate OTHERS, PRIMARY KEY (id));\nCREATE TABLE user_profiles (uid INTEGER, name TEXT, email TEXT, partitionid INTEGER, followers INTEGER, PRIMARY KEY (uid));\nFOREIGN KEY (follows.f2) REFERENCES user_profiles (uid);\nFOREIGN KEY (follows.f1) REFERENCES user_profiles (uid);\nFOREIGN KEY (tweets.uid) REFERENCES user_profiles (uid);",
    "schema_complexity": [
      11,
      3
    ]
  },
  "election_representative": {
    "ddl_string": "CREATE TABLE election (Election_ID INTEGER, Representative_ID INTEGER, Date TEXT, Votes INTEGER, Vote_Percent INTEGER, Seats INTEGER, Place INTEGER, PRIMARY KEY (Election_ID));\nCREATE TABLE representative (Representative_ID INTEGER, Name TEXT, State TEXT, Party TEXT, Lifespan TEXT, PRIMARY KEY (Representative_ID));\nFOREIGN KEY (election.Representative_ID) REFERENCES representative (Representative_ID);",
    "schema_complexity": [
      12,
      1
    ]
  },
  "voter_2": {
    "ddl_string": "CREATE TABLE Student (StuID INTEGER, LName TEXT, Fname TEXT, Age INTEGER, Sex TEXT, Major INTEGER, Advisor INTEGER, city_code TEXT, PRIMARY KEY (StuID));\nCREATE TABLE Voting_record (StuID INTEGER, Registration_Date TEXT, Election_Cycle TEXT, President_Vote INTEGER, Vice_President_Vote INTEGER, Secretary_Vote INTEGER, Treasurer_Vote INTEGER, Class_President_Vote INTEGER, Class_Senator_Vote INTEGER);\nFOREIGN KEY (Voting_record.Class_Senator_Vote) REFERENCES Student (StuID);\nFOREIGN KEY (Voting_record.Class_President_Vote) REFERENCES Student (StuID);\nFOREIGN KEY (Voting_record.Treasurer_Vote) REFERENCES Student (StuID);\nFOREIGN KEY (Voting_record.Secretary_Vote) REFERENCES Student (StuID);\nFOREIGN KEY (Voting_record.Vice_President_Vote) REFERENCES Student (StuID);\nFOREIGN KEY (Voting_record.President_Vote) REFERENCES Student (StuID);\nFOREIGN KEY (Voting_record.StuID) REFERENCES Student (StuID);",
    "schema_complexity": [
      17,
      7
    ]
  },
  "wedding": {
    "ddl_string": "CREATE TABLE people (People_ID INTEGER, Name TEXT, Country TEXT, Is_Male TEXT, Age INTEGER, PRIMARY KEY (People_ID));\nCREATE TABLE church (Church_ID INTEGER, Name TEXT, Organized_by TEXT, Open_Date INTEGER, Continuation_of TEXT, PRIMARY KEY (Church_ID));\nCREATE TABLE wedding (Church_ID INTEGER, Male_ID INTEGER, Female_ID INTEGER, Year INTEGER, PRIMARY KEY (Church_ID));\nFOREIGN KEY (wedding.Female_ID) REFERENCES people (People_ID);\nFOREIGN KEY (wedding.Male_ID) REFERENCES people (People_ID);\nFOREIGN KEY (wedding.Church_ID) REFERENCES church (Church_ID);",
    "schema_complexity": [
      14,
      3
    ]
  },
  "news_report": {
    "ddl_string": "CREATE TABLE event (Event_ID INTEGER, Date TEXT, Venue TEXT, Name TEXT, Event_Attendance INTEGER, PRIMARY KEY (Event_ID));\nCREATE TABLE journalist (journalist_ID INTEGER, Name TEXT, Nationality TEXT, Age TEXT, Years_working INTEGER, PRIMARY KEY (journalist_ID));\nCREATE TABLE news_report (journalist_ID INTEGER, Event_ID INTEGER, Work_Type TEXT, PRIMARY KEY (journalist_ID));\nFOREIGN KEY (news_report.Event_ID) REFERENCES event (Event_ID);\nFOREIGN KEY (news_report.journalist_ID) REFERENCES journalist (journalist_ID);",
    "schema_complexity": [
      13,
      2
    ]
  },
  "wine_1": {
    "ddl_string": "CREATE TABLE grapes (ID INTEGER, Grape TEXT, Color TEXT, PRIMARY KEY (ID));\nCREATE TABLE appellations (No INTEGER, Appelation TEXT, County TEXT, State TEXT, Area TEXT, isAVA TEXT, PRIMARY KEY (No));\nCREATE TABLE wine (No INTEGER, Grape TEXT, Winery TEXT, Appelation TEXT, State TEXT, Name TEXT, Year INTEGER, Price INTEGER, Score INTEGER, Cases INTEGER, Drink TEXT);\nFOREIGN KEY (wine.Appelation) REFERENCES appellations (Appelation);\nFOREIGN KEY (wine.Grape) REFERENCES grapes (Grape);",
    "schema_complexity": [
      20,
      2
    ]
  },
  "customers_and_addresses": {
    "ddl_string": "CREATE TABLE Addresses (address_id INTEGER, address_content TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT, PRIMARY KEY (address_id));\nCREATE TABLE Products (product_id INTEGER, product_details TEXT, PRIMARY KEY (product_id));\nCREATE TABLE Customers (customer_id INTEGER, payment_method TEXT, customer_name TEXT, date_became_customer OTHERS, other_customer_details TEXT, PRIMARY KEY (customer_id));\nCREATE TABLE Customer_Addresses (customer_id INTEGER, address_id INTEGER, date_address_from OTHERS, address_type TEXT, date_address_to OTHERS);\nCREATE TABLE Customer_Contact_Channels (customer_id INTEGER, channel_code TEXT, active_from_date OTHERS, active_to_date OTHERS, contact_number TEXT);\nCREATE TABLE Customer_Orders (order_id INTEGER, customer_id INTEGER, order_status TEXT, order_date OTHERS, order_details TEXT, PRIMARY KEY (order_id));\nCREATE TABLE Order_Items (order_id INTEGER, product_id INTEGER, order_quantity TEXT);\nFOREIGN KEY (Customer_Addresses.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Customer_Addresses.address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Customer_Contact_Channels.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Customer_Orders.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Order_Items.order_id) REFERENCES Customer_Orders (order_id);\nFOREIGN KEY (Order_Items.product_id) REFERENCES Products (product_id);",
    "schema_complexity": [
      32,
      6
    ]
  },
  "protein_institute": {
    "ddl_string": "CREATE TABLE building (building_id TEXT, Name TEXT, Street_address TEXT, Years_as_tallest TEXT, Height_feet INTEGER, Floors INTEGER, PRIMARY KEY (building_id));\nCREATE TABLE Institution (Institution_id TEXT, Institution TEXT, Location TEXT, Founded INTEGER, Type TEXT, Enrollment INTEGER, Team TEXT, Primary_Conference TEXT, building_id TEXT, PRIMARY KEY (Institution_id));\nCREATE TABLE protein (common_name TEXT, protein_name TEXT, divergence_from_human_lineage INTEGER, accession_number TEXT, sequence_length INTEGER, sequence_identity_to_human_protein TEXT, Institution_id TEXT, PRIMARY KEY (common_name));\nFOREIGN KEY (Institution.building_id) REFERENCES building (building_id);\nFOREIGN KEY (protein.Institution_id) REFERENCES Institution (Institution_id);",
    "schema_complexity": [
      22,
      2
    ]
  },
  "school_player": {
    "ddl_string": "CREATE TABLE school (School_ID INTEGER, School TEXT, Location TEXT, Enrollment INTEGER, Founded INTEGER, Denomination TEXT, Boys_or_Girls TEXT, Day_or_Boarding TEXT, Year_Entered_Competition INTEGER, School_Colors TEXT, PRIMARY KEY (School_ID));\nCREATE TABLE school_details (School_ID INTEGER, Nickname TEXT, Colors TEXT, League TEXT, Class TEXT, Division TEXT, PRIMARY KEY (School_ID));\nCREATE TABLE school_performance (School_Id INTEGER, School_Year TEXT, Class_A TEXT, Class_AA TEXT, PRIMARY KEY (School_Id));\nCREATE TABLE player (Player_ID INTEGER, Player TEXT, Team TEXT, Age INTEGER, Position TEXT, School_ID INTEGER, PRIMARY KEY (Player_ID));\nFOREIGN KEY (school_details.School_ID) REFERENCES school (School_ID);\nFOREIGN KEY (school_performance.School_Id) REFERENCES school (School_ID);\nFOREIGN KEY (player.School_ID) REFERENCES school (School_ID);",
    "schema_complexity": [
      26,
      3
    ]
  },
  "phone_1": {
    "ddl_string": "CREATE TABLE chip_model (Model_name TEXT, Launch_year INTEGER, RAM_MiB INTEGER, ROM_MiB INTEGER, Slots TEXT, WiFi TEXT, Bluetooth TEXT, PRIMARY KEY (Model_name));\nCREATE TABLE screen_mode (Graphics_mode INTEGER, Char_cells TEXT, Pixels TEXT, Hardware_colours INTEGER, used_kb INTEGER, map TEXT, Type TEXT, PRIMARY KEY (Graphics_mode));\nCREATE TABLE phone (Company_name TEXT, Hardware_Model_name TEXT, Accreditation_type TEXT, Accreditation_level TEXT, Date TEXT, chip_model TEXT, screen_mode TEXT, PRIMARY KEY (Hardware_Model_name));\nFOREIGN KEY (phone.chip_model) REFERENCES chip_model (Model_name);\nFOREIGN KEY (phone.screen_mode) REFERENCES screen_mode (Graphics_mode);",
    "schema_complexity": [
      21,
      2
    ]
  },
  "tvshow": {
    "ddl_string": "CREATE TABLE TV_Channel (id TEXT, series_name TEXT, Country TEXT, Language TEXT, Content TEXT, Pixel_aspect_ratio_PAR TEXT, Hight_definition_TV TEXT, Pay_per_view_PPV TEXT, Package_Option TEXT, PRIMARY KEY (id));\nCREATE TABLE TV_series (id INTEGER, Episode TEXT, Air_Date TEXT, Rating TEXT, Share INTEGER, 18_49_Rating_Share TEXT, Viewers_m TEXT, Weekly_Rank INTEGER, Channel TEXT, PRIMARY KEY (id));\nCREATE TABLE Cartoon (id INTEGER, Title TEXT, Directed_by TEXT, Written_by TEXT, Original_air_date TEXT, Production_code INTEGER, Channel TEXT, PRIMARY KEY (id));\nFOREIGN KEY (TV_series.Channel) REFERENCES TV_Channel (id);\nFOREIGN KEY (Cartoon.Channel) REFERENCES TV_Channel (id);",
    "schema_complexity": [
      25,
      2
    ]
  },
  "wrestler": {
    "ddl_string": "CREATE TABLE wrestler (Wrestler_ID INTEGER, Name TEXT, Reign TEXT, Days_held TEXT, Location TEXT, Event TEXT, PRIMARY KEY (Wrestler_ID));\nCREATE TABLE Elimination (Elimination_ID TEXT, Wrestler_ID TEXT, Team TEXT, Eliminated_By TEXT, Elimination_Move TEXT, Time TEXT, PRIMARY KEY (Elimination_ID));\nFOREIGN KEY (Elimination.Wrestler_ID) REFERENCES wrestler (Wrestler_ID);",
    "schema_complexity": [
      12,
      1
    ]
  },
  "customer_complaints": {
    "ddl_string": "CREATE TABLE Staff (staff_id INTEGER, gender TEXT, first_name TEXT, last_name TEXT, email_address TEXT, phone_number TEXT, PRIMARY KEY (staff_id));\nCREATE TABLE Customers (customer_id INTEGER, customer_type_code TEXT, address_line_1 TEXT, address_line_2 TEXT, town_city TEXT, state TEXT, email_address TEXT, phone_number TEXT, PRIMARY KEY (customer_id));\nCREATE TABLE Products (product_id INTEGER, parent_product_id INTEGER, product_category_code TEXT, date_product_first_available OTHERS, date_product_discontinued OTHERS, product_name TEXT, product_description TEXT, product_price INTEGER, PRIMARY KEY (product_id));\nCREATE TABLE Complaints (complaint_id INTEGER, product_id INTEGER, customer_id INTEGER, complaint_outcome_code TEXT, complaint_status_code TEXT, complaint_type_code TEXT, date_complaint_raised OTHERS, date_complaint_closed OTHERS, staff_id INTEGER);\nFOREIGN KEY (Complaints.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Complaints.product_id) REFERENCES Products (product_id);\nFOREIGN KEY (Complaints.staff_id) REFERENCES Staff (staff_id);",
    "schema_complexity": [
      31,
      3
    ]
  },
  "department_management": {
    "ddl_string": "CREATE TABLE department (Department_ID INTEGER, Name TEXT, Creation TEXT, Ranking INTEGER, Budget_in_Billions INTEGER, Num_Employees INTEGER, PRIMARY KEY (Department_ID));\nCREATE TABLE head (head_ID INTEGER, name TEXT, born_state TEXT, age INTEGER, PRIMARY KEY (head_ID));\nCREATE TABLE management (department_ID INTEGER, head_ID INTEGER, temporary_acting TEXT, PRIMARY KEY (department_ID));\nFOREIGN KEY (management.head_ID) REFERENCES head (head_ID);\nFOREIGN KEY (management.department_ID) REFERENCES department (Department_ID);",
    "schema_complexity": [
      13,
      2
    ]
  },
  "customers_and_products_contacts": {
    "ddl_string": "CREATE TABLE Addresses (address_id INTEGER, line_1_number_building TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY (address_id));\nCREATE TABLE Products (product_id INTEGER, product_type_code TEXT, product_name TEXT, product_price INTEGER, PRIMARY KEY (product_id));\nCREATE TABLE Customers (customer_id INTEGER, payment_method_code TEXT, customer_number TEXT, customer_name TEXT, customer_address TEXT, customer_phone TEXT, customer_email TEXT, PRIMARY KEY (customer_id));\nCREATE TABLE Contacts (contact_id INTEGER, customer_id INTEGER, gender TEXT, first_name TEXT, last_name TEXT, contact_phone TEXT, PRIMARY KEY (contact_id));\nCREATE TABLE Customer_Address_History (customer_id INTEGER, address_id INTEGER, date_from OTHERS, date_to OTHERS);\nCREATE TABLE Customer_Orders (order_id INTEGER, customer_id INTEGER, order_date OTHERS, order_status_code TEXT, PRIMARY KEY (order_id));\nCREATE TABLE Order_Items (order_item_id INTEGER, order_id INTEGER, product_id INTEGER, order_quantity TEXT);\nFOREIGN KEY (Customer_Address_History.address_id) REFERENCES Addresses (address_id);\nFOREIGN KEY (Customer_Address_History.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Customer_Orders.customer_id) REFERENCES Customers (customer_id);\nFOREIGN KEY (Order_Items.order_id) REFERENCES Customer_Orders (order_id);\nFOREIGN KEY (Order_Items.product_id) REFERENCES Products (product_id);",
    "schema_complexity": [
      35,
      5
    ]
  },
  "company_1": {
    "ddl_string": "CREATE TABLE works_on (Essn INTEGER, Pno INTEGER, Hours INTEGER, PRIMARY KEY (Essn));\nCREATE TABLE employee (Fname TEXT, Minit TEXT, Lname TEXT, Ssn INTEGER, Bdate TEXT, Address TEXT, Sex TEXT, Salary INTEGER, Super_ssn INTEGER, Dno INTEGER, PRIMARY KEY (Ssn));\nCREATE TABLE department (Dname TEXT, Dnumber INTEGER, Mgr_ssn INTEGER, Mgr_start_date TEXT, PRIMARY KEY (Dnumber));\nCREATE TABLE project (Pname TEXT, Pnumber INTEGER, Plocation TEXT, Dnum INTEGER, PRIMARY KEY (Pnumber));\nCREATE TABLE dependent (Essn INTEGER, Dependent_name TEXT, Sex TEXT, Bdate TEXT, Relationship TEXT, PRIMARY KEY (Essn));\nCREATE TABLE dept_locations (Dnumber INTEGER, Dlocation TEXT, PRIMARY KEY (Dnumber));",
    "schema_complexity": [
      28,
      0
    ]
  },
  "workshop_paper": {
    "ddl_string": "CREATE TABLE workshop (Workshop_ID INTEGER, Date TEXT, Venue TEXT, Name TEXT, PRIMARY KEY (Workshop_ID));\nCREATE TABLE submission (Submission_ID INTEGER, Scores INTEGER, Author TEXT, College TEXT, PRIMARY KEY (Submission_ID));\nCREATE TABLE Acceptance (Submission_ID INTEGER, Workshop_ID INTEGER, Result TEXT, PRIMARY KEY (Submission_ID));\nFOREIGN KEY (Acceptance.Workshop_ID) REFERENCES workshop (Workshop_ID);\nFOREIGN KEY (Acceptance.Submission_ID) REFERENCES submission (Submission_ID);",
    "schema_complexity": [
      11,
      2
    ]
  },
  "epinions_1": {
    "ddl_string": "CREATE TABLE item (i_id INTEGER, title TEXT, PRIMARY KEY (i_id));\nCREATE TABLE review (a_id INTEGER, u_id INTEGER, i_id INTEGER, rating INTEGER, rank INTEGER, PRIMARY KEY (a_id));\nCREATE TABLE useracct (u_id INTEGER, name TEXT, PRIMARY KEY (u_id));\nCREATE TABLE trust (source_u_id INTEGER, target_u_id INTEGER, trust INTEGER);\nFOREIGN KEY (review.i_id) REFERENCES item (i_id);\nFOREIGN KEY (review.u_id) REFERENCES useracct (u_id);\nFOREIGN KEY (trust.target_u_id) REFERENCES useracct (u_id);\nFOREIGN KEY (trust.source_u_id) REFERENCES useracct (u_id);",
    "schema_complexity": [
      12,
      4
    ]
  },
  "party_host": {
    "ddl_string": "CREATE TABLE party (Party_ID INTEGER, Party_Theme TEXT, Location TEXT, First_year TEXT, Last_year TEXT, Number_of_hosts INTEGER, PRIMARY KEY (Party_ID));\nCREATE TABLE host (Host_ID INTEGER, Name TEXT, Nationality TEXT, Age TEXT, PRIMARY KEY (Host_ID));\nCREATE TABLE party_host (Party_ID INTEGER, Host_ID INTEGER, Is_Main_in_Charge OTHERS, PRIMARY KEY (Party_ID));\nFOREIGN KEY (party_host.Party_ID) REFERENCES party (Party_ID);\nFOREIGN KEY (party_host.Host_ID) REFERENCES host (Host_ID);",
    "schema_complexity": [
      13,
      2
    ]
  },
  "product_catalog": {
    "ddl_string": "CREATE TABLE Attribute_Definitions (attribute_id INTEGER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY (attribute_id));\nCREATE TABLE Catalogs (catalog_id INTEGER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication OTHERS, date_of_latest_revision OTHERS, PRIMARY KEY (catalog_id));\nCREATE TABLE Catalog_Structure (catalog_level_number INTEGER, catalog_id INTEGER, catalog_level_name TEXT, PRIMARY KEY (catalog_level_number));\nCREATE TABLE Catalog_Contents (catalog_entry_id INTEGER, catalog_level_number INTEGER, parent_entry_id INTEGER, previous_entry_id INTEGER, next_entry_id INTEGER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars INTEGER, price_in_euros INTEGER, price_in_pounds INTEGER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY (catalog_entry_id));\nCREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id INTEGER, catalog_level_number INTEGER, attribute_id INTEGER, attribute_value TEXT);\nFOREIGN KEY (Catalog_Structure.catalog_id) REFERENCES Catalogs (catalog_id);\nFOREIGN KEY (Catalog_Contents.catalog_level_number) REFERENCES Catalog_Structure (catalog_level_number);\nFOREIGN KEY (Catalog_Contents_Additional_Attributes.catalog_level_number) REFERENCES Catalog_Structure (catalog_level_number);\nFOREIGN KEY (Catalog_Contents_Additional_Attributes.catalog_entry_id) REFERENCES Catalog_Contents (catalog_entry_id);",
    "schema_complexity": [
      29,
      4
    ]
  }
}